{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Logo by Conrad Fenech What is MiSTer FPGA? MiSTer is an open source project that aims to recreate various classic computers, game consoles, and arcade machines using modern hardware. It allows software and game images to run as they would on original hardware, using peripherals such as mice, keyboards, joysticks and other game controllers. MiSTer utilizes a readily available FPGA board called the DE10-Nano , which connects to your TV or monitor via HDMI video out. It can also be expanded with various add-on boards , such as a 7-port USB hub, 128MB SDRAM module, and either a Digital I/O or Analog I/O board. The MiSTer project is currently under active development with new cores, features, and bug-fixes appearing on a regular basis. Check the navigation sidebar to the left for documentation on how to use your MiSTer FPGA. Feel free to join the official MiSTer FPGA Discord Server and head to the MiSTer FPGA Discussion Forums to learn more and participate in the community. For a comprehensive video overview of the MiSTer please check out My Life In Gaming's video .","title":"Home"},{"location":"#what-is-mister-fpga","text":"MiSTer is an open source project that aims to recreate various classic computers, game consoles, and arcade machines using modern hardware. It allows software and game images to run as they would on original hardware, using peripherals such as mice, keyboards, joysticks and other game controllers. MiSTer utilizes a readily available FPGA board called the DE10-Nano , which connects to your TV or monitor via HDMI video out. It can also be expanded with various add-on boards , such as a 7-port USB hub, 128MB SDRAM module, and either a Digital I/O or Analog I/O board. The MiSTer project is currently under active development with new cores, features, and bug-fixes appearing on a regular basis. Check the navigation sidebar to the left for documentation on how to use your MiSTer FPGA. Feel free to join the official MiSTer FPGA Discord Server and head to the MiSTer FPGA Discussion Forums to learn more and participate in the community. For a comprehensive video overview of the MiSTer please check out My Life In Gaming's video .","title":"What is MiSTer FPGA?"},{"location":"editing/","text":"Here's a quick guide to show you how to edit this documentation site. It's very similar to editing a wiki page, but requires a couple extra steps. All edits are approved by the administrators of the MkDocs_MiSTer repository on GitHub for quality control purposes. How to edit/contribute to pages on this documentation site First, you will need a github account: Signup to GitHub Next you go to the page you want to edit and click on the pen icon in the top right for that page: Then you need to fork the repository for this documentation. A repository is just what coders call the place where they store all the code for their project. A fork is just a personal copy of that repository where you can make your own changes to it. So let's click \"Fork this Repository\": Now make your changes using the text editor. The MkDocs_MiSTer site uses the Markdown syntax , so make sure to follow those guidelines. The editor comes with a Preview Tab so you can see how your work may appear. Certain MkDocs specific tags or formatting (e.g. {target=_blank} which makes your browser open a link in a new tab): Write in a short description of your changes and propose the changes that describes why you made the changes: The next step is to create a pull request. Pull requests are a way of asking the repository owner to accept the changes you've made into their repository. Double check your work to make sure it is what you wanted: The form to create a pull request will appear. This is your last chance to double-check your work before creating the pull request to ask the owner to \"merge\" your changes into the main repository. Merging these changes will update the site momentarily, so make sure the changes you made are correct: In this case, the user birdybrain submitted a very goofy change, and as such his pull request was denied (and closed). This upset birdybrain quite a bit and he was disrespectful in his reply. Be respectful and understanding and try to work with the owners of the repository. Don't be like birdybrain here: Hopefully that helps you learn how to edit the documentation on this site. If you completed this and edited a page, congratulations! You now should know how to use GitHub, fork a repository, commit changes to the source code, and create a pull request.","title":"Editing These Docs"},{"location":"editing/#how-to-editcontribute-to-pages-on-this-documentation-site","text":"First, you will need a github account: Signup to GitHub Next you go to the page you want to edit and click on the pen icon in the top right for that page: Then you need to fork the repository for this documentation. A repository is just what coders call the place where they store all the code for their project. A fork is just a personal copy of that repository where you can make your own changes to it. So let's click \"Fork this Repository\": Now make your changes using the text editor. The MkDocs_MiSTer site uses the Markdown syntax , so make sure to follow those guidelines. The editor comes with a Preview Tab so you can see how your work may appear. Certain MkDocs specific tags or formatting (e.g. {target=_blank} which makes your browser open a link in a new tab): Write in a short description of your changes and propose the changes that describes why you made the changes: The next step is to create a pull request. Pull requests are a way of asking the repository owner to accept the changes you've made into their repository. Double check your work to make sure it is what you wanted: The form to create a pull request will appear. This is your last chance to double-check your work before creating the pull request to ask the owner to \"merge\" your changes into the main repository. Merging these changes will update the site momentarily, so make sure the changes you made are correct: In this case, the user birdybrain submitted a very goofy change, and as such his pull request was denied (and closed). This upset birdybrain quite a bit and he was disrespectful in his reply. Be respectful and understanding and try to work with the owners of the repository. Don't be like birdybrain here: Hopefully that helps you learn how to edit the documentation on this site. If you completed this and edited a page, congratulations! You now should know how to use GitHub, fork a repository, commit changes to the source code, and create a pull request.","title":"How to edit/contribute to pages on this documentation site"},{"location":"advanced/audio/","text":"The MiSTer has audio filters that you can use to make the audio sound less harsh and balanced to your ears. Some old game systems were not made for raw digital output, they had analog audio filters in place before the sound reached the speakers and your ears. These filters are generated using mathematical formulas to represent real common filters used in electronics. You can find all of the filters in the Filters_MiSTer Github Repository . Types of Filters Arcade LPF - The filters contained within this folder are designed to replicate the filtering of common arcade cabinets. Many arcade games' raw audio output is very harsh on the ears, and using the filters in here can help soften the sound to be more pleasing. 1st and 2nd refers to the amount of passes the filter goes through. LPF stands for \"low-pass filter\". The #khz tells you what frequency it starts filtering at. Core Specific - These are for specific cores. Currently there is only one core-specific filter and it is in order to replicate the filtering of one model of Super Nintendo. General LPF - These are more generalized low pass filters. The filters in this folder have a significantly different cutoff frequency when compared to the arcade cores. Audio Filtering Example Video","title":"Audio Filters"},{"location":"advanced/audio/#types-of-filters","text":"Arcade LPF - The filters contained within this folder are designed to replicate the filtering of common arcade cabinets. Many arcade games' raw audio output is very harsh on the ears, and using the filters in here can help soften the sound to be more pleasing. 1st and 2nd refers to the amount of passes the filter goes through. LPF stands for \"low-pass filter\". The #khz tells you what frequency it starts filtering at. Core Specific - These are for specific cores. Currently there is only one core-specific filter and it is in order to replicate the filtering of one model of Super Nintendo. General LPF - These are more generalized low pass filters. The filters in this folder have a significantly different cutoff frequency when compared to the arcade cores.","title":"Types of Filters"},{"location":"advanced/audio/#audio-filtering-example-video","text":"","title":"Audio Filtering Example Video"},{"location":"advanced/computer/","text":"There are many computer-core specific features and functionality to go over. Here are a few: Computer core Internet and console connections Starting from 2018 may 7 release MiSTer supports serial (UART) connection from FPGA to Linux. Linux OS runs PPP or Console daemon on this connection allowing access the internet or Linux shell from FPGA cores. Cores supporting serial connection Minimig . Tested on Roadshow TCP/IP , AmiTCP and Miami. AmiTCP provides more complete solution with ftpd daemon. There are many other 3rd party addons are based on AmiTCP, so it's advised to use this package. Roadshow works very well, it is fully compatible with AmiTCP and offers additional extensions. Follow these Instructions for complete setup. It is still a paid for and supported product, you can find more information here . Miami was successfully tested. The Miami settings that worked: use PPP connection via serial.device, set baud rate to 115200, RTS/CTS to on, and enable 8N1. Set modem to nullmodem. Manually enter an IP suitable for your lan ending in 254, e.g. 192.168.1.254. Manually add a DNS server, e.g. 8.8.8.8 for Google DNS. Term v4.7 has been used to test console connection. For a more detailed MiamiDX setup guide, please check here You can also double the speed on Minimig by modifying the /sbin/uartmode script, like mine: echo \"$localip:$remoteip\" >/tmp/ppp_options cat /media/fat/linux/ppp_options >>/tmp/ppp_options echo 1 > /proc/sys/net/ipv4/ip_forward [ -f /tmp/CORENAME ] && core_name=$(cat /tmp/CORENAME) if [ \"$core_name\" == \"Minimig\" ]; then taskset 1 pppd 230400 file /tmp/ppp_options else taskset 1 pppd $conn_speed file /tmp/ppp_options fi Of course, change the baud rate as well to 230400 on your TCP/IP stack of choice. Tested under MiamiDX, no issues. ao486 . PPP and serial connections are working under DOS, tested with mTCP and various terminal software. PPP is also working under Win3.11/Win95/Win95. DOS tools are here : dos_ftpd.zip . The DOS FTP server included does not support passive mode, so set your client to use active. C64 . Serial connection. Tandy Color Computer 3 (CoCo3) . Serial Connection. Macintosh Plus . Serial and PPP support. AtariST . Serial and PPP support. OSD provides an option to switch between PPP and Console on these cores. Both console and PPP are using baud rate 115200 8N1 mode with hardware RTS/CTS flow control for stability. Console connection Using this connection with supported terminal application on FPGA core, you can access the Linux shell and do some file managements or Linux settings if required. No special settings are required of Linux. PPP connection Using this connection core may have internet connection. More important, the core may run ftp daemon and provide access to its filesystem, so you can use FTP client on PC to move the files to/from the emulated system. PPP daemon uses /media/fat/linux/ppp_options (linux\\ppp_options of PC) file. Most likely you don't need to modify it. Recent update assigns IPs automatically. Core gets .254 IP (for example 192.168.1.254). If you want other IP, then modify ppp_options file. For correct PPP work, make sure you see a network icon in Menu core before starting the other core. Otherwise PPP link won't get IPs. If you've started core earlier, then simply connect the core to PPP and disconnect. Next connection will get correct IP. Or you can switch UART mode in OSD to renew the IP. NOTE: I'm looking Amiga and MSDOS terminal supporting color and control codes of linux, so it will be possible to use Midnight Commander in terminal connection. If you know such terminal application, then let me know. PPP connection in MS-DOS on ao486 In the Mister System Menu Win + F12 set the \"Uart Connection\" to \"PPP\", Baud to \"115200\" and save it. Download the DOS PPPD driver: DOSPPP06.ZIP from HERE . Grab the latest version of Michael Brutman's mTCP TCP/IP applications for MS-DOS, from the 'Downloads' section HERE Transfer those zip files over to your ao486's virtual hard drive and unzip them into the directory of your choice (e.g. C:\\NETWORK) In MS-DOS on the core, you need to edit a mtcp config file. There's a sample config in the SAMPLES directory called 'sample.cfg' that you can use as a base, or you can use the example below (simple text file named mtcp.cfg in your installation folder). If you use the sample.cfg file, you need to add the top MTCPSLIP line.: SET MTCPSLIP=true mtu 1500 packetint 0x60 hostname ao486_fpga IPADDR 192.168.1.254 <- Change this to reflect your network. NETMASK 255.255.255.0 GATEWAY 192.168.1.1 <- Change this to reflect your network. NAMESERVER 8.8.8.8 <- You can change this to reflect your network if you want to. LEASE_TIME 86400 IRCJR_USER FPGA_User IRCJR_NICK fpga_user IRCJR_NAME FPGA_User Edit your AUTOEXEC.BAT and add the path to your installation folder, as well with the MTCP variable: PATH C:\\DOS;C:\\NETWORK SET MTCPCFG=C:\\NETWORK\\MTCP.CFG The DOS PPPD driver archive includes the ppp packet driver, which you need to load: epppd com1 115200 local Enjoy telnet, ftp, irc, and other internet applications while you use MS-DOS. Be sure and make sure you have ANSI.SYS loaded in CONFIG.SYS if you want to use the telnet client to hit telnet BBSes. Original discussion HERE . PPP connection in Windows 95 on ao486 Unfortunately winsock and winsock2 provided by Microsoft do not work with the ppp connection when in Windows 95. The following steps will allow you to get it working: In the Mister System Menu Win + F12 set the \"Uart Connection\" to \"PPP\" and save it. In Windows 95 ensure the COM1 device is installed in Start->Settings->Control Panel->System - Device Manager Tab, there should be a twisty called Ports(COM & LPT) and under that a \"Communications Port (COM1)\" If it doesn't exist go to Start->Settings->Control Panel->Add/New Hardware and it should be automatically added. Get the replacement PPP client Download the software. There are other newer versions available BUT be warned only version 3.0 will work. Trumpet Winsock 3.0 - (I extracted the file from the disk image and uploaded it using the DOS ftp client documented above) License the Software - This software is still shareware (time limited) please license it appropriately. Once you acquire a license you can put the details in Tcpman in the \"Special\" menu in \"Password registration\" Configure Software Start Tcpman Under File-->PPP Options ensure all checkboxes are unchecked and the text boxes are blank. Under File-->Setup Enter an \"IP Address\" suitable for your LAN eg 192.168.1.254 and a \"DNS Server(s)\" 192.168.1.1 Under the Driver section select the PPP radio button and click on \"Dialer settings...\" In the \"Dialer settings...\" \"COMM port\" COM1 \"Baud rate\" 115200 Using the software ( important, be patient ) Win95 is rather slow so let it start fully before starting the PPP manager (Tcpman) Once it is started it will begin syncing with PPP on the linux host... Be patient it takes a few seconds. When you see the PPP[C021] SND and RCV you can start your TCP/IP program I have found it to be a little complicated to get started, but once it is running it is rock solid and supports multiple client programs at once. Serial connection on C64 The following is an example for connecting to a BBS using Striketerm 2014 and VIC-101 2400 baud mode: Start the C64 core (please note that custom kernels may remove functionality required, if in doubt use the built in kernel). In the Mister C64 Menu Win + F12 , go to \"Hardware\", set the \"Expansion\" to \"RS232\", \"RS232 Connection\" to \"Internal\", \"RS232 mode\" to \"VIC-1011\" and save it. In the Mister System Menu Win + F12 set the \"Uart Connection\" to \"Modem\", Link to \"TCP\", Baud to \"2400\" and save it. Load Striketerm 2014 from d64. Available from here Keep the defaults in the Main Menu F1 , ensure you are running at 2400 baud. Save a BBS into the Addressbook F5 , you can get some from here Surf the BBS very slowly... The following is an example for connecting to a BBS using CCGMS Ultimate and UP9600 mode: Start the C64 core (please note that custom kernels may remove functionality required, if in doubt use the built in kernel). In the Mister C64 Menu Win + F12 , go to \"Hardware\", set the \"Expansion\" to \"RS232\", \"RS232 Connection\" to \"Internal\", \"RS232 mode\" to \"UP9600\" and save it. In the Mister System Menu Win + F12 set the \"Uart Connection\" to \"Modem\", Link to \"TCP\", Baud to \"9600\" and save it. Load CCGMS Ultimate from d64, available here Hit F7 key to access configuration page, then M to change the modem to \"UP9600/EZ232\", then B to set the baud speed to \"9600\". Save the config with the S key. Access the Phonebook with A key from the same configuration page, save some BBS addresses from here Enjoy the faster BBS experience. Serial connection on Color Computer 3 (CoCo3) The following is an example for connecting to a BBS using UltimaTerm 4.0: Start the CoCo3 core (use Multi-pak Slot 4 Disk or Slot 2 CoCoSDC) In the MiSTer System Menu Win + F12 set the \"Uart Connection\" to \"Modem\", Link to \"TCP\", Baud to \"9600\" and save it. Mount UltimaTerm DSK file, obtainable HERE Load UltimaTerm by issuing: LOADM\"ULTIMATE Hit Alt + O to open Options Menu, then M for Modem options. Use B to modify the baud rate ( Left or Right arrows to change values) to 9600. The rest of the settings should be default (word length 8, parity none, stop bits 1, duplex full, terminal type ANSI). Save your changes with Alt + D then F1 key. Hit Alt + A to open Phonebook, add a BBS and dial away. Alternatively, you can dial directly by issuing an ATDTBBS_Address:port . Full UltimaTerm 4.0 Documentation HERE","title":"Computer Core Networking"},{"location":"advanced/computer/#computer-core-internet-and-console-connections","text":"Starting from 2018 may 7 release MiSTer supports serial (UART) connection from FPGA to Linux. Linux OS runs PPP or Console daemon on this connection allowing access the internet or Linux shell from FPGA cores.","title":"Computer core Internet and console connections"},{"location":"advanced/computer/#cores-supporting-serial-connection","text":"Minimig . Tested on Roadshow TCP/IP , AmiTCP and Miami. AmiTCP provides more complete solution with ftpd daemon. There are many other 3rd party addons are based on AmiTCP, so it's advised to use this package. Roadshow works very well, it is fully compatible with AmiTCP and offers additional extensions. Follow these Instructions for complete setup. It is still a paid for and supported product, you can find more information here . Miami was successfully tested. The Miami settings that worked: use PPP connection via serial.device, set baud rate to 115200, RTS/CTS to on, and enable 8N1. Set modem to nullmodem. Manually enter an IP suitable for your lan ending in 254, e.g. 192.168.1.254. Manually add a DNS server, e.g. 8.8.8.8 for Google DNS. Term v4.7 has been used to test console connection. For a more detailed MiamiDX setup guide, please check here You can also double the speed on Minimig by modifying the /sbin/uartmode script, like mine: echo \"$localip:$remoteip\" >/tmp/ppp_options cat /media/fat/linux/ppp_options >>/tmp/ppp_options echo 1 > /proc/sys/net/ipv4/ip_forward [ -f /tmp/CORENAME ] && core_name=$(cat /tmp/CORENAME) if [ \"$core_name\" == \"Minimig\" ]; then taskset 1 pppd 230400 file /tmp/ppp_options else taskset 1 pppd $conn_speed file /tmp/ppp_options fi Of course, change the baud rate as well to 230400 on your TCP/IP stack of choice. Tested under MiamiDX, no issues. ao486 . PPP and serial connections are working under DOS, tested with mTCP and various terminal software. PPP is also working under Win3.11/Win95/Win95. DOS tools are here : dos_ftpd.zip . The DOS FTP server included does not support passive mode, so set your client to use active. C64 . Serial connection. Tandy Color Computer 3 (CoCo3) . Serial Connection. Macintosh Plus . Serial and PPP support. AtariST . Serial and PPP support. OSD provides an option to switch between PPP and Console on these cores. Both console and PPP are using baud rate 115200 8N1 mode with hardware RTS/CTS flow control for stability.","title":"Cores supporting serial connection"},{"location":"advanced/computer/#console-connection","text":"Using this connection with supported terminal application on FPGA core, you can access the Linux shell and do some file managements or Linux settings if required. No special settings are required of Linux.","title":"Console connection"},{"location":"advanced/computer/#ppp-connection","text":"Using this connection core may have internet connection. More important, the core may run ftp daemon and provide access to its filesystem, so you can use FTP client on PC to move the files to/from the emulated system. PPP daemon uses /media/fat/linux/ppp_options (linux\\ppp_options of PC) file. Most likely you don't need to modify it. Recent update assigns IPs automatically. Core gets .254 IP (for example 192.168.1.254). If you want other IP, then modify ppp_options file. For correct PPP work, make sure you see a network icon in Menu core before starting the other core. Otherwise PPP link won't get IPs. If you've started core earlier, then simply connect the core to PPP and disconnect. Next connection will get correct IP. Or you can switch UART mode in OSD to renew the IP. NOTE: I'm looking Amiga and MSDOS terminal supporting color and control codes of linux, so it will be possible to use Midnight Commander in terminal connection. If you know such terminal application, then let me know.","title":"PPP connection"},{"location":"advanced/computer/#ppp-connection-in-ms-dos-on-ao486","text":"In the Mister System Menu Win + F12 set the \"Uart Connection\" to \"PPP\", Baud to \"115200\" and save it. Download the DOS PPPD driver: DOSPPP06.ZIP from HERE . Grab the latest version of Michael Brutman's mTCP TCP/IP applications for MS-DOS, from the 'Downloads' section HERE Transfer those zip files over to your ao486's virtual hard drive and unzip them into the directory of your choice (e.g. C:\\NETWORK) In MS-DOS on the core, you need to edit a mtcp config file. There's a sample config in the SAMPLES directory called 'sample.cfg' that you can use as a base, or you can use the example below (simple text file named mtcp.cfg in your installation folder). If you use the sample.cfg file, you need to add the top MTCPSLIP line.: SET MTCPSLIP=true mtu 1500 packetint 0x60 hostname ao486_fpga IPADDR 192.168.1.254 <- Change this to reflect your network. NETMASK 255.255.255.0 GATEWAY 192.168.1.1 <- Change this to reflect your network. NAMESERVER 8.8.8.8 <- You can change this to reflect your network if you want to. LEASE_TIME 86400 IRCJR_USER FPGA_User IRCJR_NICK fpga_user IRCJR_NAME FPGA_User Edit your AUTOEXEC.BAT and add the path to your installation folder, as well with the MTCP variable: PATH C:\\DOS;C:\\NETWORK SET MTCPCFG=C:\\NETWORK\\MTCP.CFG The DOS PPPD driver archive includes the ppp packet driver, which you need to load: epppd com1 115200 local Enjoy telnet, ftp, irc, and other internet applications while you use MS-DOS. Be sure and make sure you have ANSI.SYS loaded in CONFIG.SYS if you want to use the telnet client to hit telnet BBSes. Original discussion HERE .","title":"PPP connection in MS-DOS on ao486"},{"location":"advanced/computer/#ppp-connection-in-windows-95-on-ao486","text":"Unfortunately winsock and winsock2 provided by Microsoft do not work with the ppp connection when in Windows 95. The following steps will allow you to get it working: In the Mister System Menu Win + F12 set the \"Uart Connection\" to \"PPP\" and save it. In Windows 95 ensure the COM1 device is installed in Start->Settings->Control Panel->System - Device Manager Tab, there should be a twisty called Ports(COM & LPT) and under that a \"Communications Port (COM1)\" If it doesn't exist go to Start->Settings->Control Panel->Add/New Hardware and it should be automatically added. Get the replacement PPP client Download the software. There are other newer versions available BUT be warned only version 3.0 will work. Trumpet Winsock 3.0 - (I extracted the file from the disk image and uploaded it using the DOS ftp client documented above) License the Software - This software is still shareware (time limited) please license it appropriately. Once you acquire a license you can put the details in Tcpman in the \"Special\" menu in \"Password registration\" Configure Software Start Tcpman Under File-->PPP Options ensure all checkboxes are unchecked and the text boxes are blank. Under File-->Setup Enter an \"IP Address\" suitable for your LAN eg 192.168.1.254 and a \"DNS Server(s)\" 192.168.1.1 Under the Driver section select the PPP radio button and click on \"Dialer settings...\" In the \"Dialer settings...\" \"COMM port\" COM1 \"Baud rate\" 115200 Using the software ( important, be patient ) Win95 is rather slow so let it start fully before starting the PPP manager (Tcpman) Once it is started it will begin syncing with PPP on the linux host... Be patient it takes a few seconds. When you see the PPP[C021] SND and RCV you can start your TCP/IP program I have found it to be a little complicated to get started, but once it is running it is rock solid and supports multiple client programs at once.","title":"PPP connection in Windows 95 on ao486"},{"location":"advanced/computer/#serial-connection-on-c64","text":"The following is an example for connecting to a BBS using Striketerm 2014 and VIC-101 2400 baud mode: Start the C64 core (please note that custom kernels may remove functionality required, if in doubt use the built in kernel). In the Mister C64 Menu Win + F12 , go to \"Hardware\", set the \"Expansion\" to \"RS232\", \"RS232 Connection\" to \"Internal\", \"RS232 mode\" to \"VIC-1011\" and save it. In the Mister System Menu Win + F12 set the \"Uart Connection\" to \"Modem\", Link to \"TCP\", Baud to \"2400\" and save it. Load Striketerm 2014 from d64. Available from here Keep the defaults in the Main Menu F1 , ensure you are running at 2400 baud. Save a BBS into the Addressbook F5 , you can get some from here Surf the BBS very slowly... The following is an example for connecting to a BBS using CCGMS Ultimate and UP9600 mode: Start the C64 core (please note that custom kernels may remove functionality required, if in doubt use the built in kernel). In the Mister C64 Menu Win + F12 , go to \"Hardware\", set the \"Expansion\" to \"RS232\", \"RS232 Connection\" to \"Internal\", \"RS232 mode\" to \"UP9600\" and save it. In the Mister System Menu Win + F12 set the \"Uart Connection\" to \"Modem\", Link to \"TCP\", Baud to \"9600\" and save it. Load CCGMS Ultimate from d64, available here Hit F7 key to access configuration page, then M to change the modem to \"UP9600/EZ232\", then B to set the baud speed to \"9600\". Save the config with the S key. Access the Phonebook with A key from the same configuration page, save some BBS addresses from here Enjoy the faster BBS experience.","title":"Serial connection on C64"},{"location":"advanced/computer/#serial-connection-on-color-computer-3-coco3","text":"The following is an example for connecting to a BBS using UltimaTerm 4.0: Start the CoCo3 core (use Multi-pak Slot 4 Disk or Slot 2 CoCoSDC) In the MiSTer System Menu Win + F12 set the \"Uart Connection\" to \"Modem\", Link to \"TCP\", Baud to \"9600\" and save it. Mount UltimaTerm DSK file, obtainable HERE Load UltimaTerm by issuing: LOADM\"ULTIMATE Hit Alt + O to open Options Menu, then M for Modem options. Use B to modify the baud rate ( Left or Right arrows to change values) to 9600. The rest of the settings should be default (word length 8, parity none, stop bits 1, duplex full, terminal type ANSI). Save your changes with Alt + D then F1 key. Hit Alt + A to open Phonebook, add a BBS and dial away. Alternatively, you can dial directly by issuing an ATDTBBS_Address:port . Full UltimaTerm 4.0 Documentation HERE","title":"Serial connection on Color Computer 3 (CoCo3)"},{"location":"advanced/console/","text":"The DE10-nano board has console port. The console allows you to login into Linux without a network connection and also provides some debug/info which sometimes useful to track the problems. Refer to the UART-to-USB (USB Mini-B) connector on the board right side in the picture below: Connect with Windows Connect the DE10-nano board to a PC using the UART-to-USB (USB mini type B) connector next to micro-USB. The PC will recognize it as virtual COM port. Use any console application to connect to this COM port. I recommend Putty . Verify that COM port settings are correct: Speed (baud rate) - 115200 bits per second Data bits - 8 Stop bits - 1 Parity - none Flow control - none Here's a quick video for connections on Windows: Linux Connections Be sure to be a member of the dialout group. Your serial port is likely to be /dev/ttyUSB0 Configure it: $ stty -F /dev/ttyUSB0 115200 cs8 -cstopb -parenb -ixoff -ixon Look at the output while dumping it to a file: cat /dev/ttyUSB0 | tee mr.log Now mr.log has a copy of all the information shown in the screen. U-Boot command prompt To interrupt u-boot and get into the u-boot command prompt once connected to the DE10-Nano, hold 'ESC' on the PC and then power on or reboot the Nano (using the reset button). Startup should be interrupted and you should see a '=>' prompt. Here you can edit the kernel boot options etc.","title":"Console Connection"},{"location":"advanced/console/#connect-with-windows","text":"Connect the DE10-nano board to a PC using the UART-to-USB (USB mini type B) connector next to micro-USB. The PC will recognize it as virtual COM port. Use any console application to connect to this COM port. I recommend Putty . Verify that COM port settings are correct: Speed (baud rate) - 115200 bits per second Data bits - 8 Stop bits - 1 Parity - none Flow control - none Here's a quick video for connections on Windows:","title":"Connect with Windows"},{"location":"advanced/console/#linux-connections","text":"Be sure to be a member of the dialout group. Your serial port is likely to be /dev/ttyUSB0 Configure it: $ stty -F /dev/ttyUSB0 115200 cs8 -cstopb -parenb -ixoff -ixon Look at the output while dumping it to a file: cat /dev/ttyUSB0 | tee mr.log Now mr.log has a copy of all the information shown in the screen.","title":"Linux Connections"},{"location":"advanced/console/#u-boot-command-prompt","text":"To interrupt u-boot and get into the u-boot command prompt once connected to the DE10-Nano, hold 'ESC' on the PC and then power on or reboot the Nano (using the reset button). Startup should be interrupted and you should see a '=>' prompt. Here you can edit the kernel boot options etc.","title":"U-Boot command prompt"},{"location":"advanced/crt/","text":"There are a few different ways you can use your MiSTer with a classic CRT display. The two main methods are either using the VGA port on the Analog IO board or using a specific Direct Video HDMI to VGA adapter. Configuration Table Here's a table that shows you what options correlate to what video connection, to make it a bit easier to decide what you need in order to connect to your CRT, and what settings are required in the MiSTer.ini to get it to work. Analog Video Out Ini: CSYNC Ini: YPbPr SoG Switch VGA Scaler Forced Scandoubler RGBS Native 1 0 AUTO 0 0 RGBS Scan-doubled\u00b9 1 0 AUTO 0 1 RGBS Upscaled\u00b2 1 0 AUTO 1 0 RGBS Direct\u00b3 1 0 N/A 0 0 RGBHV Native 0 0 AUTO 0 0 RGBHV Scan-doubled 0 0 AUTO 0 1 RGBHV Upscaled\u00b2 0 0 AUTO 1 0 RGBHV Direct\u00b3 0 0 N/A 0 0 YPbPr Native 0 1 OVR 0 0 YPbPr Scan-doubled 0 1 OVR 0 1 YPbPr Upscaled\u00b2 0 1 OVR 1 0 YPbPr Direct\u00b3\u2074 0 1 N/A 0 0 S-Video\u2075 1 0 N/A 0 0 Composite\u2075 1 0 N/A 0 0 \u00b9 Scan-doubled = 2x resolution (e.g. 240p > 480p) \u00b2 Upscaled resolution = video_mode \u00b3 External \"direct video\" (HDMI to VGA) adapter required - native resolution only (no upscaling or scan-doubling \u2074 External \"direct video\" adapter requires modification to pass Sync on Green (SoG) \u2075 External RGB to NTSC/PAL converter required Credit: Porkchop Express For more detailed information than this table provides, read on below. MiSTer CRT Connectivity Options most of this content is from the guide written by MikeS11 and ArchiveRL on the MiSTer FPGA GitHub Wiki Boards / Converters You can connect MiSTer natively to a CRT set using two methods: either by installing the analogue I/O board and using its VGA output or by connecting an HDMI-to-VGA DAC dongle directly to DE10 Nano's HDMI socket. Both of these methods produce nearly identical image which in most cases should match the output of the original hardware 1:1. Apart from that, they also have their specific pros & cons: Analogue I/O board Pros: extra features (buttons, led lights, etc), doesn't need SoG mod to connect to component Cons: more expensive, lesser colour depth in some cores, can't use 2xSDRAM Direct Video Pros: better colour depth, much cheaper Cons: no extra features, needs extra modification for component, not all the dongles are guaranteed to work Once you have acquired either an I/O board or a Direct video adapter, you will need to connect it to your TV via a cable and also change some settings in the mister.ini file. Cables for consumer TVs (15kHz) with RGB SCART (via both I/O board & Direct Video) - Apart from I/O board or Direct Video dongle you'll also need a special cable. You can either make one or buy it online. It's recommended to get a cable with a 470 ohm resistor on the Composite Sync line (best ask the seller if it already has one) Here are some possible sources: Misteraddons (US) , Retro Access (UK) , Ultimatemister (PT) , Wolfsoft (DE) , Antoniovillena (ES) . You can also get a MiST cable, it works in general but might be lacking the 470 Ohm resistor and is generally \"not guaranteed\": Lotharek (PL) , Amigastore (EU) . Another option is to use a VGA-SCART converter, plus normal SCART/VGA cables. Possible sources: Antoniovillena (SP) , Arcadeforge (DE) , Retro Upgrades (UK) . If you are connecting to a consumer Trinitron you might also need to add an extra resistor/potentiometer to fix odd or not lively enough colours forum link . consumer TVs (15kHz) with YPbPr component (via I/O board) - A standard VGA to Component cable should be enough. consumer TVs (15kHz) with YPbPr component (via Direct Video) - This will require cable modifications to add Sync on Green (SoG). Please read more here --> Direct Video - Setup for YPbPr Signals or see what others have to say in the forum here --> Direct Video HDMI to Component CRT 480i TV by thorr . VGA monitors (31Khz) - A standard VGA cable should be enough. PVM/BVM monitors (via I/O board) - A standard VGA to BNC cable (3xRGB + HSync) cable should be ok. PVM/BVM monitors (via Direct Video) - A standard VGA to BNC cable (3xRGB + HSync) cable should be ok. Commodore monitors - A cable for the 1084S monitor is sold by Ultimatemister (PT) . Settings Most of the settings changes are done in your MiSTer.ini file, which is located in the media/fat/ directory of your SD card. When editing this file, it is advised to backup your currently working MiSTer.ini file and then use a new MiSTer.ini from the official repository by Right Clicking this link and clicking \"save file as\" . All of the MiSTer.ini settings in this section assume you are using this default file. For I/O BOARD** consumer TVs (15kHz) with RGB SCART composite_sync=1 consumer TVs (15kHz) with Component ypbpr=1 You might need to flip the SoG switch on the I/O board VGA monitors (31khz) forced_scandoubler=1 For DIRECT VIDEO** consumer TVs (15kHz) with RGB SCART direct_video=1 composite_sync=1 consumer TVs (15kHz) with Component direct_video=1 composite_sync=1 ypbpr=1 VGA monitors (31khz) direct_video=1 forced_scandoubler=1 for PVM/BVM monitors direct_video=1 composite_sync=1 Connecting to Composite or S-Video One method of obtaining Composite or S-Video on a capable CRT TV set is by using a special adapter. At the moment these are available for sale from Antoniovillena and Ultimatemister (PT) . There's also an open-source design which you can DIY: Github / forum link . These adapters have been reported to work well in S-Video mode, but Composite has problems with rainbow artifacting and excessive dot crawl. This is currently unavoidable and expected Another alternative is the Axunworks converter . It requires using a VGA-to-BNC cable with BNC-to-RCA adapters and most likely also suffers from artifacting in Composite (forum thread) . Unofficial Custom YC (S-Video / Composite) Cores by MikeS11 These requirements are for a set of unofficial cores (currently in testing) that natively output s-video / composite directly from the core. The current cores generate two signals that use the existing RGB pins, where the luma (Brightness) uses the green output and the chroma (Color) uses the red output. Please do not report any bugs from using these cores in the official repositories, they are unofficial and in a testing state. It is possible that bugs could be induced by the changes made to the core. Connection Requirements - S-Video A custom breakout board / cable the converts VGA to S-Video. VGA to Component Cable (Only required for some monitors, i.e Commodore 1702) Custom RCA to S-Video Connector Connection Requirements - Composite A custom breakout board / cable the converts VGA to Composite VGA to Component Cable to a 1-Male to 2-Female RCA Y-Adapter Splitter Cable Note 1: It is recommended that you use a 0.47nF Capacitor in series with the Chroma signal. This will reduce the output voltage of your composite signal. Note 2: If using composite, it is recommended to use a breakout board with a luma trap that will filter out frequencies that confuse the tv from thinking brightness changes are color. (E.g Color Bleed & Rainbow Artifacting) Using the Analog IO Board with the YC Test Cores Configuration Requirements Sync on Green - ON Enable S-Video in the core menu INI Settings vga_scaler=0 Using a Direct Video adapter with the YC Test Cores Configuration Requirements A Sync On Green Circuit is Required. Please read more here: Direct Video - Setup for YPbPr Signals Enable S-Video in the core menu INI Settings YPbPr = 0 Direct_video = 1 Composite sync = 1 vga_scaler=0 More info & updates: Twitter / S-Video Chroma Generation Document YC Core Clock Frequency List / Forum Post: S-Video and Composite over Component output! (custom cores) Types of CRT Displays There are three main categories of CRTs; Consumer Televisions, Computer Monitors, and Professional Video Monitors. Some of these overlap with compatibility, but often the signals intended for one type of CRT are not ideal on another type of display. There are also different subcategories of each of these that are not very important to go into here. Generally speaking, using a CRT with the MiSTer is not a one-size-fits-all experience. Consumer Televisions Typically these are only compatible with a 15kHz frequency signal (the kind of signal video game consoles used). They were intended to be used with what is known as a \"240p\" analog signal. From the 1950's up until the late 1980's most consumer televisions only used RF video which is highly susceptible to interference, especially today. Later they began to use composite video (which is still very noisy, but less prone to interference than RF video). Some TV's would occasionally have support for S-Video (a much sharper and nicer image quality and resistant to interference), but it is less common. In many European countries these TVs also supported RGB video by way of SCART connectors (which is about as good as it gets). Finally, near the end of the life of CRT televisions in the late 90's and early 2000's they began to use Component video and even HDMI video . Most CRT televisions that you can buy used today (in the United States) are going to use composite video or component video. In europe it is more common, but still not a guarantee, to find CRT televisions with RGB SCART support used for sale. Computer Monitors Usually computer monitors were designed for higher resolution 31kHz frequency signals. They often had support only for a VGA connector , with some very few having some other options like DVI connectors . Since these displays were made for higher resolutions there can be some jitter or undesirable effects when attempting to run a lower resolution 240p signal through them, even if it is scandoubled to 31kHz. Computer Monitors are excellent at handling retro computer video signals as that is what they were designed for. There are also Multisync Monitors which are capable of natively handling 15kHz (240p) analog signals. These are less common but are highly sought after by the CRT enthusiast community, so if you are interested in having one monitor to handle all types of signals, consider acquiring a Multisync monitor. Professional Video Monitors Professional Video Monitors (PVMs) also go by many other names; Broadcast reference monitor, Broadcast video monitor (BVM) , Medical Grade Monitor, and more. Simply put, these are displays designed for professional use that often are easy to do maintenance on, have high quality components, and were very costly for their time. Professional video monitors are still made today, but they are often OLED or LCD that are very expensive and only used in niche applications for businesses. These had a wide variety of connectivity that includes all of the previous mentioned connectors sometimes, and also had specialty connectors like BNC connectors where the Red, Green, Blue, and sync signals were made into separate connectors. There are also BNC video cable configurations that require a fifth sync-on-green cable. The benefit of purchasing a used professional video monitor CRT for use with retro hardware is that they have very high quality designs that have more lines displayed (crisper image), better colors, or superior display technology to that of consumer television CRTs overall. Additionally, they were often designed to be more easily serviceable and had better shielding against electromagnetic interference. Since around the mid 80's the majority of them seem to have supported native RGB input as well, so the video quality from your output source can be far superior, in theory. PVM's also typically allow for very granular control of the image through many control dials and buttons on the front. Many PVMs also support simultaneous output to mirror the image on one display to another. Finally, a good number of PVMs are also MultiSync, meaning they can support both 15kHz and 31kHz signals, and many of them also are region agnostic supporting 50hz PAL signals and 60hz NTSC signals. Unfortunately, PVMs are incredibly expensive today, so if you don't already have one, it may be very difficult to get one now. It is not uncommon to see a mere 9\" PVM selling for over $200 US Dollars with the 19\" to 24\" displays going anywhere from $500 to over $2000 US Dollars depending on the model's popularity and features.","title":"Using Your CRT With MiSTer"},{"location":"advanced/crt/#configuration-table","text":"Here's a table that shows you what options correlate to what video connection, to make it a bit easier to decide what you need in order to connect to your CRT, and what settings are required in the MiSTer.ini to get it to work. Analog Video Out Ini: CSYNC Ini: YPbPr SoG Switch VGA Scaler Forced Scandoubler RGBS Native 1 0 AUTO 0 0 RGBS Scan-doubled\u00b9 1 0 AUTO 0 1 RGBS Upscaled\u00b2 1 0 AUTO 1 0 RGBS Direct\u00b3 1 0 N/A 0 0 RGBHV Native 0 0 AUTO 0 0 RGBHV Scan-doubled 0 0 AUTO 0 1 RGBHV Upscaled\u00b2 0 0 AUTO 1 0 RGBHV Direct\u00b3 0 0 N/A 0 0 YPbPr Native 0 1 OVR 0 0 YPbPr Scan-doubled 0 1 OVR 0 1 YPbPr Upscaled\u00b2 0 1 OVR 1 0 YPbPr Direct\u00b3\u2074 0 1 N/A 0 0 S-Video\u2075 1 0 N/A 0 0 Composite\u2075 1 0 N/A 0 0 \u00b9 Scan-doubled = 2x resolution (e.g. 240p > 480p) \u00b2 Upscaled resolution = video_mode \u00b3 External \"direct video\" (HDMI to VGA) adapter required - native resolution only (no upscaling or scan-doubling \u2074 External \"direct video\" adapter requires modification to pass Sync on Green (SoG) \u2075 External RGB to NTSC/PAL converter required Credit: Porkchop Express For more detailed information than this table provides, read on below.","title":"Configuration Table"},{"location":"advanced/crt/#mister-crt-connectivity-options","text":"most of this content is from the guide written by MikeS11 and ArchiveRL on the MiSTer FPGA GitHub Wiki","title":"MiSTer CRT Connectivity Options"},{"location":"advanced/crt/#boards-converters","text":"You can connect MiSTer natively to a CRT set using two methods: either by installing the analogue I/O board and using its VGA output or by connecting an HDMI-to-VGA DAC dongle directly to DE10 Nano's HDMI socket. Both of these methods produce nearly identical image which in most cases should match the output of the original hardware 1:1. Apart from that, they also have their specific pros & cons: Analogue I/O board Pros: extra features (buttons, led lights, etc), doesn't need SoG mod to connect to component Cons: more expensive, lesser colour depth in some cores, can't use 2xSDRAM Direct Video Pros: better colour depth, much cheaper Cons: no extra features, needs extra modification for component, not all the dongles are guaranteed to work Once you have acquired either an I/O board or a Direct video adapter, you will need to connect it to your TV via a cable and also change some settings in the mister.ini file.","title":"Boards / Converters"},{"location":"advanced/crt/#cables","text":"for consumer TVs (15kHz) with RGB SCART (via both I/O board & Direct Video) - Apart from I/O board or Direct Video dongle you'll also need a special cable. You can either make one or buy it online. It's recommended to get a cable with a 470 ohm resistor on the Composite Sync line (best ask the seller if it already has one) Here are some possible sources: Misteraddons (US) , Retro Access (UK) , Ultimatemister (PT) , Wolfsoft (DE) , Antoniovillena (ES) . You can also get a MiST cable, it works in general but might be lacking the 470 Ohm resistor and is generally \"not guaranteed\": Lotharek (PL) , Amigastore (EU) . Another option is to use a VGA-SCART converter, plus normal SCART/VGA cables. Possible sources: Antoniovillena (SP) , Arcadeforge (DE) , Retro Upgrades (UK) . If you are connecting to a consumer Trinitron you might also need to add an extra resistor/potentiometer to fix odd or not lively enough colours forum link . consumer TVs (15kHz) with YPbPr component (via I/O board) - A standard VGA to Component cable should be enough. consumer TVs (15kHz) with YPbPr component (via Direct Video) - This will require cable modifications to add Sync on Green (SoG). Please read more here --> Direct Video - Setup for YPbPr Signals or see what others have to say in the forum here --> Direct Video HDMI to Component CRT 480i TV by thorr . VGA monitors (31Khz) - A standard VGA cable should be enough. PVM/BVM monitors (via I/O board) - A standard VGA to BNC cable (3xRGB + HSync) cable should be ok. PVM/BVM monitors (via Direct Video) - A standard VGA to BNC cable (3xRGB + HSync) cable should be ok. Commodore monitors - A cable for the 1084S monitor is sold by Ultimatemister (PT) .","title":"Cables"},{"location":"advanced/crt/#settings","text":"Most of the settings changes are done in your MiSTer.ini file, which is located in the media/fat/ directory of your SD card. When editing this file, it is advised to backup your currently working MiSTer.ini file and then use a new MiSTer.ini from the official repository by Right Clicking this link and clicking \"save file as\" . All of the MiSTer.ini settings in this section assume you are using this default file.","title":"Settings"},{"location":"advanced/crt/#for-io-board","text":"consumer TVs (15kHz) with RGB SCART composite_sync=1 consumer TVs (15kHz) with Component ypbpr=1 You might need to flip the SoG switch on the I/O board VGA monitors (31khz) forced_scandoubler=1","title":"For I/O BOARD**"},{"location":"advanced/crt/#for-direct-video","text":"consumer TVs (15kHz) with RGB SCART direct_video=1 composite_sync=1 consumer TVs (15kHz) with Component direct_video=1 composite_sync=1 ypbpr=1 VGA monitors (31khz) direct_video=1 forced_scandoubler=1 for PVM/BVM monitors direct_video=1 composite_sync=1","title":"For DIRECT VIDEO**"},{"location":"advanced/crt/#connecting-to-composite-or-s-video","text":"One method of obtaining Composite or S-Video on a capable CRT TV set is by using a special adapter. At the moment these are available for sale from Antoniovillena and Ultimatemister (PT) . There's also an open-source design which you can DIY: Github / forum link . These adapters have been reported to work well in S-Video mode, but Composite has problems with rainbow artifacting and excessive dot crawl. This is currently unavoidable and expected Another alternative is the Axunworks converter . It requires using a VGA-to-BNC cable with BNC-to-RCA adapters and most likely also suffers from artifacting in Composite (forum thread) .","title":"Connecting to Composite or S-Video"},{"location":"advanced/crt/#unofficial-custom-yc-s-video-composite-cores-by-mikes11","text":"These requirements are for a set of unofficial cores (currently in testing) that natively output s-video / composite directly from the core. The current cores generate two signals that use the existing RGB pins, where the luma (Brightness) uses the green output and the chroma (Color) uses the red output. Please do not report any bugs from using these cores in the official repositories, they are unofficial and in a testing state. It is possible that bugs could be induced by the changes made to the core.","title":"Unofficial Custom YC (S-Video / Composite) Cores by MikeS11"},{"location":"advanced/crt/#connection-requirements-s-video","text":"A custom breakout board / cable the converts VGA to S-Video. VGA to Component Cable (Only required for some monitors, i.e Commodore 1702) Custom RCA to S-Video Connector","title":"Connection Requirements - S-Video"},{"location":"advanced/crt/#connection-requirements-composite","text":"A custom breakout board / cable the converts VGA to Composite VGA to Component Cable to a 1-Male to 2-Female RCA Y-Adapter Splitter Cable Note 1: It is recommended that you use a 0.47nF Capacitor in series with the Chroma signal. This will reduce the output voltage of your composite signal. Note 2: If using composite, it is recommended to use a breakout board with a luma trap that will filter out frequencies that confuse the tv from thinking brightness changes are color. (E.g Color Bleed & Rainbow Artifacting)","title":"Connection Requirements - Composite"},{"location":"advanced/crt/#using-the-analog-io-board-with-the-yc-test-cores","text":"","title":"Using the Analog IO Board with the YC Test Cores"},{"location":"advanced/crt/#configuration-requirements","text":"Sync on Green - ON Enable S-Video in the core menu","title":"Configuration Requirements"},{"location":"advanced/crt/#ini-settings","text":"vga_scaler=0","title":"INI Settings"},{"location":"advanced/crt/#using-a-direct-video-adapter-with-the-yc-test-cores","text":"","title":"Using a Direct Video adapter with the YC Test Cores"},{"location":"advanced/crt/#configuration-requirements_1","text":"A Sync On Green Circuit is Required. Please read more here: Direct Video - Setup for YPbPr Signals Enable S-Video in the core menu","title":"Configuration Requirements"},{"location":"advanced/crt/#ini-settings_1","text":"YPbPr = 0 Direct_video = 1 Composite sync = 1 vga_scaler=0 More info & updates: Twitter / S-Video Chroma Generation Document YC Core Clock Frequency List / Forum Post: S-Video and Composite over Component output! (custom cores)","title":"INI Settings"},{"location":"advanced/crt/#types-of-crt-displays","text":"There are three main categories of CRTs; Consumer Televisions, Computer Monitors, and Professional Video Monitors. Some of these overlap with compatibility, but often the signals intended for one type of CRT are not ideal on another type of display. There are also different subcategories of each of these that are not very important to go into here. Generally speaking, using a CRT with the MiSTer is not a one-size-fits-all experience.","title":"Types of CRT Displays"},{"location":"advanced/crt/#consumer-televisions","text":"Typically these are only compatible with a 15kHz frequency signal (the kind of signal video game consoles used). They were intended to be used with what is known as a \"240p\" analog signal. From the 1950's up until the late 1980's most consumer televisions only used RF video which is highly susceptible to interference, especially today. Later they began to use composite video (which is still very noisy, but less prone to interference than RF video). Some TV's would occasionally have support for S-Video (a much sharper and nicer image quality and resistant to interference), but it is less common. In many European countries these TVs also supported RGB video by way of SCART connectors (which is about as good as it gets). Finally, near the end of the life of CRT televisions in the late 90's and early 2000's they began to use Component video and even HDMI video . Most CRT televisions that you can buy used today (in the United States) are going to use composite video or component video. In europe it is more common, but still not a guarantee, to find CRT televisions with RGB SCART support used for sale.","title":"Consumer Televisions"},{"location":"advanced/crt/#computer-monitors","text":"Usually computer monitors were designed for higher resolution 31kHz frequency signals. They often had support only for a VGA connector , with some very few having some other options like DVI connectors . Since these displays were made for higher resolutions there can be some jitter or undesirable effects when attempting to run a lower resolution 240p signal through them, even if it is scandoubled to 31kHz. Computer Monitors are excellent at handling retro computer video signals as that is what they were designed for. There are also Multisync Monitors which are capable of natively handling 15kHz (240p) analog signals. These are less common but are highly sought after by the CRT enthusiast community, so if you are interested in having one monitor to handle all types of signals, consider acquiring a Multisync monitor.","title":"Computer Monitors"},{"location":"advanced/crt/#professional-video-monitors","text":"Professional Video Monitors (PVMs) also go by many other names; Broadcast reference monitor, Broadcast video monitor (BVM) , Medical Grade Monitor, and more. Simply put, these are displays designed for professional use that often are easy to do maintenance on, have high quality components, and were very costly for their time. Professional video monitors are still made today, but they are often OLED or LCD that are very expensive and only used in niche applications for businesses. These had a wide variety of connectivity that includes all of the previous mentioned connectors sometimes, and also had specialty connectors like BNC connectors where the Red, Green, Blue, and sync signals were made into separate connectors. There are also BNC video cable configurations that require a fifth sync-on-green cable. The benefit of purchasing a used professional video monitor CRT for use with retro hardware is that they have very high quality designs that have more lines displayed (crisper image), better colors, or superior display technology to that of consumer television CRTs overall. Additionally, they were often designed to be more easily serviceable and had better shielding against electromagnetic interference. Since around the mid 80's the majority of them seem to have supported native RGB input as well, so the video quality from your output source can be far superior, in theory. PVM's also typically allow for very granular control of the image through many control dials and buttons on the front. Many PVMs also support simultaneous output to mirror the image on one display to another. Finally, a good number of PVMs are also MultiSync, meaning they can support both 15kHz and 31kHz signals, and many of them also are region agnostic supporting 50hz PAL signals and 60hz NTSC signals. Unfortunately, PVMs are incredibly expensive today, so if you don't already have one, it may be very difficult to get one now. It is not uncommon to see a mere 9\" PVM selling for over $200 US Dollars with the 19\" to 24\" displays going anywhere from $500 to over $2000 US Dollars depending on the model's popularity and features.","title":"Professional Video Monitors"},{"location":"advanced/directvideo/","text":"Direct Video Since autumn of 2019 there is a method for outputting analog video called Direct Video that doesn't require you to install the IO Board in your MiSTer. This new method offers same minimal latency to the VGA port from the IO Board and even better color depth in some cores. To enjoy it, you just need to activate the feature in your mister.ini file and attach a DAC to your HDMI port. You may use an HDMI-to-VGA converter similar to this one. NOTE : as of 2021/06/27 it seems very hard to find devices which are compatible with VGA to SCART adapters. Devices which work with VGA are still easy to find. More info here: https://github.com/MiSTer-devel/Main_MiSTer/issues/410 Compatibility Direct Video is compatible with most current cores and will be supported in all future cores coming to MiSTer. RGBs, RGsB and YPbPr are supported, although YPbPr has less display compatibility in Direct Video mode compared to YPbPr from the IO Board. Note that output resolution and format can vary from core to core. See the analog video configuration table for more information. How to Use First you need a simple DAC with VGA output. Those based on the chip AG6200/AG6201 (like the one in the picture) are proven to work fine and are fairly inexpensive and easy to find. Also many of them output analog audio too. The only thing we recommend is to not hotplug them or pull them out from your MiSTer while it is still ON , since you might damage your HDMI port in the process. Then you need to add the following line to your mister.ini file: direct_video=1 This activates the Direct Video feature when the system starts. Once it's enabled, it allows your HDMI port to output the raw and unprocessed digital audio/video signal from the loaded core, which is consumed by your DAC. MiSTer will not work with your HD TV or monitor while this mode is enabled, since they require a standard HDMI signal to work, and the zero-lag Direct Video signal IS NOT standard HDMI. The resulting analog video signal from your DAC should be compatible with standard CRTs if the core loaded supports standard CRT refresh frequencies (see analog video compatibility for more details). But there is still a bit of additional configuration you need to do depending on which kind of analog video signal you want to use. Setup for RGB signals For analog RGB output, you'll want to enable composite sync on the HSync signal in your mister.ini ( composite_sync=1 ). After that, you are good to plug in an RGB-compatible VGA-SCART cable to your TV. For optimal results, Retro Access sells SCART and BNC cables specifically for use with MiSTer. DISCLAIMER: Please be aware that many VGA DACs may output a sync signal at 3 volts or more on pin 13 (HSYNC/CSYNC) even when being used in Direct Video mode! You will need a 470 ohm resistor on the corresponding SCART sync pin to attenuate this signal to levels that are safe for all video equipment. A variety of professional video equipment can have wide tolerances for higher voltage sync signals but other devices, especially external scalers like the OSSC or XRGB Mini Framemeister, can be worn out and reduced to a non-working state by repeated use with higher-voltage sync signals. Unless you are 100% certain your equipment can tolerate higher voltage signals, it is strongly recommended that you either purchase a cable that has a 470 ohm resistor inline or add one yourself. Retro Access MiSTer SCART cables, for example, come with a resistor inline by default. Setup for YPbPr signals YPbPr - also known as Component Video - is available in Direct Video mode but has limited compatibility. This is due to limitations of HDMI-to-VGA DACs, which were not meant to produce signals in the YPbPr color space in the first place, resulting in signals that are slightly out-of-spec. It is possible that your display will accept the Direct Video YPbPr signal with no issue, but it may also appear bright pink due to the way many displays process such signals . For higher YPbPr compatibility you may prefer RGB mode with an external RGB-to-YPbPr transcoder instead, or YPbPr via the IO Board. To use YPbPr in Direct Video mode, you'll need to enable composite_sync and ypbpr in your mister.ini file. You'll also need to add a sync-on-green circuit on your VGA connection. Sync-on-green circuits can be very simple; you just need a diode (1N4148) and a 330ohm resistor (any values between 270ohm and 390ohm are advised, too high and the sync signal is too weak, too low and it's too strong). Connection: from HSync -> anode of diode, cathode of diode -> resistor, resistor to Green signal. Doubling frequency This is a handy way to use those modern monitors that have VGA input but are typically not compatible with 15KHz signals, and require 31KHz analog video. In case you need it, you just have to set forced_scandoubler=1 in your mister.ini to turn a 15KHz signal into a 31Khz one (See which cores output 15KHz video here ). Color Depth Direct Video produces a 24bit color signal, which is superior to the 18bit signal coming from the IO Board. However, few cores use 24bit color, so the improved color depth may not make much of an impact depending on the cores you run. Also, most cheap DACs, like the ones based on the chip AG6200, don't produce Full Range RGB. They instead produce Limited Range RGB (16-235) or much more commonly a nonspec Limited Range variant (16-255). In order to compensate for this, you may want to configure the hdmi_limited option in your mister.ini to adjust the signal being sent to your DAC. Full Range (0-255): hdmi_limited=0 . Limited Range (16-235): hdmi_limited=1 . Limited Range common DAC variant (16-255): hdmi_limited=2 .","title":"Direct Video Adapter"},{"location":"advanced/directvideo/#direct-video","text":"Since autumn of 2019 there is a method for outputting analog video called Direct Video that doesn't require you to install the IO Board in your MiSTer. This new method offers same minimal latency to the VGA port from the IO Board and even better color depth in some cores. To enjoy it, you just need to activate the feature in your mister.ini file and attach a DAC to your HDMI port. You may use an HDMI-to-VGA converter similar to this one. NOTE : as of 2021/06/27 it seems very hard to find devices which are compatible with VGA to SCART adapters. Devices which work with VGA are still easy to find. More info here: https://github.com/MiSTer-devel/Main_MiSTer/issues/410","title":"Direct Video"},{"location":"advanced/directvideo/#compatibility","text":"Direct Video is compatible with most current cores and will be supported in all future cores coming to MiSTer. RGBs, RGsB and YPbPr are supported, although YPbPr has less display compatibility in Direct Video mode compared to YPbPr from the IO Board. Note that output resolution and format can vary from core to core. See the analog video configuration table for more information.","title":"Compatibility"},{"location":"advanced/directvideo/#how-to-use","text":"First you need a simple DAC with VGA output. Those based on the chip AG6200/AG6201 (like the one in the picture) are proven to work fine and are fairly inexpensive and easy to find. Also many of them output analog audio too. The only thing we recommend is to not hotplug them or pull them out from your MiSTer while it is still ON , since you might damage your HDMI port in the process. Then you need to add the following line to your mister.ini file: direct_video=1 This activates the Direct Video feature when the system starts. Once it's enabled, it allows your HDMI port to output the raw and unprocessed digital audio/video signal from the loaded core, which is consumed by your DAC. MiSTer will not work with your HD TV or monitor while this mode is enabled, since they require a standard HDMI signal to work, and the zero-lag Direct Video signal IS NOT standard HDMI. The resulting analog video signal from your DAC should be compatible with standard CRTs if the core loaded supports standard CRT refresh frequencies (see analog video compatibility for more details). But there is still a bit of additional configuration you need to do depending on which kind of analog video signal you want to use.","title":"How to Use"},{"location":"advanced/directvideo/#setup-for-rgb-signals","text":"For analog RGB output, you'll want to enable composite sync on the HSync signal in your mister.ini ( composite_sync=1 ). After that, you are good to plug in an RGB-compatible VGA-SCART cable to your TV. For optimal results, Retro Access sells SCART and BNC cables specifically for use with MiSTer. DISCLAIMER: Please be aware that many VGA DACs may output a sync signal at 3 volts or more on pin 13 (HSYNC/CSYNC) even when being used in Direct Video mode! You will need a 470 ohm resistor on the corresponding SCART sync pin to attenuate this signal to levels that are safe for all video equipment. A variety of professional video equipment can have wide tolerances for higher voltage sync signals but other devices, especially external scalers like the OSSC or XRGB Mini Framemeister, can be worn out and reduced to a non-working state by repeated use with higher-voltage sync signals. Unless you are 100% certain your equipment can tolerate higher voltage signals, it is strongly recommended that you either purchase a cable that has a 470 ohm resistor inline or add one yourself. Retro Access MiSTer SCART cables, for example, come with a resistor inline by default.","title":"Setup for RGB signals"},{"location":"advanced/directvideo/#setup-for-ypbpr-signals","text":"YPbPr - also known as Component Video - is available in Direct Video mode but has limited compatibility. This is due to limitations of HDMI-to-VGA DACs, which were not meant to produce signals in the YPbPr color space in the first place, resulting in signals that are slightly out-of-spec. It is possible that your display will accept the Direct Video YPbPr signal with no issue, but it may also appear bright pink due to the way many displays process such signals . For higher YPbPr compatibility you may prefer RGB mode with an external RGB-to-YPbPr transcoder instead, or YPbPr via the IO Board. To use YPbPr in Direct Video mode, you'll need to enable composite_sync and ypbpr in your mister.ini file. You'll also need to add a sync-on-green circuit on your VGA connection. Sync-on-green circuits can be very simple; you just need a diode (1N4148) and a 330ohm resistor (any values between 270ohm and 390ohm are advised, too high and the sync signal is too weak, too low and it's too strong). Connection: from HSync -> anode of diode, cathode of diode -> resistor, resistor to Green signal.","title":"Setup for YPbPr signals"},{"location":"advanced/directvideo/#doubling-frequency","text":"This is a handy way to use those modern monitors that have VGA input but are typically not compatible with 15KHz signals, and require 31KHz analog video. In case you need it, you just have to set forced_scandoubler=1 in your mister.ini to turn a 15KHz signal into a 31Khz one (See which cores output 15KHz video here ).","title":"Doubling frequency"},{"location":"advanced/directvideo/#color-depth","text":"Direct Video produces a 24bit color signal, which is superior to the 18bit signal coming from the IO Board. However, few cores use 24bit color, so the improved color depth may not make much of an impact depending on the cores you run. Also, most cheap DACs, like the ones based on the chip AG6200, don't produce Full Range RGB. They instead produce Limited Range RGB (16-235) or much more commonly a nonspec Limited Range variant (16-255). In order to compensate for this, you may want to configure the hdmi_limited option in your mister.ini to adjust the signal being sent to your DAC. Full Range (0-255): hdmi_limited=0 . Limited Range (16-235): hdmi_limited=1 . Limited Range common DAC variant (16-255): hdmi_limited=2 .","title":"Color Depth"},{"location":"advanced/diy2parcade/","text":"by Sorgelig You have assembled an arcade cabinet and looking for connecting your joysticks and buttons? You don't need to buy any of those expensive adapters. All you need is USB keyboard which you can disassemble. After disassembling the keyboard you need to find the row and column contacts on board for following keys: 5, 1P coin 1, 1P start (shift key) UP, 1P up DOWN, 1P down LEFT, 1P left RIGHT, 1P right LEFTCTRL, 1P button 1 LEFTALT, 1P button 2 SPACE, 1P button 3 LEFTSHIFT, 1P button 4 Z, 1P button 5 X, 1P button 6 C, 1P button 7 V, 1P button 8 6, 2P coin 2, 2P start R, 2P up F, 2P down D, 2P left G, 2P right A, 2P button 1 S, 2P button 2 Q, 2P button 3 W, 2P button 4 I, 2P button 5 K, 2P button 6 J, 2P button 7 L, 2P button 8 9, Test TAB, Tab (shift + 1P right) ENTER, Enter (shift + 1P left) P, P (pause) (shift + 1P down) F1, Service F2, Test F3, Tilt You can use multi-meter to find the contacts. Then connect your buttons/joystick to board according to table above. Your hardware part is done. Connect your modded arcade keyboard to USB and start Menu core, then go to Define Joystick buttons . Press any button, and you will see \"Keyboard ID: XXXX:YYYY\" where XXXX:YYYY is HW identifier of the keyboard. Press ESC to ext from this dialog. Now open MiSTer.ini and add following options there: jamma_vid=XXXX jamma_pid=YYYY XXXX and YYYY are those IDs you saw for your modded keyboard. Save and restart Menu core. Go to Define Joystick buttons again and assign buttons using P1 buttons. Note it now writes \"Joystick ID: XXXX:YYYY\" (instead of Keyboard) which means it recognizes your modded keyboard as jamma 2-player input device. P2 buttons will be automatically assigned the same as for P1. Now your Arcade input device is ready to use. Unlike normal gamepads/joysticks, this device will always assign P1 and P2 inputs statically regardless P1 or P2 button was pressed first.","title":"DIY 2-Player Arcade"},{"location":"advanced/ini/","text":"The MiSTer.ini configuration file contains global settings and is capable of storing core-specific settings for the MiSTer. We'll go over each of the Global settings here and then show you how to make exceptions for those global settings for each core. Then we'll describe some core-specific settings that can be used for core exceptions only. General Video Settings vscale_mode - Changes how the image is scaled to the screen. 0 will fit the whole image to screen, 1 is 1:1 integer scaled, 2 uses 0.5 steps to scale, and 3 uses 0.25 steps to scale. vscale_border - Sets an overscan border to the screen in number of pixels (1-399) hdmi_limited - Changes the color range output over HDMI. 0 = 0-255 , 1 = 16-235 , and 2 = 16-255 . A setting of 2 can be useful if you have problems with some Digital Video adapters. It can also help if your screen has a dynamic backlight and you want to brighten things up, to change the setting to 1. fb_size - Effects the scaling of things drawn to the Linux framebuffer, such as when you run scripts. Best left to 0 for automatic. video_mode - Sets the resolution for HDMI and VGA_Scaler output. This can be one of the premade values from 0-13 or it can be a custom video mode. See the notes in the .ini Master for custom video mode syntax. There is also a useful custom video mode tool by morf77 available here which can be used in conjunction with a modeline calculator . video_info - Number of seconds that it will display the video info in the top left corner of the screen whenever the resolution or frequency has changed. vsync_adjust - Adjusts the buffer settings for the frames sent to the display. For more details on how this works, see the Video Configuration 's vsync_adjust section. Essentially, the values of 0-2 are in order of most compatible+highest lag to least compatible+lowest lag. refresh_min - Forces a minimum refresh rate. refresh_max - Forces a maximum refresh rate. `` - Analog Video Settings forced_scandoubler - VGA output will always run in 31kHz mode (scandoubled) if this setting is turned on, useful for computer CRT's. ypbpr - Changes the VGA output to a YPbPr signal. composite_sync - Sends the sync signal on Hsync over VGA output, needed for certain configurations. vga_scaler - Sends the scaler output to the VGA port (either Analog IO or Direct Video). This is usually used with computer CRTs and other 31kHz displays which are not compatible with 240p TV signals. menu_pal - Forces the Menu core to run in PAL mode. direct_video - This changes the HDMI output to an analog signal, only supported with certain Direct Video Adapters that have AG62xx chipsets. If you have issues with color or no image, in addition to checking composite_sync and ypbpr options, you can also try changing hdmi_limited to 1 . If you are using ypbpr with component cables, the Direct Video adapter will need a modification to combine HSYNC and Green in order to work. fb_terminal - Best left at 1. If you have issues with running scripts on a CRT or Analog display, try switching this to 0 to see if that helps. Audio Settings hdmi_audio_96k - Changes the HDMI audio sampling rate from 48kHz (default) to 96kHz. This can help with the audio of some systems that have strange sampling rates (like Turbografx-16's sampling rate of 32.088kHz for instance). dvi_mode - DVI mode over the HDMI connection, this disables audio transmission over HDMI when turned on. Controller Settings mouse_throttle - Can be used to change the speed of your mouse (1-100). Good for very sensitive mice. gamepad_defaults - bt_auto_disconnect - Amount of minutes of inactivity before Bluetooth disconnects automatically. Default is 0 (off). bt_reset_before_pair - Resets bluetooth adapter before pairing dialog. If you enable this some input devices may get shutdown after a reset. Menu Settings rbf_hide_datecode - Hides the date codes from the core names in the core selection menu. osd_timeout - The length of time the OSD is displayed when brought up and no inputs have been pressed. 0 - never timeout, and the range of values are 5-3600 seconds. osd_rotate - Rotate the OSD. Useful for when you rotate your monitor for certain Arcade cores. 0 - no rotation, 1 - rotate right (+90\u00b0), and 2 - rotate left (-90\u00b0). Debug Settings log_file_entry - Writes filename under the curse in browser for use by external integrations.","title":"INI Settings"},{"location":"advanced/ini/#general-video-settings","text":"vscale_mode - Changes how the image is scaled to the screen. 0 will fit the whole image to screen, 1 is 1:1 integer scaled, 2 uses 0.5 steps to scale, and 3 uses 0.25 steps to scale. vscale_border - Sets an overscan border to the screen in number of pixels (1-399) hdmi_limited - Changes the color range output over HDMI. 0 = 0-255 , 1 = 16-235 , and 2 = 16-255 . A setting of 2 can be useful if you have problems with some Digital Video adapters. It can also help if your screen has a dynamic backlight and you want to brighten things up, to change the setting to 1. fb_size - Effects the scaling of things drawn to the Linux framebuffer, such as when you run scripts. Best left to 0 for automatic. video_mode - Sets the resolution for HDMI and VGA_Scaler output. This can be one of the premade values from 0-13 or it can be a custom video mode. See the notes in the .ini Master for custom video mode syntax. There is also a useful custom video mode tool by morf77 available here which can be used in conjunction with a modeline calculator . video_info - Number of seconds that it will display the video info in the top left corner of the screen whenever the resolution or frequency has changed. vsync_adjust - Adjusts the buffer settings for the frames sent to the display. For more details on how this works, see the Video Configuration 's vsync_adjust section. Essentially, the values of 0-2 are in order of most compatible+highest lag to least compatible+lowest lag. refresh_min - Forces a minimum refresh rate. refresh_max - Forces a maximum refresh rate. `` -","title":"General Video Settings"},{"location":"advanced/ini/#analog-video-settings","text":"forced_scandoubler - VGA output will always run in 31kHz mode (scandoubled) if this setting is turned on, useful for computer CRT's. ypbpr - Changes the VGA output to a YPbPr signal. composite_sync - Sends the sync signal on Hsync over VGA output, needed for certain configurations. vga_scaler - Sends the scaler output to the VGA port (either Analog IO or Direct Video). This is usually used with computer CRTs and other 31kHz displays which are not compatible with 240p TV signals. menu_pal - Forces the Menu core to run in PAL mode. direct_video - This changes the HDMI output to an analog signal, only supported with certain Direct Video Adapters that have AG62xx chipsets. If you have issues with color or no image, in addition to checking composite_sync and ypbpr options, you can also try changing hdmi_limited to 1 . If you are using ypbpr with component cables, the Direct Video adapter will need a modification to combine HSYNC and Green in order to work. fb_terminal - Best left at 1. If you have issues with running scripts on a CRT or Analog display, try switching this to 0 to see if that helps.","title":"Analog Video Settings"},{"location":"advanced/ini/#audio-settings","text":"hdmi_audio_96k - Changes the HDMI audio sampling rate from 48kHz (default) to 96kHz. This can help with the audio of some systems that have strange sampling rates (like Turbografx-16's sampling rate of 32.088kHz for instance). dvi_mode - DVI mode over the HDMI connection, this disables audio transmission over HDMI when turned on.","title":"Audio Settings"},{"location":"advanced/ini/#controller-settings","text":"mouse_throttle - Can be used to change the speed of your mouse (1-100). Good for very sensitive mice. gamepad_defaults - bt_auto_disconnect - Amount of minutes of inactivity before Bluetooth disconnects automatically. Default is 0 (off). bt_reset_before_pair - Resets bluetooth adapter before pairing dialog. If you enable this some input devices may get shutdown after a reset.","title":"Controller Settings"},{"location":"advanced/ini/#menu-settings","text":"rbf_hide_datecode - Hides the date codes from the core names in the core selection menu. osd_timeout - The length of time the OSD is displayed when brought up and no inputs have been pressed. 0 - never timeout, and the range of values are 5-3600 seconds. osd_rotate - Rotate the OSD. Useful for when you rotate your monitor for certain Arcade cores. 0 - no rotation, 1 - rotate right (+90\u00b0), and 2 - rotate left (-90\u00b0).","title":"Menu Settings"},{"location":"advanced/ini/#debug-settings","text":"log_file_entry - Writes filename under the curse in browser for use by external integrations.","title":"Debug Settings"},{"location":"advanced/lag/","text":"A common concern among retro enthusiasts is whether a device of this sort has lag and whether it will create a less desirable experience compared to original hardware. Every electronic equipment exhibits some kind of latency , but it only becomes problematic if this latency causes frames to be missed. A frame is typically 16ms for a system using a 60 frames per second (60 Hz) display. Lag is only problematic in a few specific cases: * Some older games were designed to rely on extremely quick response times (e.g. Punch-Out on NES). * If the latency is different between two players, it could introduce an unfair advantage. * Lag that isn't constant can be an issue on games that require precise movement. (Most players can adapt to lag that is consistent.) There are three major categories of lag. Input , which involves controllers, mouse, etc, Processing , which would involve buffering in the core, execution or delays in code and Display which involves the output of the video to your display device. For a more detailed overview of lag and exploration of it, please refer to this page: https://inputlag.science/ Input For input, MiSTer primarily uses USB. In this case the overall input lag is the sum of the lag caused by the USB polling and the lag caused by the controller itself, how quickly it processes the signals. The latter is outside the scope of MiSTer and can only be improved by using a better controller. On the MiSTer side only the lag caused by the USB polling can be reduced if the connected USB device supports a lower polling interval. The polling interval is measured in Hz and indicates how often a USB device is polled per second. At 1000 Hz, a USB device is polled 1000 times per second, which means the additional lag caused by the polling is 1 s / 1000 = 1 ms in the worst case and 0.5 ms on average. This is a great improvement compared to the default value of 125 Hz, where a USB device is polled 125 times per second, which means the additional lag caused by the polling is 1 s / 125 = 8 ms in the worst case and 4 ms on average. If a game is rendered at 60 frames per second, a single frame takes 1 s / 60 \u2248 16 ms to process. One might think that any polling interval below 16 ms would be perfect; however, USB polling happens independently of the vertical sync. Therefore, even with a 1 ms polling interval, there is a chance of 1/16 that the whole frame will be missed and input will be processed on the next frame. The longer the polling interval, the greater the odds of a missed frame. With a polling interval of 8 ms, the odds of input missing a frame are 50%. Native polling rates and input response vary across consoles and even games. Processing This is one core advantage of emulation using FPGAs. Unlike software emulators which go through a cycle of executing, and then waiting for a screen refresh, FPGA cores run in real time, as the original hardware did. This means that cores don\u2019t have CPU bottlenecks to slow them down arbitrarily or require additional large buffers to hold data under most circumstances. Display MiSTer\u2019s two primary display outputs are analog and HDMI. The analog output is driven as the original system would have, with no buffering, and so it will be effectively identical to the latency of a real console. From this point of view, the analog output cannot have any form of lag. When using HDMI output the image must be scaled up to fit the higher resolutions, which requires additional processing. The MiSTer scaler has options which impact its latency. Using vsync_adjust=2 in the ini file will result in about 4 scanlines of latency, while 0 or 1 will result in up to roughly 2 frames of latency, with the added advantage of being more compatible with displays. In addition your own television or monitor may introduce more latency, but this varies by device and no definite number can be given on that here. In summary, if lag is critical to you, it's best to play on a CRT using a recommended and widely-tested USB controller. Some users have tested and ranked USB controllers by performance; you can see their results here . An alternate thorough list of tested controllers by misteraddons is also available here . Do keep in mind, however, that even over HDMI MiSTer is capable of providing a better experience than many other devices. Reducing Lag Video lag MiSTer offers options in how to configure its HDMI upscaler, making a tradeoff between compatibility and low latency. These can be set in the MiSTER.INI file at the root of the SD card: vsync_adjust=2 is the best option if it is compatible with your TV. This mode uses the original refresh rate and pixel clock of the core, resulting in sub-frame latency. The actual latency of this mode is around 4 to 30 lines of lag according to Grabulosaure who made the scaler in this video he made . vsync_adjust=1 is the second best option and it has 1 frame of latency. This mode uses a framebuffer, but maintains the system's original vsync and varies the pixel clock per core. vsync_adjust=0 is the lesser option, but it is the most compatible vsync_adjust mode. Up to 2-3 frames of latency and less smooth scrolling. This mode guarantees 60 hz output with an NTSC standard pixel clock. Input lag USB controllers usually have an interval value which the host (MiSTer Linux kernel) respects to poll their inputs at. Most USB devices can actually perform better by being polled more often without any side effects. To set a higher USB polling rate, you need to go to the \"linux\" subdirectory on your SD card and rename \"u-boot.txt_example\" to \"u-boot.txt\". The aforementioned file contains the following options, which should only be changed if you are encountering problems: v = loglevel = 4 usbhid.jspoll = 1 xpad.cpoll = 1 loglevel : 4 is the default value. You can set this to 9 to get debugging messages with dmesg command via SSH. If you just want to know which values of usbhid.jspoll and xpad.cpoll are applied to your controller, there are easier ways to achieve this (see below). usbhid.jspoll : specifies the interval for USB HID controllers, usually DirectInput. 0 is the default value MiSTer uses (even when there is no \"u_boot.txt\"). In this case the requested value from the controller is used. 1 is the recommended value (which means 1000/1 = 1000 Hz polling rate). However, if you ever encounter any issues, try higher integer values. The higher the interval, the higher the possible lag. This shouldn't go above 8 (which means 1000/8 = 125 Hz polling rate). To see which value is applied to your controller, you can run systool -m usbhid -A jspoll from the Linux shell. xpad.cpoll : specifies the interval for USB XInput controllers. Most popular controllers use this. There is no practical difference here. XInput is for Microsoft's Xbox consoles and PC. 0 is the default value MiSTer uses (even when there is no \"u_boot.txt\"). In this case the requested value from the controller is used. 1 is the recommended value (which means 1000/1 = 1000 Hz polling rate). However, if you ever encounter any issues, try higher integer values. The higher the interval, the higher the possible lag. This shouldn't go above 8 (which means 1000/8 = 125 Hz polling rate). To see which value is applied to your controller, you can run systool -m xpad -A cpoll from the Linux shell. What is the fastest controller I can get? Almost any standard USB controller will work well with MiSTer, however there is a short list of excellent controllers that we can suggest based on user feedback and input lag testing: 8bitdo M30 2.4g connected in wired mode Sony DS4 in wired mode Hori Fighting Commander (later revisions), either PS4 or XBOX1 variant is fine; pick your favorite DIY USB adapter using open source firmware available here Generally speaking, while Bluetooth connected devices will work fine, you can expect the highest amount of input latency while using your controller in this way. Please keep in mind, \u201chigh latency\u201d controllers should add, at most, 16 ms (1/60th of a second) or one frame (or rarely, depending on the controller, 32ms) of lag, and not constantly, to your experience, which is not a lot of lag, so if you\u2019re not the type of person who notices that, you can safely just use any decent USB controller. Variable lag (the input response varying between 1 and 3 frames, for instance) is more noticeable than consistent lag. There are very few controllers which add more than 1 frame of lag. There is no definitive fastest controller that you can get, but there are quite a few at the top of the list. You can, again, check MiSTerAddons and Lemonici's MiSTer Input Latency Chart for a definitive community sourced list of controllers tested with MiSTer with a separate device that uses the DE10-Nano's headers to get an objective result.","title":"Lag Explained"},{"location":"advanced/lag/#input","text":"For input, MiSTer primarily uses USB. In this case the overall input lag is the sum of the lag caused by the USB polling and the lag caused by the controller itself, how quickly it processes the signals. The latter is outside the scope of MiSTer and can only be improved by using a better controller. On the MiSTer side only the lag caused by the USB polling can be reduced if the connected USB device supports a lower polling interval. The polling interval is measured in Hz and indicates how often a USB device is polled per second. At 1000 Hz, a USB device is polled 1000 times per second, which means the additional lag caused by the polling is 1 s / 1000 = 1 ms in the worst case and 0.5 ms on average. This is a great improvement compared to the default value of 125 Hz, where a USB device is polled 125 times per second, which means the additional lag caused by the polling is 1 s / 125 = 8 ms in the worst case and 4 ms on average. If a game is rendered at 60 frames per second, a single frame takes 1 s / 60 \u2248 16 ms to process. One might think that any polling interval below 16 ms would be perfect; however, USB polling happens independently of the vertical sync. Therefore, even with a 1 ms polling interval, there is a chance of 1/16 that the whole frame will be missed and input will be processed on the next frame. The longer the polling interval, the greater the odds of a missed frame. With a polling interval of 8 ms, the odds of input missing a frame are 50%. Native polling rates and input response vary across consoles and even games.","title":"Input"},{"location":"advanced/lag/#processing","text":"This is one core advantage of emulation using FPGAs. Unlike software emulators which go through a cycle of executing, and then waiting for a screen refresh, FPGA cores run in real time, as the original hardware did. This means that cores don\u2019t have CPU bottlenecks to slow them down arbitrarily or require additional large buffers to hold data under most circumstances.","title":"Processing"},{"location":"advanced/lag/#display","text":"MiSTer\u2019s two primary display outputs are analog and HDMI. The analog output is driven as the original system would have, with no buffering, and so it will be effectively identical to the latency of a real console. From this point of view, the analog output cannot have any form of lag. When using HDMI output the image must be scaled up to fit the higher resolutions, which requires additional processing. The MiSTer scaler has options which impact its latency. Using vsync_adjust=2 in the ini file will result in about 4 scanlines of latency, while 0 or 1 will result in up to roughly 2 frames of latency, with the added advantage of being more compatible with displays. In addition your own television or monitor may introduce more latency, but this varies by device and no definite number can be given on that here. In summary, if lag is critical to you, it's best to play on a CRT using a recommended and widely-tested USB controller. Some users have tested and ranked USB controllers by performance; you can see their results here . An alternate thorough list of tested controllers by misteraddons is also available here . Do keep in mind, however, that even over HDMI MiSTer is capable of providing a better experience than many other devices.","title":"Display"},{"location":"advanced/lag/#reducing-lag","text":"","title":"Reducing Lag"},{"location":"advanced/lag/#video-lag","text":"MiSTer offers options in how to configure its HDMI upscaler, making a tradeoff between compatibility and low latency. These can be set in the MiSTER.INI file at the root of the SD card: vsync_adjust=2 is the best option if it is compatible with your TV. This mode uses the original refresh rate and pixel clock of the core, resulting in sub-frame latency. The actual latency of this mode is around 4 to 30 lines of lag according to Grabulosaure who made the scaler in this video he made . vsync_adjust=1 is the second best option and it has 1 frame of latency. This mode uses a framebuffer, but maintains the system's original vsync and varies the pixel clock per core. vsync_adjust=0 is the lesser option, but it is the most compatible vsync_adjust mode. Up to 2-3 frames of latency and less smooth scrolling. This mode guarantees 60 hz output with an NTSC standard pixel clock.","title":"Video lag"},{"location":"advanced/lag/#input-lag","text":"USB controllers usually have an interval value which the host (MiSTer Linux kernel) respects to poll their inputs at. Most USB devices can actually perform better by being polled more often without any side effects. To set a higher USB polling rate, you need to go to the \"linux\" subdirectory on your SD card and rename \"u-boot.txt_example\" to \"u-boot.txt\". The aforementioned file contains the following options, which should only be changed if you are encountering problems: v = loglevel = 4 usbhid.jspoll = 1 xpad.cpoll = 1 loglevel : 4 is the default value. You can set this to 9 to get debugging messages with dmesg command via SSH. If you just want to know which values of usbhid.jspoll and xpad.cpoll are applied to your controller, there are easier ways to achieve this (see below). usbhid.jspoll : specifies the interval for USB HID controllers, usually DirectInput. 0 is the default value MiSTer uses (even when there is no \"u_boot.txt\"). In this case the requested value from the controller is used. 1 is the recommended value (which means 1000/1 = 1000 Hz polling rate). However, if you ever encounter any issues, try higher integer values. The higher the interval, the higher the possible lag. This shouldn't go above 8 (which means 1000/8 = 125 Hz polling rate). To see which value is applied to your controller, you can run systool -m usbhid -A jspoll from the Linux shell. xpad.cpoll : specifies the interval for USB XInput controllers. Most popular controllers use this. There is no practical difference here. XInput is for Microsoft's Xbox consoles and PC. 0 is the default value MiSTer uses (even when there is no \"u_boot.txt\"). In this case the requested value from the controller is used. 1 is the recommended value (which means 1000/1 = 1000 Hz polling rate). However, if you ever encounter any issues, try higher integer values. The higher the interval, the higher the possible lag. This shouldn't go above 8 (which means 1000/8 = 125 Hz polling rate). To see which value is applied to your controller, you can run systool -m xpad -A cpoll from the Linux shell.","title":"Input lag"},{"location":"advanced/lag/#what-is-the-fastest-controller-i-can-get","text":"Almost any standard USB controller will work well with MiSTer, however there is a short list of excellent controllers that we can suggest based on user feedback and input lag testing: 8bitdo M30 2.4g connected in wired mode Sony DS4 in wired mode Hori Fighting Commander (later revisions), either PS4 or XBOX1 variant is fine; pick your favorite DIY USB adapter using open source firmware available here Generally speaking, while Bluetooth connected devices will work fine, you can expect the highest amount of input latency while using your controller in this way. Please keep in mind, \u201chigh latency\u201d controllers should add, at most, 16 ms (1/60th of a second) or one frame (or rarely, depending on the controller, 32ms) of lag, and not constantly, to your experience, which is not a lot of lag, so if you\u2019re not the type of person who notices that, you can safely just use any decent USB controller. Variable lag (the input response varying between 1 and 3 frames, for instance) is more noticeable than consistent lag. There are very few controllers which add more than 1 frame of lag. There is no definitive fastest controller that you can get, but there are quite a few at the top of the list. You can, again, check MiSTerAddons and Lemonici's MiSTer Input Latency Chart for a definitive community sourced list of controllers tested with MiSTer with a separate device that uses the DE10-Nano's headers to get an objective result.","title":"What is the fastest controller I can get?"},{"location":"advanced/mgl/","text":"MGL files are a new way to load ROMs directly from the Menu core. This feature could potentially change more in the future as it's very new. MGL files run games automatically You can add your favorite games to the main menu (below the Arcade, Computer, Console etc. folders) - or - e.g. inside a folder for instance called 'Favorites'. It needs to be named _Favorites in the file system to show up in the menu. Each of your favorite games must have an MGL file to be accessible in the menu. At the time of writing (late February 2022) MGL is not supported on the Atari ST, Minimig, Archie and Sharp cores. MGL Format Examples: <mistergamedescription> <rbf> _console/snes </rbf> <file delay= \"2\" type= \"f\" index= \"0\" path= \"dummy.snes\" /> </mistergamedescription> <mistergamedescription> <rbf> _console/gameboy </rbf> <file delay= \"1\" type= \"f\" index= \"1\" path= \"dummy.gbc\" /> </mistergamedescription> <mistergamedescription> <rbf> _Computer/C64 </rbf> <file delay= \"1\" type= \"f\" index= \"1\" path= \"dummy.prg\" /> </mistergamedescription> <rbf> : path to the core and its name. If the core is outside the _console folder just its name. <file delay= amount of seconds to wait before load/mount (e.g. 1:turbografx16, neogeo, gba, gameboy, genesis, c64 and 2:snes). type= f: load file. s: mount index= 0 for most console cores but 1 for e.g. the NeoGeo and Gameboy cores. path= path to game file inside the core's games folder. E.g. Puzzles/Dummy.bin All parameters must be present. If a core pops up the OSD menu after loading the game or the game doesn't load try increasing the delay. It could also be due to wrong the index number, file type or game file path so check those too. Until a complete list of cores and their index numbers and file types is ready you can test different index numbers and the file types listed above or look at the code for each core on Github. E.g. for the TurboGraphics core you can take a look at the file TurboGrafx16.sv to see the index numbers and file types supported by that core. Find a section that starts with parameter CONF_STR and in that section look for the ROM type you are loading/mounting. In this case it will be \"S0,CUECHD,Insert CD;\" . Notice the S0, that is the \"s\" type with index of 0.","title":"MGL Files"},{"location":"advanced/mgl/#mgl-files-run-games-automatically","text":"You can add your favorite games to the main menu (below the Arcade, Computer, Console etc. folders) - or - e.g. inside a folder for instance called 'Favorites'. It needs to be named _Favorites in the file system to show up in the menu. Each of your favorite games must have an MGL file to be accessible in the menu. At the time of writing (late February 2022) MGL is not supported on the Atari ST, Minimig, Archie and Sharp cores.","title":"MGL files run games automatically"},{"location":"advanced/mgl/#mgl-format","text":"Examples: <mistergamedescription> <rbf> _console/snes </rbf> <file delay= \"2\" type= \"f\" index= \"0\" path= \"dummy.snes\" /> </mistergamedescription> <mistergamedescription> <rbf> _console/gameboy </rbf> <file delay= \"1\" type= \"f\" index= \"1\" path= \"dummy.gbc\" /> </mistergamedescription> <mistergamedescription> <rbf> _Computer/C64 </rbf> <file delay= \"1\" type= \"f\" index= \"1\" path= \"dummy.prg\" /> </mistergamedescription> <rbf> : path to the core and its name. If the core is outside the _console folder just its name. <file delay= amount of seconds to wait before load/mount (e.g. 1:turbografx16, neogeo, gba, gameboy, genesis, c64 and 2:snes). type= f: load file. s: mount index= 0 for most console cores but 1 for e.g. the NeoGeo and Gameboy cores. path= path to game file inside the core's games folder. E.g. Puzzles/Dummy.bin All parameters must be present. If a core pops up the OSD menu after loading the game or the game doesn't load try increasing the delay. It could also be due to wrong the index number, file type or game file path so check those too. Until a complete list of cores and their index numbers and file types is ready you can test different index numbers and the file types listed above or look at the code for each core on Github. E.g. for the TurboGraphics core you can take a look at the file TurboGrafx16.sv to see the index numbers and file types supported by that core. Find a section that starts with parameter CONF_STR and in that section look for the ROM type you are loading/mounting. In this case it will be \"S0,CUECHD,Insert CD;\" . Notice the S0, that is the \"s\" type with index of 0.","title":"MGL Format"},{"location":"advanced/midi/","text":"There are multiple options for using MIDI on the MiSTer. Here's a few of the ways you can use it below. The mt32-pi Project Dale Whinham (aka d0pefish) has come up with an open source MIDI synthesizer for the raspberry pi called mt32-pi. For the most up to date instructions on how to use mt32-pi with your MiSTer, please go to the MiSTer FPGA section of the mt32-pi wiki to get all of the information you should need. There are also two add-on boards designed by sorgelig specifically for mt32-pi to be used with the MiSTer. MT32-pi Video Example Computer Cores with MIDI support. When running the Minimig and ao486 cores, once a ALSA compatible USB MIDI device is attached, two additional \u2018UART Connection\u2019 menu options (\u2018USBMIDI\u2019 and \u2018USBMIDI-38K\u2019) will be available in addition to \u2018None\u2019, \u2018PPP\u2019 and \u2018Console\u2019. Minimig \u2018USBMIDI\u2019 - This option is used with the Amiga / Minimig core. This option sets the UART connection speed to 31250 baud which is the standard MIDI speed. Many Amiga applications and most games don\u2019t require any additional drivers for MIDI. Some \u201cnewer\u201d applications may require the CAMD driver. Aminet : CAMD ao486 \u2018USBMIDI-38K\u2019 - This option is used with the ao486 core. This option sets the UART Connection speed to 38400 baud. (The MIDI speed of 31250 baud is not a standard speed DOS PC UARTs were capable of doing) While some sequencer applications and Microsoft Windows may support MIDI on the serial port, DOS games typically require a MPU-401 interface which ao486 unfortunately lacks. In lieu of hardware MPU-401 capability the SoftMPU TSR can be used with a good degree of success. SoftMPU SoftMPU SoftMPU requires the QEMM memory manager be installed. For testing QEMM 8.03 was used. QEMM \u201cstealth\u201d option seems to be incompatible with ao486 so it is advisable to skip that part of the optimize process. It\u2019s a good idea to run the QEMM optimize application again after installing SoftMPU (in the AUTOEXEC.BAT) to get as much of the lower 640K conventional RAM free as possible. Although less common, some DOS games and applications require MPU-401 interrupts. This option can break compatibility with others software not requiring interrupts. Starting SoftMPU without MPU-401 interrupts: SOFTMPU.EXE /MPU:330 /OUTPUT:COM1 Starting SoftMPU with MPU-401 interrupts: SOFTMPU.EXE /SB:220 /IRQ:5 /MPU:330 /OUTPUT:COM1 The Rev.0 Roland MT-32 used in testing required the \u2018DELAYSYSEX\u2019 switch to prevent buffer overflow for certain games but made Sierra games upload sysex commands excessively slowly. This is not necessary for General MIDI modules and newer revision MT-32s. SOFTMPU.EXE /MPU:330 /DELAYSYSEX /OUTPUT:COM1 MidilLink The 'midilink' daemon currently supports following switches / options: TESTSER - this option sends a test message to the serial port once the daemon is started. TESTMIDI - this option sends a middle 'c' note to the MIDI device once the daemon is started. QUIET - this option suppresses MIDI debug output. 38400 - this option sets the serial speed to 38400 baud (default is 31250 baud) - used with ao486 core. MidiLink Github MIDI Adapters reported to work Creative EMU XMIDI (Known to mangle SYSEX messages) Roland UM-ONE M-Audio Midisport Uno","title":"MIDI Features"},{"location":"advanced/midi/#the-mt32-pi-project","text":"Dale Whinham (aka d0pefish) has come up with an open source MIDI synthesizer for the raspberry pi called mt32-pi. For the most up to date instructions on how to use mt32-pi with your MiSTer, please go to the MiSTer FPGA section of the mt32-pi wiki to get all of the information you should need. There are also two add-on boards designed by sorgelig specifically for mt32-pi to be used with the MiSTer.","title":"The mt32-pi Project"},{"location":"advanced/midi/#mt32-pi-video-example","text":"","title":"MT32-pi Video Example"},{"location":"advanced/midi/#computer-cores-with-midi-support","text":"When running the Minimig and ao486 cores, once a ALSA compatible USB MIDI device is attached, two additional \u2018UART Connection\u2019 menu options (\u2018USBMIDI\u2019 and \u2018USBMIDI-38K\u2019) will be available in addition to \u2018None\u2019, \u2018PPP\u2019 and \u2018Console\u2019.","title":"Computer Cores with MIDI support."},{"location":"advanced/midi/#minimig","text":"\u2018USBMIDI\u2019 - This option is used with the Amiga / Minimig core. This option sets the UART connection speed to 31250 baud which is the standard MIDI speed. Many Amiga applications and most games don\u2019t require any additional drivers for MIDI. Some \u201cnewer\u201d applications may require the CAMD driver. Aminet : CAMD","title":"Minimig"},{"location":"advanced/midi/#ao486","text":"\u2018USBMIDI-38K\u2019 - This option is used with the ao486 core. This option sets the UART Connection speed to 38400 baud. (The MIDI speed of 31250 baud is not a standard speed DOS PC UARTs were capable of doing) While some sequencer applications and Microsoft Windows may support MIDI on the serial port, DOS games typically require a MPU-401 interface which ao486 unfortunately lacks. In lieu of hardware MPU-401 capability the SoftMPU TSR can be used with a good degree of success. SoftMPU","title":"ao486"},{"location":"advanced/midi/#softmpu","text":"SoftMPU requires the QEMM memory manager be installed. For testing QEMM 8.03 was used. QEMM \u201cstealth\u201d option seems to be incompatible with ao486 so it is advisable to skip that part of the optimize process. It\u2019s a good idea to run the QEMM optimize application again after installing SoftMPU (in the AUTOEXEC.BAT) to get as much of the lower 640K conventional RAM free as possible. Although less common, some DOS games and applications require MPU-401 interrupts. This option can break compatibility with others software not requiring interrupts. Starting SoftMPU without MPU-401 interrupts: SOFTMPU.EXE /MPU:330 /OUTPUT:COM1 Starting SoftMPU with MPU-401 interrupts: SOFTMPU.EXE /SB:220 /IRQ:5 /MPU:330 /OUTPUT:COM1 The Rev.0 Roland MT-32 used in testing required the \u2018DELAYSYSEX\u2019 switch to prevent buffer overflow for certain games but made Sierra games upload sysex commands excessively slowly. This is not necessary for General MIDI modules and newer revision MT-32s. SOFTMPU.EXE /MPU:330 /DELAYSYSEX /OUTPUT:COM1","title":"SoftMPU"},{"location":"advanced/midi/#midillink","text":"The 'midilink' daemon currently supports following switches / options: TESTSER - this option sends a test message to the serial port once the daemon is started. TESTMIDI - this option sends a middle 'c' note to the MIDI device once the daemon is started. QUIET - this option suppresses MIDI debug output. 38400 - this option sets the serial speed to 38400 baud (default is 31250 baud) - used with ao486 core. MidiLink Github","title":"MidilLink"},{"location":"advanced/midi/#midi-adapters-reported-to-work","text":"Creative EMU XMIDI (Known to mangle SYSEX messages) Roland UM-ONE M-Audio Midisport Uno","title":"MIDI Adapters reported to work"},{"location":"advanced/multibutton/","text":"When overriding gamepad settings inside a core it is possible to define button combinations (e.g. A+B) if you have enough physical buttons. To allow for this, MiSTer will ask if you want to setup \"alternate mappings\" after defining a gamepad. Alternate mappings are active in parallel and allow two kinds of abilities: map two physical button to the same core button (e.g. alternate button for Start), or map one physical button to two-button combo in the core (e.g. map physical X to thr core's A+B). Bind core button to two physical buttons The simplest is to map an extra physical button. Only this additional button needs to be defined in the alternate map, as follows: Map D-Pad A B main define Btn 1 Btn 2 alt skip skip Btn 3 The result of using this setup ia that you will have physical buttons 2 and 3 mapped to the core button B. This also works with gamepad directions. For example, for games that use Up as a jump button, it is possible to map a physical third button to jump. Bind physical button to core button combo A more advanced setup is to use both mappings in parallel to make one physical button push two core buttons at the same time. See the table below: Map D-Pad A B main define Btn 1 Btn 3 alt skip Btn 3 Btn 2 The result of this is that Button 1 will be A, Button 2 will be B, and Button 3 will be A+B. This is particularly useful for the Neogeo core where some fighting games use A+B and C+D as \"strong hit\". (note: unfortunately NeoGeo games are not consistent with each other - so it is not possible to set one mapping for all games) Example: NeoGeo Breakers / Breakers' Revenge Assume a six button arcade controller (for Street Fighter 2) with 3 punch buttons on top and 3 kick buttons below. We will map the buttons so that Breakers / Breakers' revenge has the same kind of layout. This particular game uses the following attack buttons: * A: Weak Punch * B: Weak Kick * C: Strong Punch * D: Strong Kick In addition, most characters have an extra \"command\" move mapped to: * Weak Punch + Strong Punch * Weak Kick + Strong Kick To match the Street Fighter 2 layout, we can assign this across six buttons: - Weak Strong Weak+Strong Punch A C A + C Kick B D B + D Which translates to the following buttons: - Weak Strong Weak+Strong Punch Btn 1 Btn 2 Btn 3 Kick Btn 4 Btn 5 Btn 6 To obtain this, input the following assignment during main and alternate mapping: map d-pad A B C D main define Btn 1 Btn 4 Btn 3 Btn 6 alt skip Btn 3 Btn 6 Btn 2 Btn 5 (in alternate mapping, d-pad and all other buttons can be skipped) Example: NeoGeo King of Fighters / Fatal Fury Special Both of these game use the same attack layout as Breakers but their button combination differs: - Weak Strong Combo Punch A C A + B Kick B D C + D To map this, we need to switch things around a little bit: map d-pad A B C D main define Btn 1 Btn 3 Btn 2 Btn 6 alt skip Btn 3 Btn 4 Btn 6 Btn 5 Example: NeoGeo Samurai Shodown This game has yet another layout, changing the order of base attacks: - Weak Medium Strong Slash A B A + B Kick C D C + D We can map this as follows: map d-pad A B C D main define Btn 1 Btn 3 Btn 4 Btn 6 alt skip Btn 3 Btn 2 Btn 6 Btn 5 Counter Example: The Last Blade 1 and 2 Very similar to the above but a different button combo: - Weak Medium Special Slash A B B + C Kick C D C + D In this case, it is not possible to map C three times so we must choose whether to map B+C or C+D . Option 1: Mapping B+C to button 3: map d-pad A B C D main define Btn 1 Btn 2 Btn 3 Btn 5 alt skip skip Btn 3 Btn 4 skip (Btn 6 remains unassigned) Option 2: Mapping C+D to button 6: map d-pad A B C D main define Btn 1 Btn 2 Btn 6 Btn 5 alt skip skip skip Btn 4 Btn 6 (Btn 3 remains unassigned)","title":"Multi-Button Mapping"},{"location":"advanced/multibutton/#bind-core-button-to-two-physical-buttons","text":"The simplest is to map an extra physical button. Only this additional button needs to be defined in the alternate map, as follows: Map D-Pad A B main define Btn 1 Btn 2 alt skip skip Btn 3 The result of using this setup ia that you will have physical buttons 2 and 3 mapped to the core button B. This also works with gamepad directions. For example, for games that use Up as a jump button, it is possible to map a physical third button to jump.","title":"Bind core button to two physical buttons"},{"location":"advanced/multibutton/#bind-physical-button-to-core-button-combo","text":"A more advanced setup is to use both mappings in parallel to make one physical button push two core buttons at the same time. See the table below: Map D-Pad A B main define Btn 1 Btn 3 alt skip Btn 3 Btn 2 The result of this is that Button 1 will be A, Button 2 will be B, and Button 3 will be A+B. This is particularly useful for the Neogeo core where some fighting games use A+B and C+D as \"strong hit\". (note: unfortunately NeoGeo games are not consistent with each other - so it is not possible to set one mapping for all games)","title":"Bind physical button to core button combo"},{"location":"advanced/multibutton/#example-neogeo-breakers-breakers-revenge","text":"Assume a six button arcade controller (for Street Fighter 2) with 3 punch buttons on top and 3 kick buttons below. We will map the buttons so that Breakers / Breakers' revenge has the same kind of layout. This particular game uses the following attack buttons: * A: Weak Punch * B: Weak Kick * C: Strong Punch * D: Strong Kick In addition, most characters have an extra \"command\" move mapped to: * Weak Punch + Strong Punch * Weak Kick + Strong Kick To match the Street Fighter 2 layout, we can assign this across six buttons: - Weak Strong Weak+Strong Punch A C A + C Kick B D B + D Which translates to the following buttons: - Weak Strong Weak+Strong Punch Btn 1 Btn 2 Btn 3 Kick Btn 4 Btn 5 Btn 6 To obtain this, input the following assignment during main and alternate mapping: map d-pad A B C D main define Btn 1 Btn 4 Btn 3 Btn 6 alt skip Btn 3 Btn 6 Btn 2 Btn 5 (in alternate mapping, d-pad and all other buttons can be skipped)","title":"Example: NeoGeo Breakers / Breakers' Revenge"},{"location":"advanced/multibutton/#example-neogeo-king-of-fighters-fatal-fury-special","text":"Both of these game use the same attack layout as Breakers but their button combination differs: - Weak Strong Combo Punch A C A + B Kick B D C + D To map this, we need to switch things around a little bit: map d-pad A B C D main define Btn 1 Btn 3 Btn 2 Btn 6 alt skip Btn 3 Btn 4 Btn 6 Btn 5","title":"Example: NeoGeo King of Fighters / Fatal Fury Special"},{"location":"advanced/multibutton/#example-neogeo-samurai-shodown","text":"This game has yet another layout, changing the order of base attacks: - Weak Medium Strong Slash A B A + B Kick C D C + D We can map this as follows: map d-pad A B C D main define Btn 1 Btn 3 Btn 4 Btn 6 alt skip Btn 3 Btn 2 Btn 6 Btn 5","title":"Example: NeoGeo Samurai Shodown"},{"location":"advanced/multibutton/#counter-example-the-last-blade-1-and-2","text":"Very similar to the above but a different button combo: - Weak Medium Special Slash A B B + C Kick C D C + D In this case, it is not possible to map C three times so we must choose whether to map B+C or C+D .","title":"Counter Example: The Last Blade 1 and 2"},{"location":"advanced/multibutton/#option-1-mapping-bc-to-button-3","text":"map d-pad A B C D main define Btn 1 Btn 2 Btn 3 Btn 5 alt skip skip Btn 3 Btn 4 skip (Btn 6 remains unassigned)","title":"Option 1: Mapping B+C to button 3:"},{"location":"advanced/multibutton/#option-2-mapping-cd-to-button-6","text":"map d-pad A B C D main define Btn 1 Btn 2 Btn 6 Btn 5 alt skip skip skip Btn 4 Btn 6 (Btn 3 remains unassigned)","title":"Option 2: Mapping C+D to button 6:"},{"location":"advanced/network/","text":"There are multiple advanced networking features that the MiSTer can utilize. Here we will go over quite a few of them. CIFS Share Mounting The MiSTer can mount a network share from another computer or server as if it were storage. There are two scripts that are used by the MiSTer for CIFS mounting and unmounting. cifs_mount.sh This script mounts the desired network share to the MiSTer in such a way that any identical folders from /media/fat will be put on a lower priority and you will see the ones from the network share in place of the ones on your MicroSD. See Core Paths for more specific information as to how this hierarchy functions. cifs_umount.sh This script will unmount the network share when ran. RetroNAS A project was launched that makes it easier to get a network attached storage (NAS) device up and running which was focused solely on retro gaming device compatibility. The MiSTer was one of their primary focuses and it works quite well. All you need is a Raspberry Pi4 and some kind of external hard drive storage device. Remember: NAS IS NOT BACKUP! You could lose data if you rely solely on a NAS for important data. They have a good installation guide that is simple to follow and MiSTer-specific instructions to help get you started. They also have video guides available on Youtube for installation and MiSTer FPGA-specific configuration if you prefer. Static IP Address configuration Currently the best way to do this is using connmanctl (try connmanctl help for more info). * Create /var/lib/connman directory so changes will persist across reboots # mkdir /var/lib/connman * Find your on-board network service name. # connmanctl services *AO Wired ethernet_020304050607_cable * Setup IP address (e.g. 192.168.1.123 , should be unused), subnet mask (e.g. 255.255.255.0 ) and gateway (e.g. 192.168.1.1 , typically your router IP address). To configure the right device use the service name returned from above command (e.g. ethernet_020304050607_cable ). This will disable the use of DHCP. # connmanctl config ethernet_020304050607_cable --ipv4 manual 192.168.1.123 255.255.255.0 192.168.1.1 * Setup one or more DNS server(s) (e.g. 192.168.1.1 from your router, 8.8.8.8 from Google DNS. # connmanctl config ethernet_020304050607_cable --nameservers 192.168.1.1 8.8.8.8 You could write a script to help with typing and remembering your settings. You can also setup your on-board network connection by editing /etc/network/interfaces . This is currently not advised. Because if you have a DHCP server in your network, the network stack will still contact the DHCP server and assign the returned IP address regardless, leading to usually unwanted behavior. Re-Enabling DHCP # connmanctl config ethernet_020304050607_cable --dhcp","title":"Setting Up SSH, FTP, and NAS"},{"location":"advanced/network/#cifs-share-mounting","text":"The MiSTer can mount a network share from another computer or server as if it were storage. There are two scripts that are used by the MiSTer for CIFS mounting and unmounting. cifs_mount.sh This script mounts the desired network share to the MiSTer in such a way that any identical folders from /media/fat will be put on a lower priority and you will see the ones from the network share in place of the ones on your MicroSD. See Core Paths for more specific information as to how this hierarchy functions. cifs_umount.sh This script will unmount the network share when ran.","title":"CIFS Share Mounting"},{"location":"advanced/network/#retronas","text":"A project was launched that makes it easier to get a network attached storage (NAS) device up and running which was focused solely on retro gaming device compatibility. The MiSTer was one of their primary focuses and it works quite well. All you need is a Raspberry Pi4 and some kind of external hard drive storage device. Remember: NAS IS NOT BACKUP! You could lose data if you rely solely on a NAS for important data. They have a good installation guide that is simple to follow and MiSTer-specific instructions to help get you started. They also have video guides available on Youtube for installation and MiSTer FPGA-specific configuration if you prefer.","title":"RetroNAS"},{"location":"advanced/network/#static-ip-address-configuration","text":"Currently the best way to do this is using connmanctl (try connmanctl help for more info). * Create /var/lib/connman directory so changes will persist across reboots # mkdir /var/lib/connman * Find your on-board network service name. # connmanctl services *AO Wired ethernet_020304050607_cable * Setup IP address (e.g. 192.168.1.123 , should be unused), subnet mask (e.g. 255.255.255.0 ) and gateway (e.g. 192.168.1.1 , typically your router IP address). To configure the right device use the service name returned from above command (e.g. ethernet_020304050607_cable ). This will disable the use of DHCP. # connmanctl config ethernet_020304050607_cable --ipv4 manual 192.168.1.123 255.255.255.0 192.168.1.1 * Setup one or more DNS server(s) (e.g. 192.168.1.1 from your router, 8.8.8.8 from Google DNS. # connmanctl config ethernet_020304050607_cable --nameservers 192.168.1.1 8.8.8.8 You could write a script to help with typing and remembering your settings. You can also setup your on-board network connection by editing /etc/network/interfaces . This is currently not advised. Because if you have a DHCP server in your network, the network stack will still contact the DHCP server and assign the returned IP address regardless, leading to usually unwanted behavior.","title":"Static IP Address configuration"},{"location":"advanced/network/#re-enabling-dhcp","text":"# connmanctl config ethernet_020304050607_cable --dhcp","title":"Re-Enabling DHCP"},{"location":"advanced/troubleshooting/","text":"Fixing missing certs If you are unable to wget as instructed above, this might be because you are missing security certificate files. The default system comes with no security certificate files, which is a bit annoying, as you need to add --no-check-certificate on wget to download anything HTTPS. Lets fix that: Open the linux terminal/command prompt with F9, use root as your username and 1 as your password. Type cd /etc/ssl/certs and press enter. Type wget --no-check-certificate https://curl.haxx.se/ca/cacert.pem and press enter Assuming it downloaded correctly, you can now use wget as nature intended!","title":"Troubleshooting"},{"location":"advanced/troubleshooting/#fixing-missing-certs","text":"If you are unable to wget as instructed above, this might be because you are missing security certificate files. The default system comes with no security certificate files, which is a bit annoying, as you need to add --no-check-certificate on wget to download anything HTTPS. Lets fix that: Open the linux terminal/command prompt with F9, use root as your username and 1 as your password. Type cd /etc/ssl/certs and press enter. Type wget --no-check-certificate https://curl.haxx.se/ca/cacert.pem and press enter Assuming it downloaded correctly, you can now use wget as nature intended!","title":"Fixing missing certs"},{"location":"basics/addons/","text":"Artwork by Hewhoisred MiSTer has various addon boards that are somewhat optional to use such as a 128MB SDRAM add-on board that allows you to use all of the cores on the system and the Analog IO board which enables you to easily connect your MiSTer to a classic CRT telivision or monitor. These boards can be purchased by various sellers online or assembled yourself by ordering the PCB from a PCB manufacturer, buying the components online, and soldering it yourself. Here's a rundown of what some of the current add-on boards are and what they do. 128MB SDRAM Addon Board The 128MB SDRAM Add-on board for MiSTer is essential for multiple cores to even load games. You can alternatively go with a 32MB SDRAM board for a cheaper price, however there are some games on Neo Geo, Game Boy Advance, and a few other cores which might no be compatible if you go with the smaller sized module. When Plugging in the SDRAM Board, make sure to support the DE10-Nano from beneath with your thumbs. Forcing in the SDRAM Board without support can bend the DE10-Nano board and permanently damage it. Removing the SDRAM Board can be tricky for some GPIO connectors and just pulling won't do it sometimes. For very tight connectors, it is recommended to wiggle the SDRAM Board back and forth to remove the connectors slowly, bit-by-bit. Just pulling with force will often bend the GPIO header. USB Hub Addon Board The USB Hub Add-on board for MiSTer has two methods of connecting to your DE10-Nano either via internal headers with a slim external board or with a bridge to connect both MicroUSB ports together. This board provides an OTG USB Hub for the Mister which has one power-only usb port in the back and 6 USB 2.0 ports ont he other 3 sides. It requires power so you may need a power splitter to supply power to both the DE10-Nano and this USB hub. If you use a Digital IO board you will only need a DC to DC jumper cable and a single cable to the Digital IO board's barrel jack in order to power the whole stack. Digital I/O Addon Board Get this board if you want a few more options. It is cheaper than the Analog IO board below typically, and it leaves the 2nd SDRAM slot unoccuppied for the potential future cores which may require it someday. 3 Buttons, Reset, On-Screen Display (OSD), and User (for various user interactions without a keyboard) 3 status LEDs, Power, Disk, and User Secondary MicroSD card slot that may be required by some older computer cores. This is not typical MicroSD storage, think of it as like a little floppy drive. Mini-TOSLINK optical digital audio port. Full size TOSLINK optical digital audio port. User IO Port. This is a port that looks like it is USB 3.0 but it is not! This is actually used for direct serial communication with various peripherals and adapters like SNAC adapters and MT32-Pi . Fan Power header and fan mounting holes for better cooling. Doesn't use the 2nd set of 2x20 headers on the DE10-Nano so it is compatible with Dual SDRAM configurations. Analog I/O Addon Board Get this board instead of the Digital IO Addon board if you want to use your MiSTer for simultaneous video output to a CRT and HDMI monitor. Otherwise the cheaper Digital IO board should be sufficient. 3 Buttons, Reset, On-Screen Display (OSD), and User (for various user interactions without a keyboard) 3 status LEDs, Power, Disk, and User Power On/Off Switch. Barrel jack which can be used to power the DE10-Nano with. Secondary MicroSD card slot that may be required by some older computer cores. This is not typical MicroSD storage, think of it as like a little floppy drive. VGA port for analog video output - See Advanced - CRT for the potential connectivity options. Simultaneous analog video and HDMI video output is possible with this board. Sync-on-green override\\auto switch. 3.5mm analog audio port that is also a Mini-TOSLINK optical digital audio port at the same time. 3.5mm audio-in port for ADC-in (like Tape input for some computer cores). User IO Port. This is a port that looks like it is USB 3.0 but it is not! This is actually used for direct serial communication with various peripherals and adapters like SNAC adapters and MT32-Pi . Fan power header and fan mounting holes for better cooling. Uses the 2nd set of 2x20 headers on the DE10-Nano so it is not compatible with Dual SDRAM configurations. MT32-Pi Lite MiSTer Addon Board MT32-Pi is a baremetal emulator of the Roland MT-32 synth module. This add-on board is Sorgelig's rendition of the new version that utilizes a Raspberry Pi Zero 2 W. This board plugs into the side of the MiSTer into the User IO port on either the Digital IO board or the Analog IO board. Get this board if you want to listen to upgraded Midi sounds in certain cores and games that support it, like the ao486 core or the X68000 core. Here's a video by youtuber MiSTer Walrus FPGA showing off how the MT32-Pi sounds . MT32-Pi Raspberry Pi HAT Addon Board This is a Raspberry Pi HAT add-on board for the MT32-Pi . It is intended to be used with the Raspberry Pi 3A+ due to it's square shape, but the 3B and 4 will work just fine as well. You will also need a short USB Type A 3.0 Male to Male cable if you choose this option. Real Time Clock Addon Board There is a Real Time Clock add-on board. If you want to add a real-time clock to your MiSTer you will require this. Some computer cores use this feature if you are interested in it. ADC Analog Audio Input Addon Board The ADC Add-on board for MiSTer allows you to use either recordings of computer tape audio or actual retro tape players to send data over analog audio into certain computer cores. Where to buy? If you'd like to buy a board from a vendor online (instead of soldering one yourself), the MiSTer FPGA Forums have a Hardware Sellers forum just for that purpose. Here's a list of some hardware sellers from that forum and elsewhere, for your convenience: MiSTerAddons.com (USA) UltimateMiSTer.com (Spain) MiSTerFPGA.co.uk (United Kingdom) AntonioVillena.es (Spain) LegacyPixels.com (USA) OzMiSTerMods.com (Australia) CAMInventions.com (Australia) MiSTerKits.com (USA) ManuFerHi.com (Spain) MiSTer-FPGA.de (Germany) RetroKit.tech (United Kingdom) RetroCastle AliExpress store (China) This is not an official endorsement of these sellers, merely a collection of links. Any hardware failures or shipping failures you have should prompt you to reach out for support from the vendor you purchased your board from first.","title":"Addon Boards"},{"location":"basics/addons/#128mb-sdram-addon-board","text":"The 128MB SDRAM Add-on board for MiSTer is essential for multiple cores to even load games. You can alternatively go with a 32MB SDRAM board for a cheaper price, however there are some games on Neo Geo, Game Boy Advance, and a few other cores which might no be compatible if you go with the smaller sized module. When Plugging in the SDRAM Board, make sure to support the DE10-Nano from beneath with your thumbs. Forcing in the SDRAM Board without support can bend the DE10-Nano board and permanently damage it. Removing the SDRAM Board can be tricky for some GPIO connectors and just pulling won't do it sometimes. For very tight connectors, it is recommended to wiggle the SDRAM Board back and forth to remove the connectors slowly, bit-by-bit. Just pulling with force will often bend the GPIO header.","title":"128MB SDRAM Addon Board"},{"location":"basics/addons/#usb-hub-addon-board","text":"The USB Hub Add-on board for MiSTer has two methods of connecting to your DE10-Nano either via internal headers with a slim external board or with a bridge to connect both MicroUSB ports together. This board provides an OTG USB Hub for the Mister which has one power-only usb port in the back and 6 USB 2.0 ports ont he other 3 sides. It requires power so you may need a power splitter to supply power to both the DE10-Nano and this USB hub. If you use a Digital IO board you will only need a DC to DC jumper cable and a single cable to the Digital IO board's barrel jack in order to power the whole stack.","title":"USB Hub Addon Board"},{"location":"basics/addons/#digital-io-addon-board","text":"Get this board if you want a few more options. It is cheaper than the Analog IO board below typically, and it leaves the 2nd SDRAM slot unoccuppied for the potential future cores which may require it someday. 3 Buttons, Reset, On-Screen Display (OSD), and User (for various user interactions without a keyboard) 3 status LEDs, Power, Disk, and User Secondary MicroSD card slot that may be required by some older computer cores. This is not typical MicroSD storage, think of it as like a little floppy drive. Mini-TOSLINK optical digital audio port. Full size TOSLINK optical digital audio port. User IO Port. This is a port that looks like it is USB 3.0 but it is not! This is actually used for direct serial communication with various peripherals and adapters like SNAC adapters and MT32-Pi . Fan Power header and fan mounting holes for better cooling. Doesn't use the 2nd set of 2x20 headers on the DE10-Nano so it is compatible with Dual SDRAM configurations.","title":"Digital I/O Addon Board"},{"location":"basics/addons/#analog-io-addon-board","text":"Get this board instead of the Digital IO Addon board if you want to use your MiSTer for simultaneous video output to a CRT and HDMI monitor. Otherwise the cheaper Digital IO board should be sufficient. 3 Buttons, Reset, On-Screen Display (OSD), and User (for various user interactions without a keyboard) 3 status LEDs, Power, Disk, and User Power On/Off Switch. Barrel jack which can be used to power the DE10-Nano with. Secondary MicroSD card slot that may be required by some older computer cores. This is not typical MicroSD storage, think of it as like a little floppy drive. VGA port for analog video output - See Advanced - CRT for the potential connectivity options. Simultaneous analog video and HDMI video output is possible with this board. Sync-on-green override\\auto switch. 3.5mm analog audio port that is also a Mini-TOSLINK optical digital audio port at the same time. 3.5mm audio-in port for ADC-in (like Tape input for some computer cores). User IO Port. This is a port that looks like it is USB 3.0 but it is not! This is actually used for direct serial communication with various peripherals and adapters like SNAC adapters and MT32-Pi . Fan power header and fan mounting holes for better cooling. Uses the 2nd set of 2x20 headers on the DE10-Nano so it is not compatible with Dual SDRAM configurations.","title":"Analog I/O Addon Board"},{"location":"basics/addons/#mt32-pi-lite-mister-addon-board","text":"MT32-Pi is a baremetal emulator of the Roland MT-32 synth module. This add-on board is Sorgelig's rendition of the new version that utilizes a Raspberry Pi Zero 2 W. This board plugs into the side of the MiSTer into the User IO port on either the Digital IO board or the Analog IO board. Get this board if you want to listen to upgraded Midi sounds in certain cores and games that support it, like the ao486 core or the X68000 core. Here's a video by youtuber MiSTer Walrus FPGA showing off how the MT32-Pi sounds .","title":"MT32-Pi Lite MiSTer Addon Board"},{"location":"basics/addons/#mt32-pi-raspberry-pi-hat-addon-board","text":"This is a Raspberry Pi HAT add-on board for the MT32-Pi . It is intended to be used with the Raspberry Pi 3A+ due to it's square shape, but the 3B and 4 will work just fine as well. You will also need a short USB Type A 3.0 Male to Male cable if you choose this option.","title":"MT32-Pi Raspberry Pi HAT Addon Board"},{"location":"basics/addons/#real-time-clock-addon-board","text":"There is a Real Time Clock add-on board. If you want to add a real-time clock to your MiSTer you will require this. Some computer cores use this feature if you are interested in it.","title":"Real Time Clock Addon Board"},{"location":"basics/addons/#adc-analog-audio-input-addon-board","text":"The ADC Add-on board for MiSTer allows you to use either recordings of computer tape audio or actual retro tape players to send data over analog audio into certain computer cores.","title":"ADC Analog Audio Input Addon Board"},{"location":"basics/addons/#where-to-buy","text":"If you'd like to buy a board from a vendor online (instead of soldering one yourself), the MiSTer FPGA Forums have a Hardware Sellers forum just for that purpose. Here's a list of some hardware sellers from that forum and elsewhere, for your convenience: MiSTerAddons.com (USA) UltimateMiSTer.com (Spain) MiSTerFPGA.co.uk (United Kingdom) AntonioVillena.es (Spain) LegacyPixels.com (USA) OzMiSTerMods.com (Australia) CAMInventions.com (Australia) MiSTerKits.com (USA) ManuFerHi.com (Spain) MiSTer-FPGA.de (Germany) RetroKit.tech (United Kingdom) RetroCastle AliExpress store (China) This is not an official endorsement of these sellers, merely a collection of links. Any hardware failures or shipping failures you have should prompt you to reach out for support from the vendor you purchased your board from first.","title":"Where to buy?"},{"location":"basics/bluetooth/","text":"Bluetooth adapters and using controllers over bluetooth is supported on the MiSTer. Compatible adapters Generally speaking, most bluetooth 4.0 adapters use one of two similar chips, the CSR8510 and the BCM20702, and these are compatible. Bluetooth 5.0 adapters are a little different, but many are compatible as well. Here is a list of a few known compatible adapters: ASUS USB-BT500 (5.0) Edimax BT-8500 (5.0) MiSTerAddons.com's Bluetooth 4.2 / WiFi AC600 Combo Adapter MiSTerFPGA.co.uk's CSR8510 Bluetooth 4.0 Adapter Ultimatemister.com's CSR8510 Bluetooth 4.0 Adapter MiSTerKits.com's CSR8510 Bluetooth 4.0 Adapter ZEXMTE Long Range USB Bluetooth (5.0) There are many more that work than these few. Please note that some hardware revisions may change the compatibility of even the adapters in this list, your results may vary. For the most part, most adapters seem to work fine. How to pair your Bluetooth controller or Keyboard This is the easy part. Simply press the F11 key on a keyboard that is already connected to the MiSTer and the pairing menu will pop up. Put your controller into pairing mode and wait. The MiSTer should find it momentarily and connect to it. You may need to define your inputs for this new controller, even if it's been plugged directly into the MiSTer before as it is seen as a different controller over bluetooth.","title":"Bluetooth"},{"location":"basics/bluetooth/#compatible-adapters","text":"Generally speaking, most bluetooth 4.0 adapters use one of two similar chips, the CSR8510 and the BCM20702, and these are compatible. Bluetooth 5.0 adapters are a little different, but many are compatible as well. Here is a list of a few known compatible adapters: ASUS USB-BT500 (5.0) Edimax BT-8500 (5.0) MiSTerAddons.com's Bluetooth 4.2 / WiFi AC600 Combo Adapter MiSTerFPGA.co.uk's CSR8510 Bluetooth 4.0 Adapter Ultimatemister.com's CSR8510 Bluetooth 4.0 Adapter MiSTerKits.com's CSR8510 Bluetooth 4.0 Adapter ZEXMTE Long Range USB Bluetooth (5.0) There are many more that work than these few. Please note that some hardware revisions may change the compatibility of even the adapters in this list, your results may vary. For the most part, most adapters seem to work fine.","title":"Compatible adapters"},{"location":"basics/bluetooth/#how-to-pair-your-bluetooth-controller-or-keyboard","text":"This is the easy part. Simply press the F11 key on a keyboard that is already connected to the MiSTer and the pairing menu will pop up. Put your controller into pairing mode and wait. The MiSTer should find it momentarily and connect to it. You may need to define your inputs for this new controller, even if it's been plugged directly into the MiSTer before as it is seen as a different controller over bluetooth.","title":"How to pair your Bluetooth controller or Keyboard"},{"location":"basics/case/","text":"There are multiple MiSTer FPGA cases available to you. From DIY cases made out of project boxes, to retro-fitting an old computer or console injection molded case, even 3d printing your own, and manufactured aluminum heatsink cases... There are plenty of choices. Remember, you can be creative and have fun with your case design of choice. Get some ideas If you are wanting to make your own case you might want some ideas. There is an excellent \"Show us your MiSTer\" thread up on the MiSTer FPGA official forums that you should take a look at if you are thinking of coming up with something creative. That thread has both store-bought and custom-build MiSTer's on display. 3d Printed Designs There are lots of 3d Printed cases on the internet. Here are some generic ones that may interest you if you have a 3d printer: jaddel's simple de10-nano case with a fan mount and user buttons misteraddons.com's early design hackerjack42's addendum to misteraddon.com's early design above pjtonge's Atari Computer styled case for the de10-nano + usb hub 2.1 onaluf's unique case design for the 3 board MiSTer FPGA sandwich Zemciko's Atari 800XE computer inspired case design Yurif74's AjSTer case that uses the A-JAZZ AK33 keyboard for a retro computer style leejsmith's unique computer wedge case As you can see, a 3d Printer can give you a lot of flexibility in designing your own case. Laser-cut designs There are both some open source and some for-sale laser cut case designs that may be of interest to you. Here are a few: zerohimself's top and bottom laser-cut plates design RnSKSkunkwerks laser cut RSK202/R plates RnSKSkunkwerks laser cut star wars inspired plates","title":"Cases"},{"location":"basics/case/#get-some-ideas","text":"If you are wanting to make your own case you might want some ideas. There is an excellent \"Show us your MiSTer\" thread up on the MiSTer FPGA official forums that you should take a look at if you are thinking of coming up with something creative. That thread has both store-bought and custom-build MiSTer's on display.","title":"Get some ideas"},{"location":"basics/case/#3d-printed-designs","text":"There are lots of 3d Printed cases on the internet. Here are some generic ones that may interest you if you have a 3d printer: jaddel's simple de10-nano case with a fan mount and user buttons misteraddons.com's early design hackerjack42's addendum to misteraddon.com's early design above pjtonge's Atari Computer styled case for the de10-nano + usb hub 2.1 onaluf's unique case design for the 3 board MiSTer FPGA sandwich Zemciko's Atari 800XE computer inspired case design Yurif74's AjSTer case that uses the A-JAZZ AK33 keyboard for a retro computer style leejsmith's unique computer wedge case As you can see, a 3d Printer can give you a lot of flexibility in designing your own case.","title":"3d Printed Designs"},{"location":"basics/case/#laser-cut-designs","text":"There are both some open source and some for-sale laser cut case designs that may be of interest to you. Here are a few: zerohimself's top and bottom laser-cut plates design RnSKSkunkwerks laser cut RSK202/R plates RnSKSkunkwerks laser cut star wars inspired plates","title":"Laser-cut designs"},{"location":"basics/cd/","text":"MiSTer supports Cue/Bin and CHD formats. The way the MiSTer handles CD-based ROMs and images is fairly simple. There are some specifics that need to be described about how the MiSTer handles CDs. Will MiSTer ever support USB CD Drives? The short answer is no . The long answer is that 1) there is too much hardware variation in CD drives and the drivers that go with them for it to be worth it and 2) everything added to the Linux image and Main binary for the MiSTer have to be very carefully considered as the goal is to keep it lightweight and not bloated. CD Drive support is not a priority, as properly dumped CD-ROM images are bit-perfect where it counts (excluding randomized subchannel data and garbage data fill-in). Cue/Bin Folders and CHD files If you are using cue/bin files, then you need to place them in their own folder separate from the other cue/bin ROMs. Currently every CD-based core supports cue/bin. CHD files are a compressed CD image format that is also supported by almost every CD-based core. CHD files don't need to be placed in their own folder separate from each other.","title":"CD-based ROMs"},{"location":"basics/cd/#will-mister-ever-support-usb-cd-drives","text":"The short answer is no . The long answer is that 1) there is too much hardware variation in CD drives and the drivers that go with them for it to be worth it and 2) everything added to the Linux image and Main binary for the MiSTer have to be very carefully considered as the goal is to keep it lightweight and not bloated. CD Drive support is not a priority, as properly dumped CD-ROM images are bit-perfect where it counts (excluding randomized subchannel data and garbage data fill-in).","title":"Will MiSTer ever support USB CD Drives?"},{"location":"basics/cd/#cuebin-folders-and-chd-files","text":"If you are using cue/bin files, then you need to place them in their own folder separate from the other cue/bin ROMs. Currently every CD-based core supports cue/bin. CHD files are a compressed CD image format that is also supported by almost every CD-based core. CHD files don't need to be placed in their own folder separate from each other.","title":"Cue/Bin Folders and CHD files"},{"location":"basics/faq/","text":"Here are some Frequently Asked Questions that you may have. If there is anything missing here, feel free to contribute by editing the page on github using the Edit pen icon in the top right. When will MiSTer support cartridges? MiSTer will never use physical cartridges. The project aims to replace the need for having original hardware for the same experience. It is also physically impractical/impossible given the number of GPIO pins available from the FPGA. Does MiSTer have lag? It depends on your setup, but it ranges from imperceptibly low to around one frame of lag. Zero latency is possible with certain equipment and tweaks. See here for a more detailed explanation. I've seen in the news, \"Update Framework\". What does that mean? The 'framework' is all the common elements between cores that handle things like IO, video scaling, etc. Can I use original console controllers? Yes, there are many USB adapters for original console controllers. They can also be connected directly via the IO board as detailed below. What about light guns? Light guns such as the NES Zapper are too timing sensitive to work over USB, but will work fine on supported cores via the IO board as detailed below. Any USB controller recommendations? Almost any controller that uses USB will work with MiSTer. You can also use a Bluetooth or 2.4ghz USB adapter for wireless. Good controllers that many users seem to like and have low input latency are: Sony DualSense (PS5 Controller) - Very low lag, fast pairing, and a touchpad that can be used as mouse input (for cores with mouse support, like SNES lightgun use or a mouse as a spinner control). 8BitDo M30 Bluetooth and 8BitDoM30 2.4G - Note these kinds of controllers do not have as many buttons as the Playstation style controllers, and they do not have joysticks, so you may be limited if you solely use them. 8bitDo SN30 Pro 2 - Versatile connectivity and confortable design that is similar to the Playstation DualShock form factor with an SNES aesthetic and button layout. 8bitDo Arcade Stick - Wired and wireless low lag functionality with somewhat low variable lag, DIY customizable pushbuttons and joystick is also supported. iBuffalo SNES Controller - A little overpriced now, but it is one of the lowest lag controllers tested. And many many more. Check MiSTerAddons' input latency tests to help you decide. Also to ensure you get the fastest response make sure to check the USB overclock instructions section out. There are also some excellent usb controller adapters which enable you to use original console controllers: Timville Triple Controller Daemonbite - A spinoff of MickGuyver's Daemonbite adapters that has support for NES, Genesis, and SNES original hardware. You can also make it yourself using instructions found here . There is an option to purchase a 3d printed housing that you can also print yourself using the 3d files from here . MickGuyver's Daemonbite adapters - Very low latency adapters, often low supply and sold out however. Can build them yourself using instructions found here and here . 2600-daptor D9 - Lowest latency \"controller\" in the MiSTerAddons input latency tests . Can I increase the polling rate of my USB controller to improve input latency? Yes, you can. See here . Do I need the official USB Hub Add-On Board? No, but you will probably want some sort of inexpensive OTG hub at least (or a regular hub with an adapter). Use a powered hub if you have many devices. Do I need to have a USB keyboard with me to use MiSTer? Yes, it's a good idea to always have a USB keyboard available. Cheap wireless keyboards exist that you can use to reduce clutter. How do I add a second controller to MiSTer? First setup the controller in the main menu after plugging it in with no core loaded. Then you can define it in the various cores' OSD menus. This is only necessary if the controller is a different make/model (or has a different VendorID/ProductID) than any other controllers you have already defined. If you have already setup a Dualshock 4 controller, the second Dualshock 4 controller shouldn't need it's inputs to be defined again. Because of this, shared VendorID's and ProductID's between devices that are different may require reconfiguration when switching between them. There isn't any way around this currently. This includes using 8BitDo and Mayflash controller adapters with multiple controllers, as the adapters contain the ID information which is referenced. Does MiSTer need an IO board? No. The IO board is optional, but offers features that could be important for some users (3.5mm and optical audio, CRT output, tape audio input, etc). What are the methods for connecting controllers to the serial port of the IO add-on board? SNAC (Serial Native Accessory Converter) is used for direct wiring. Supporting cores (SNES, Genesis, NES, and TG16) allow you to directly connect original controllers. See this page for details on SNAC. Do I need an IO board to get analog video output to my CRT? No. You can use an HDMI to VGA adapter to do it instead. See Direct Video . Is MiSTer hard to set up? Is it really only for technical people who like to tinker? No and no, but those who enjoy tinkering can get a lot extra out of their MiSTer if they wish. The minimum setup only requires attaching a memory board to a DE-10 Nano and making an SD card. See the Setup Guide for more information. Which cores require SDRAM? You can find the updated list at the Console Cores and Computer Cores sections. Many Arcade cores use SDRAM as well. Why does the NES core require an SDRAM add-on board when the Genesis core does not? The Genesis has graphics RAM and stores data that is copied from the cartridge ROM. The NES does not do this, and typically accesses the ROM directly for the data which requires much tighter timings. Using the SDRAM board on the NES core allows meeting these timing requirements. Does my MiSTer need cooling? Yes, you will want at least a heatsink (passive cooling). 22mm x 22mm is the ideal size. 20mm x 20mm is more than enough however and is more common. Active cooling with a fan helps but is not strictly required. Some faster cores like ao486 or PSX may generate a lot of heat. What power supply is compatible with MiSTer? The DE10-Nano board needs a 5V power supply with at least 2A. The connector is a coaxial \"barrel\" plug of 5.5 mm outer diameter and 2.1 mm inner diameter, center positive. If you are using a USB Hub addon board and have a lot of power hungry peripherals attached to it (wifi, bluetooth, multiple controllers, a mechanical hard drive), it might be a good idea to upgrade to a similar 5v power supply, but with more amps (4A-5A). Typically this is only needed if you have a mechanical hard drive, are heavily using the charging port, or have an MT32-Pi powered by the serial IO user port as these draw a good amount of amps. My MiSTer needs a case. What should I do? There are two routes you can take; either make it yourself or purchase a case from an online vendor. For DiY, you can find the necessary 3D print files online (e.g. thingiverse ). What kind of screws do I use with the DE-10 Nano's 14mm long brass standoffs? M3 screws, 8mm is a good length. How do I set up MiSTer for 1080p, shimmer free gameplay? Run the updater script and use one of the video presets + filters that come with it in the Video Processing menu on the secondary OSD. See Video Configuration for more specific information. How do I get the scanlines filters on my MiSTer to look good? You will need to set the device to integer scaling for best results. Either set vscale_mode=1 in mister.ini or use the vscale integer settings within the core itself (as well as 5x) if they are supported. Not all cores support the OSD options to do integer scaling. \"Integer scaling\" is when your source resolution (240p) is divided into your target resolution (1080p) using only whole numbers (e.g. 1, 2, 3, 4...). This means if you use integer scaling with the MiSTer set to a 1080p resolution in the MiSTer.ini, and the core you are using natively outputs 240p, then the image will be scaled 4x which 4 times 240 equals 960. This leaves a black border for the remaining 80 pixels distributed across the top and bottom the screen. You can play with other settings if you want the scaler to fill the screen, but scanlines won't be \"perfect\" unless the source resolution (e.g. 240p) divides evenly into the target resolution (e.g. 1200p at 5x scaling). I have a 4k or other higher than 1080p display, does MiSTer support that resolution? I'd like to enjoy better video scaling. MiSTer can't quite reach 4k. Edit mister.ini on your SD card to change resolutions, e.g. video_mode=12 for 1440p or video_mode=13 for 1536p (hardware maximum). Compatibility with these higher resolutions may depend upon your display and signal chain. How does the accuracy level of various MiSTer cores compare to other FPGA options? Most MiSTer cores are just as, if not more accurate, as any of the other major FPGA offerings available today. Most people would not able to tell the difference between these cores and the original hardware. Will any MiSTer core ever get save states? The Gameboy, GBA, Lynx, and NES core supports save states. Cores need to be written from scratch to support them (as was done with the GBA and Lynx cores) or they need to be reworked to support pause before save states can be added (as was done with the Gameboy and NES cores). At this time there are no specific plans to apply this to other cores, but it may happen one day. Why doesn\u2019t this core from another repo work? Why is MiSTer so hard to use? MiSTer repositories are self contained and the official updater script only fetches cores from the active official MiSTer repositories. Cores from other repos are not fully integrated so your results may vary. Some developers have their own discord servers or forums and you can seek support there. When is an N64 core coming? Probably never. There isn\u2019t really sufficient bandwidth. When is PlayStation core coming? It's almost here. It is currently in an open beta stage and nearing completion rapidly. To assist in testing please join the MiSTer FPGA discord server and read the pins in the #psx-core-testing channel before submitting a bug report. Other cores work but I get a black screen for this one. What do I do? Try setting vsync to 0 as your display may not support all refresh rates. (Note that this was the default setting.) My CD games don\u2019t work! Help! Unzip them. Do not zip CD games. Also put them in iso/wav/bin/img + cue format. What version of the CD card bios do I need for TG16 CD? Use Japanese version 3.0. You will commonly find it with filename: Super CD-ROM System (Japan) (v3.0).pce How do I make MisTer boot into the NES core and a specific game? You need to use two different options: autobooting a core, and starting the core on a given ROM. Here is how: In the .INI file, set bootcore=NES_20201102.rbf (or the specific core version you have), and comment out ;bootcore_timeout . Then on your NES games folder (e.g. /media/fat/games/NES/ , copy the FDS bios as boot0.rom , and your .NES rom to boot as boot1.rom . For more options, please refer to the NES core documentation I heard the DE10-Nano board uses subsidized components. Is MiSTer doomed if that stops? De10-Nano is manufactured in very large scale for use by students and is widely available. When it reaches end of life, the open source cores and infrastructure will be ported to another widely available board. I see a defect that some other people aren\u2019t seeing. Should I get a different DE-10 Nano? No, you should report the defect and wait for a fix. There is no magical best DE-10 Nano. I found some other Cyclone based dev board on sale and it has built in WiFi. Can I use it for MiSTer? Generally, no. While it\u2019s always possible that someone will take time to port things to other boards, the different pins and memory will mean it won\u2019t be a straight use and unless it\u2019s a significant upgrade, it would never gain official support. The DE-10 is rated for up to 100\u00b0C operation and it doesn\u2019t get nearly that hot. Do I really need a fan or heatsink? A number of complex cores (like ao486) benefit from having the chip at cooler temperatures, since heat can affect the tight timings they require. A fan is recommended to avoid any possible glitches, but you won't damage your DE10-Nano if you choose not to use one. Can you take screenshots on the MiSTer? You can take screenshots on the MiSTer very easily. All you have to do is press Win + Print Screen on your keyboard and you will get an upscaled screenshot. For raw output from the core (which may be distorted or in a weird aspect ratio) prese Shift + Win + Print Screen . The screenshots are stored in ./screenshots in a folder named after the core you took the screenshot in. These screenshots do include the effects of any video processing options, they are very simple. To take screenshots of the full video processing (i.e. the image you see on your modern screen when using the MiSTer) you will need to use some kind of capture card that supports the desired resolution. Here is an example of a raw screenshot from the NES core Here is an example of an upscaled screenshot from the Neo Geo core Why use FPGA when other proven solutions exist, such as Raspberry Pi? The following was originally written by Sorgelig, founder of MiSTer FPGA There are debates about how to refer to the process of simulating real hardware using FPGA. Some people insist it's not emulation but rather true hardware replication, while any simulation using a traditional CPU should be referred to as emulation. I have my own opinion here. :) From my point of view, if the FPGA code is based on the circuitry of real hardware (along with the usual tweaks for FPGA compatibility), then it should be called replication . Anything else is emulation , since it uses different kinds of approximation to meet the same objectives. Currently, it's hard to find a core that can truly be called a replica \u2013 most cores are based on more-or-less functional recreations rather than true circuit recreation. The most widely used CPU cores \u2013 the Z80 (T80) and MC68000 (TG68K) \u2013 are pure functional emulations, not replications. So it's okay to call FPGA cores emulators, unless they are proven to be replicas. To go back to the original question, then, why FPGA, if it's also just emulation? Well, FPGA emulation is fundamentally different than emulation on a CPU. Traditional emulators on CPUs execute code sequentially. This is a tricky method of emulation because real hardware has many chips and all of them work in parallel. The CPU, video chip/logic, audio chip, memory arbiter \u2013 all of them are working at the same time. So a traditional emulator has to take care of all these parts and try to emulate the whole orchestra at the same time by quickly \"running\" from one chip to another. This requires a lot of CPU power to emulate even an old and slow retro computer. Sometimes even a modern CPU working at 100 times the speed of the retro computer is not enough, so the emulator has to use approximation, skip emulation of some less important parts, or assume some standard work of the emulated system without extraordinary usage. Let's take a well-known emulator, UAE, emulating an Amiga. On a Raspberry Pi 3, you can run some Amiga CPU benchmarks and get crazy numbers like 100 times the original 68000 processor. So you may assume you have an emulated Amiga that is 100 times faster than real one. No, you don't. If you run different kinds of demos or games, you will see the video stutters sometimes. For example, if you play the well-known \"State of The Art\" demo by Spaceballs, you will notice video stuttering at some points, while a real Amiga 600 with 1x CPU speed plays the whole demo very smoothly. This is how traditional emulators on Raspberry Pi work. FPGA emulation works very differently from traditional emulation on CPU. An FPGA is a large array of simple triggers and other logic \u2013 just like any other chip/CPU. The only difference is that specific chips/CPUs have these triggers and logic permanently connected, while FPGA allows you to connect them however you want. A special HDL (hardware description language) describes how to connect all these triggers/logic cells. Everything in FPGA works in parallel like in the original chips/devices. Thus, FPGA is pretty close to the original hardware. FPGA doesn't need high frequencies to emulate retro computers; it works at much lower frequencies than traditional emulators require. Since everything in FPGA works in parallel, it is no problem to handle any possible usage of the emulated system. Developers using FPGA usually concentrate on the specific part to make it work correctly \u2013 and it will work as it should in any possible scenario. In the same reference demo, \"State Of the Art,\" using FPGA emulation, you can see smooth video through the whole playback, as on the original hardware. You may want to ask, \"So why not make all emulators on FPGA then?\" The answer is: FPGA programming is not so trivial. Every bit in FPGA works in parallel, so the developer needs to think in parallel as well :). What is trivial on CPU is not trivial on FPGA \u2013 although some parts that are trivial on FPGA cost a lot in CPU code.","title":"FAQ"},{"location":"basics/faq/#when-will-mister-support-cartridges","text":"MiSTer will never use physical cartridges. The project aims to replace the need for having original hardware for the same experience. It is also physically impractical/impossible given the number of GPIO pins available from the FPGA.","title":"When will MiSTer support cartridges?"},{"location":"basics/faq/#does-mister-have-lag","text":"It depends on your setup, but it ranges from imperceptibly low to around one frame of lag. Zero latency is possible with certain equipment and tweaks. See here for a more detailed explanation.","title":"Does MiSTer have lag?"},{"location":"basics/faq/#ive-seen-in-the-news-update-framework-what-does-that-mean","text":"The 'framework' is all the common elements between cores that handle things like IO, video scaling, etc.","title":"I've seen in the news, \"Update Framework\".  What does that mean?"},{"location":"basics/faq/#can-i-use-original-console-controllers","text":"Yes, there are many USB adapters for original console controllers. They can also be connected directly via the IO board as detailed below.","title":"Can I use original console controllers?"},{"location":"basics/faq/#what-about-light-guns","text":"Light guns such as the NES Zapper are too timing sensitive to work over USB, but will work fine on supported cores via the IO board as detailed below.","title":"What about light guns?"},{"location":"basics/faq/#any-usb-controller-recommendations","text":"Almost any controller that uses USB will work with MiSTer. You can also use a Bluetooth or 2.4ghz USB adapter for wireless. Good controllers that many users seem to like and have low input latency are: Sony DualSense (PS5 Controller) - Very low lag, fast pairing, and a touchpad that can be used as mouse input (for cores with mouse support, like SNES lightgun use or a mouse as a spinner control). 8BitDo M30 Bluetooth and 8BitDoM30 2.4G - Note these kinds of controllers do not have as many buttons as the Playstation style controllers, and they do not have joysticks, so you may be limited if you solely use them. 8bitDo SN30 Pro 2 - Versatile connectivity and confortable design that is similar to the Playstation DualShock form factor with an SNES aesthetic and button layout. 8bitDo Arcade Stick - Wired and wireless low lag functionality with somewhat low variable lag, DIY customizable pushbuttons and joystick is also supported. iBuffalo SNES Controller - A little overpriced now, but it is one of the lowest lag controllers tested. And many many more. Check MiSTerAddons' input latency tests to help you decide. Also to ensure you get the fastest response make sure to check the USB overclock instructions section out. There are also some excellent usb controller adapters which enable you to use original console controllers: Timville Triple Controller Daemonbite - A spinoff of MickGuyver's Daemonbite adapters that has support for NES, Genesis, and SNES original hardware. You can also make it yourself using instructions found here . There is an option to purchase a 3d printed housing that you can also print yourself using the 3d files from here . MickGuyver's Daemonbite adapters - Very low latency adapters, often low supply and sold out however. Can build them yourself using instructions found here and here . 2600-daptor D9 - Lowest latency \"controller\" in the MiSTerAddons input latency tests .","title":"Any USB controller recommendations?"},{"location":"basics/faq/#can-i-increase-the-polling-rate-of-my-usb-controller-to-improve-input-latency","text":"Yes, you can. See here .","title":"Can I increase the polling rate of my USB controller to improve input latency?"},{"location":"basics/faq/#do-i-need-the-official-usb-hub-add-on-board","text":"No, but you will probably want some sort of inexpensive OTG hub at least (or a regular hub with an adapter). Use a powered hub if you have many devices.","title":"Do I need the official USB Hub Add-On Board?"},{"location":"basics/faq/#do-i-need-to-have-a-usb-keyboard-with-me-to-use-mister","text":"Yes, it's a good idea to always have a USB keyboard available. Cheap wireless keyboards exist that you can use to reduce clutter.","title":"Do I need to have a USB keyboard with me to use MiSTer?"},{"location":"basics/faq/#how-do-i-add-a-second-controller-to-mister","text":"First setup the controller in the main menu after plugging it in with no core loaded. Then you can define it in the various cores' OSD menus. This is only necessary if the controller is a different make/model (or has a different VendorID/ProductID) than any other controllers you have already defined. If you have already setup a Dualshock 4 controller, the second Dualshock 4 controller shouldn't need it's inputs to be defined again. Because of this, shared VendorID's and ProductID's between devices that are different may require reconfiguration when switching between them. There isn't any way around this currently. This includes using 8BitDo and Mayflash controller adapters with multiple controllers, as the adapters contain the ID information which is referenced.","title":"How do I add a second controller to MiSTer?"},{"location":"basics/faq/#does-mister-need-an-io-board","text":"No. The IO board is optional, but offers features that could be important for some users (3.5mm and optical audio, CRT output, tape audio input, etc).","title":"Does MiSTer need an IO board?"},{"location":"basics/faq/#what-are-the-methods-for-connecting-controllers-to-the-serial-port-of-the-io-add-on-board","text":"SNAC (Serial Native Accessory Converter) is used for direct wiring. Supporting cores (SNES, Genesis, NES, and TG16) allow you to directly connect original controllers. See this page for details on SNAC.","title":"What are the methods for connecting controllers to the serial port of the IO add-on board?"},{"location":"basics/faq/#do-i-need-an-io-board-to-get-analog-video-output-to-my-crt","text":"No. You can use an HDMI to VGA adapter to do it instead. See Direct Video .","title":"Do I need an IO board to get analog video output to my CRT?"},{"location":"basics/faq/#is-mister-hard-to-set-up-is-it-really-only-for-technical-people-who-like-to-tinker","text":"No and no, but those who enjoy tinkering can get a lot extra out of their MiSTer if they wish. The minimum setup only requires attaching a memory board to a DE-10 Nano and making an SD card. See the Setup Guide for more information.","title":"Is MiSTer hard to set up? Is it really only for technical people who like to tinker?"},{"location":"basics/faq/#which-cores-require-sdram","text":"You can find the updated list at the Console Cores and Computer Cores sections. Many Arcade cores use SDRAM as well.","title":"Which cores require SDRAM?"},{"location":"basics/faq/#why-does-the-nes-core-require-an-sdram-add-on-board-when-the-genesis-core-does-not","text":"The Genesis has graphics RAM and stores data that is copied from the cartridge ROM. The NES does not do this, and typically accesses the ROM directly for the data which requires much tighter timings. Using the SDRAM board on the NES core allows meeting these timing requirements.","title":"Why does the NES core require an SDRAM add-on board when the Genesis core does not?"},{"location":"basics/faq/#does-my-mister-need-cooling","text":"Yes, you will want at least a heatsink (passive cooling). 22mm x 22mm is the ideal size. 20mm x 20mm is more than enough however and is more common. Active cooling with a fan helps but is not strictly required. Some faster cores like ao486 or PSX may generate a lot of heat.","title":"Does my MiSTer need cooling?"},{"location":"basics/faq/#what-power-supply-is-compatible-with-mister","text":"The DE10-Nano board needs a 5V power supply with at least 2A. The connector is a coaxial \"barrel\" plug of 5.5 mm outer diameter and 2.1 mm inner diameter, center positive. If you are using a USB Hub addon board and have a lot of power hungry peripherals attached to it (wifi, bluetooth, multiple controllers, a mechanical hard drive), it might be a good idea to upgrade to a similar 5v power supply, but with more amps (4A-5A). Typically this is only needed if you have a mechanical hard drive, are heavily using the charging port, or have an MT32-Pi powered by the serial IO user port as these draw a good amount of amps.","title":"What power supply is compatible with MiSTer?"},{"location":"basics/faq/#my-mister-needs-a-case-what-should-i-do","text":"There are two routes you can take; either make it yourself or purchase a case from an online vendor. For DiY, you can find the necessary 3D print files online (e.g. thingiverse ).","title":"My MiSTer needs a case. What should I do?"},{"location":"basics/faq/#what-kind-of-screws-do-i-use-with-the-de-10-nanos-14mm-long-brass-standoffs","text":"M3 screws, 8mm is a good length.","title":"What kind of screws do I use with the DE-10 Nano's 14mm long brass standoffs?"},{"location":"basics/faq/#how-do-i-set-up-mister-for-1080p-shimmer-free-gameplay","text":"Run the updater script and use one of the video presets + filters that come with it in the Video Processing menu on the secondary OSD. See Video Configuration for more specific information.","title":"How do I set up MiSTer for 1080p, shimmer free gameplay?"},{"location":"basics/faq/#how-do-i-get-the-scanlines-filters-on-my-mister-to-look-good","text":"You will need to set the device to integer scaling for best results. Either set vscale_mode=1 in mister.ini or use the vscale integer settings within the core itself (as well as 5x) if they are supported. Not all cores support the OSD options to do integer scaling. \"Integer scaling\" is when your source resolution (240p) is divided into your target resolution (1080p) using only whole numbers (e.g. 1, 2, 3, 4...). This means if you use integer scaling with the MiSTer set to a 1080p resolution in the MiSTer.ini, and the core you are using natively outputs 240p, then the image will be scaled 4x which 4 times 240 equals 960. This leaves a black border for the remaining 80 pixels distributed across the top and bottom the screen. You can play with other settings if you want the scaler to fill the screen, but scanlines won't be \"perfect\" unless the source resolution (e.g. 240p) divides evenly into the target resolution (e.g. 1200p at 5x scaling).","title":"How do I get the scanlines filters on my MiSTer to look good?"},{"location":"basics/faq/#i-have-a-4k-or-other-higher-than-1080p-display-does-mister-support-that-resolution-id-like-to-enjoy-better-video-scaling","text":"MiSTer can't quite reach 4k. Edit mister.ini on your SD card to change resolutions, e.g. video_mode=12 for 1440p or video_mode=13 for 1536p (hardware maximum). Compatibility with these higher resolutions may depend upon your display and signal chain.","title":"I have a 4k or other higher than 1080p display, does MiSTer support that resolution?  I'd like to enjoy better video scaling."},{"location":"basics/faq/#how-does-the-accuracy-level-of-various-mister-cores-compare-to-other-fpga-options","text":"Most MiSTer cores are just as, if not more accurate, as any of the other major FPGA offerings available today. Most people would not able to tell the difference between these cores and the original hardware.","title":"How does the accuracy level of various MiSTer cores compare to other FPGA options?"},{"location":"basics/faq/#will-any-mister-core-ever-get-save-states","text":"The Gameboy, GBA, Lynx, and NES core supports save states. Cores need to be written from scratch to support them (as was done with the GBA and Lynx cores) or they need to be reworked to support pause before save states can be added (as was done with the Gameboy and NES cores). At this time there are no specific plans to apply this to other cores, but it may happen one day.","title":"Will any MiSTer core ever get save states?"},{"location":"basics/faq/#why-doesnt-this-core-from-another-repo-work-why-is-mister-so-hard-to-use","text":"MiSTer repositories are self contained and the official updater script only fetches cores from the active official MiSTer repositories. Cores from other repos are not fully integrated so your results may vary. Some developers have their own discord servers or forums and you can seek support there.","title":"Why doesn\u2019t this core from another repo work? Why is MiSTer so hard to use?"},{"location":"basics/faq/#when-is-an-n64-core-coming","text":"Probably never. There isn\u2019t really sufficient bandwidth.","title":"When is an N64 core coming?"},{"location":"basics/faq/#when-is-playstation-core-coming","text":"It's almost here. It is currently in an open beta stage and nearing completion rapidly. To assist in testing please join the MiSTer FPGA discord server and read the pins in the #psx-core-testing channel before submitting a bug report.","title":"When is PlayStation core coming?"},{"location":"basics/faq/#other-cores-work-but-i-get-a-black-screen-for-this-one-what-do-i-do","text":"Try setting vsync to 0 as your display may not support all refresh rates. (Note that this was the default setting.)","title":"Other cores work but I get a black screen for this one. What do I do?"},{"location":"basics/faq/#my-cd-games-dont-work-help","text":"Unzip them. Do not zip CD games. Also put them in iso/wav/bin/img + cue format.","title":"My CD games don\u2019t work! Help!"},{"location":"basics/faq/#what-version-of-the-cd-card-bios-do-i-need-for-tg16-cd","text":"Use Japanese version 3.0. You will commonly find it with filename: Super CD-ROM System (Japan) (v3.0).pce","title":"What version of the CD card bios do I need for TG16 CD?"},{"location":"basics/faq/#how-do-i-make-mister-boot-into-the-nes-core-and-a-specific-game","text":"You need to use two different options: autobooting a core, and starting the core on a given ROM. Here is how: In the .INI file, set bootcore=NES_20201102.rbf (or the specific core version you have), and comment out ;bootcore_timeout . Then on your NES games folder (e.g. /media/fat/games/NES/ , copy the FDS bios as boot0.rom , and your .NES rom to boot as boot1.rom . For more options, please refer to the NES core documentation","title":"How do I make MisTer boot into the NES core and a specific game?"},{"location":"basics/faq/#i-heard-the-de10-nano-board-uses-subsidized-components-is-mister-doomed-if-that-stops","text":"De10-Nano is manufactured in very large scale for use by students and is widely available. When it reaches end of life, the open source cores and infrastructure will be ported to another widely available board.","title":"I heard the DE10-Nano board uses subsidized components. Is MiSTer doomed if that stops?"},{"location":"basics/faq/#i-see-a-defect-that-some-other-people-arent-seeing-should-i-get-a-different-de-10-nano","text":"No, you should report the defect and wait for a fix. There is no magical best DE-10 Nano.","title":"I see a defect that some other people aren\u2019t seeing. Should I get a different DE-10 Nano?"},{"location":"basics/faq/#i-found-some-other-cyclone-based-dev-board-on-sale-and-it-has-built-in-wifi-can-i-use-it-for-mister","text":"Generally, no. While it\u2019s always possible that someone will take time to port things to other boards, the different pins and memory will mean it won\u2019t be a straight use and unless it\u2019s a significant upgrade, it would never gain official support.","title":"I found some other Cyclone based dev board on sale and it has built in WiFi. Can I use it for MiSTer?"},{"location":"basics/faq/#the-de-10-is-rated-for-up-to-100c-operation-and-it-doesnt-get-nearly-that-hot-do-i-really-need-a-fan-or-heatsink","text":"A number of complex cores (like ao486) benefit from having the chip at cooler temperatures, since heat can affect the tight timings they require. A fan is recommended to avoid any possible glitches, but you won't damage your DE10-Nano if you choose not to use one.","title":"The DE-10 is rated for up to 100\u00b0C operation and it doesn\u2019t get nearly that hot.  Do I really need a fan or heatsink?"},{"location":"basics/faq/#can-you-take-screenshots-on-the-mister","text":"You can take screenshots on the MiSTer very easily. All you have to do is press Win + Print Screen on your keyboard and you will get an upscaled screenshot. For raw output from the core (which may be distorted or in a weird aspect ratio) prese Shift + Win + Print Screen . The screenshots are stored in ./screenshots in a folder named after the core you took the screenshot in. These screenshots do include the effects of any video processing options, they are very simple. To take screenshots of the full video processing (i.e. the image you see on your modern screen when using the MiSTer) you will need to use some kind of capture card that supports the desired resolution. Here is an example of a raw screenshot from the NES core Here is an example of an upscaled screenshot from the Neo Geo core","title":"Can you take screenshots on the MiSTer?"},{"location":"basics/faq/#why-use-fpga-when-other-proven-solutions-exist-such-as-raspberry-pi","text":"The following was originally written by Sorgelig, founder of MiSTer FPGA There are debates about how to refer to the process of simulating real hardware using FPGA. Some people insist it's not emulation but rather true hardware replication, while any simulation using a traditional CPU should be referred to as emulation. I have my own opinion here. :) From my point of view, if the FPGA code is based on the circuitry of real hardware (along with the usual tweaks for FPGA compatibility), then it should be called replication . Anything else is emulation , since it uses different kinds of approximation to meet the same objectives. Currently, it's hard to find a core that can truly be called a replica \u2013 most cores are based on more-or-less functional recreations rather than true circuit recreation. The most widely used CPU cores \u2013 the Z80 (T80) and MC68000 (TG68K) \u2013 are pure functional emulations, not replications. So it's okay to call FPGA cores emulators, unless they are proven to be replicas. To go back to the original question, then, why FPGA, if it's also just emulation? Well, FPGA emulation is fundamentally different than emulation on a CPU. Traditional emulators on CPUs execute code sequentially. This is a tricky method of emulation because real hardware has many chips and all of them work in parallel. The CPU, video chip/logic, audio chip, memory arbiter \u2013 all of them are working at the same time. So a traditional emulator has to take care of all these parts and try to emulate the whole orchestra at the same time by quickly \"running\" from one chip to another. This requires a lot of CPU power to emulate even an old and slow retro computer. Sometimes even a modern CPU working at 100 times the speed of the retro computer is not enough, so the emulator has to use approximation, skip emulation of some less important parts, or assume some standard work of the emulated system without extraordinary usage. Let's take a well-known emulator, UAE, emulating an Amiga. On a Raspberry Pi 3, you can run some Amiga CPU benchmarks and get crazy numbers like 100 times the original 68000 processor. So you may assume you have an emulated Amiga that is 100 times faster than real one. No, you don't. If you run different kinds of demos or games, you will see the video stutters sometimes. For example, if you play the well-known \"State of The Art\" demo by Spaceballs, you will notice video stuttering at some points, while a real Amiga 600 with 1x CPU speed plays the whole demo very smoothly. This is how traditional emulators on Raspberry Pi work. FPGA emulation works very differently from traditional emulation on CPU. An FPGA is a large array of simple triggers and other logic \u2013 just like any other chip/CPU. The only difference is that specific chips/CPUs have these triggers and logic permanently connected, while FPGA allows you to connect them however you want. A special HDL (hardware description language) describes how to connect all these triggers/logic cells. Everything in FPGA works in parallel like in the original chips/devices. Thus, FPGA is pretty close to the original hardware. FPGA doesn't need high frequencies to emulate retro computers; it works at much lower frequencies than traditional emulators require. Since everything in FPGA works in parallel, it is no problem to handle any possible usage of the emulated system. Developers using FPGA usually concentrate on the specific part to make it work correctly \u2013 and it will work as it should in any possible scenario. In the same reference demo, \"State Of the Art,\" using FPGA emulation, you can see smooth video through the whole playback, as on the original hardware. You may want to ask, \"So why not make all emulators on FPGA then?\" The answer is: FPGA programming is not so trivial. Every bit in FPGA works in parallel, so the developer needs to think in parallel as well :). What is trivial on CPU is not trivial on FPGA \u2013 although some parts that are trivial on FPGA cost a lot in CPU code.","title":"Why use FPGA when other proven solutions exist, such as Raspberry Pi?"},{"location":"basics/hotkey/","text":"Here's a reference of the hotkeys you can use with the MiSTer. Hotkeys are useful at saving time and there are some hotkeys which do things you can only do with a keyboard or gamepad. Some of these hotkeys only work in the Main Menu core, others will work inside emulators as part of the gameplay, and some will work in all instances. In any core, with OSD closed Hotkey Description F12 Open or close the Menu/On-Screen Display Alt + F12 Open core select menu Win + Print Screen Take a screenshot (upscaled) Shift + Win + Print Screen Take a screenshot (raw output) Left Ctrl + Left Alt + Right Alt Press \"User\" button, usually resets current core, same function as IO board button Left Shift + Left Ctrl + Left Alt + Right Alt Full Reboot/Reset, same as IO add-on board Reset button Controller: Button + OSD button Turn on/off turbo/autofire for the pressed button Controller: Direction + OSD Button Set rate of turbo/autofire in milliseconds (ms) With the OSD open, in any core Hotkey Description F12 close OSD F11 Pair Bluetooth controller Left Go to information screen (shows currently selected INI file and volume) Right System screen (change core, set filters, gamma, etc...) Controller: Back + R/L/D/U Select Alternate INI file if defined (Default/Alt1/Alt2/Alt3) Controller: Select Expands submenus in the OSD when highlighted In the Main Menu core only Hotkey Description F1 Switch background type (static, wallpaper, color bars, black) F2 Hide / Show core dates F9 Open Linux terminal / command line interface, use F12 to go back to menu Core-specific hotkeys Core Hotkey Description Many Computer Cores Win + F12 Open the OSD","title":"Hotkeys"},{"location":"basics/hotkey/#in-any-core-with-osd-closed","text":"Hotkey Description F12 Open or close the Menu/On-Screen Display Alt + F12 Open core select menu Win + Print Screen Take a screenshot (upscaled) Shift + Win + Print Screen Take a screenshot (raw output) Left Ctrl + Left Alt + Right Alt Press \"User\" button, usually resets current core, same function as IO board button Left Shift + Left Ctrl + Left Alt + Right Alt Full Reboot/Reset, same as IO add-on board Reset button Controller: Button + OSD button Turn on/off turbo/autofire for the pressed button Controller: Direction + OSD Button Set rate of turbo/autofire in milliseconds (ms)","title":"In any core, with OSD closed"},{"location":"basics/hotkey/#with-the-osd-open-in-any-core","text":"Hotkey Description F12 close OSD F11 Pair Bluetooth controller Left Go to information screen (shows currently selected INI file and volume) Right System screen (change core, set filters, gamma, etc...) Controller: Back + R/L/D/U Select Alternate INI file if defined (Default/Alt1/Alt2/Alt3) Controller: Select Expands submenus in the OSD when highlighted","title":"With the OSD open, in any core"},{"location":"basics/hotkey/#in-the-main-menu-core-only","text":"Hotkey Description F1 Switch background type (static, wallpaper, color bars, black) F2 Hide / Show core dates F9 Open Linux terminal / command line interface, use F12 to go back to menu","title":"In the Main Menu core only"},{"location":"basics/hotkey/#core-specific-hotkeys","text":"Core Hotkey Description Many Computer Cores Win + F12 Open the OSD","title":"Core-specific hotkeys"},{"location":"basics/input/","text":"MiSTer has support for a wide variety of input devices. It also has options to configure these devices to fit your needs in addition to several quality of life features across most, sometimes all, cores. Here is a breakdown of some special configurations for various input devices like spinners, gamepads, joysticks, and keyboards. MiSTer has a set of standard features for USB gaming controllers: * Up to 6 player support * Auto Fire * Mouse emulation from your joystick Joystick player assignment Up to 6 player controllers are supported (depending on core): After a core starts, press a button on any connected controller to make it the Player 1 gamepad/joystick Press a button on a second controller to make it the Player 2 joystick (if supported by the core) Keep going for assigning Player 3, Player 4, etc... If you assigned the players in the wrong order, it's easy to start over, just go to the On-Screen Display's secondary menu (press Right after going into the OSD) and select \"Reset player assignment\" to start all over again. If you reset the core, it also resets the player assignments. Please note; if a controller doesn't seem to work, it's possible you will need to reboot the MiSTer into the Menu core, and define the inputs for that controller if it hasn't been done already. Also, if the controller attached has the same Product ID and Vendor ID as seen by the linux system, you may not be able to use two of them at the same time. It depends upon how the controller is made to work. Auto Fire Any defined button (except the d-pad) supports the auto fire feature. To activate auto fire, press and hold the desired button and then quickly press and release the button defined as BUTTON OSD (for joystick) or KBD TOGGLE (for keyboard). To deactivate auto fire, repeat the the same procedure for that same button you set before. Auto fire rates can be modified by increments of 32ms all the way up to 1024ms (repeating the button once every second). To change the speed, press and hold a direction on the d-pad and then quickly press the button defined as BUTTON OSD (for joystick) or KBD TOGGLE (for keyboard). Up or right increases the delay of the auto fire while down and left decrease the delay. Some games will not function properly if the auto fire rate is too fast, so this is a useful feature to keep in mind if you run into problems. Mouse emulation Your joystick can emulate mouse if the required button \"Mouse Emu\" has been defined when you defined your inputs in the Menu core. Hold the Mouse Emu button and Alt + M , Mouse Left/Right/Middle Btn will emulate the mouse functions. When Mouse emulation is activated, the left analog stick (if defined earlier) will be switched to pointer functions for the mouse. Press BUTTON OSD while holding Mouse Emu to toggle mouse emulation permanently. In permanent mouse emulation the Mouse Emu button becomes a sniper button with smaller pointer movements. Only the buttons defined for mouse emulation will be switched. Other joystick buttons will continue to act as regular joystick buttons. Thus, if your game pad has many buttons, you can have both mouse and joystick in one game pad at the same time (useful for some games, like Walker on Amiga). What devices are supported? Generally speaking, any normal USB HID compatible input device should work. Keyboards, arcade spinners, usb adapters for original controllers such as the Raphnet and Daemonbite retro adapters, and even modern console controllers like the DualSense PS5 controller. There is even the Serial Native Accessory Connector, if you have one of the Analog or Digital IO add-on boards, which on supported cores allows you to use original hardware controllers, such as lightguns, which would normally only work with the original system and require zero lag to function. Serial Native Accessory Convertor (SNAC) SNAC adaptors allow you to connect original hardware controllers and peripherals to the MiSTer cores. The cores which support SNAC connections have been specially built to have serial connections exposed to specific pins on the DE10-Nano. That means when you pull the trigger on the NES Zapper while aiming at your CRT, the signals travel almost instantly, similar to how they would on original hardware. Using A Mouse You can also use a mouse for various purposes on the MiSTer. The main purpose for mouse support is for use with some computer cores which had mice. One of the cool things you can do is use the mouse as an emulated lightgun. The same principles behind doing this applies to a wiimote with a powered sensor bar. You can do this by pairing your wiimote to the MiSTer and it will be used as a Mouse when paired. You can also use a mouse for a paddle style controller if you'd like. Are gaming keyboards worth it? High performance and expensive keyboards and mice aren't advantageous to use for MiSTer. They won't give any major or even minor significant benefits. Additionally, these devices often have too many functions and many virtual devices cluttering the input subsystem which may introduce input lag or be complete unresponsive. They may also prevent other devices, such as gamepads, from working. So if you experience problems with your gaming keyboard, try a simpler keyboard instead to see if that resolves the issue. General advice is not to go out and buy a specialty gaming keyboard for MiSTer specifically, it may end up being a waste of money. What about rumble support? Rumble support was just recently added into the framework in preparation for the release of the Playstation core on MiSTer. There are only a handful of systems that need support added and the support will be added at a later time. What about PS3/PS4/PS5, XBoxOne/360, Switch, and 8bitdo receivers/gamepads? The ideal solution today for these types gamepads is to use 3rd-party receivers, such as 8bitdo retro receivers, specifically the 8Bitdo Wireless Bluetooth Adapter, or any number of name-brand Bluetooth 4.x/5.0 receivers. The 8bitdo receiver easily supports Xbox One S/X, PS3, PS4, Wii, Switch, and 8Bitdo's own gamepads and it can pair easily without using the bluetooth setup menu. One 8bitdo bluetooth receiver will pair with one controller at one time. If multiple controllers are required for multiplayer games, then multiple receivers will need to be purchased if you are using the 8bitdo receiver, however a regular Bluetooth usb receiver does not suffer from this limitation. The 8bitdo receivers have been reported as having some lag introduced, limited range, and bad line of sight, when compared to Bluetooth 5.0 adapters (like the TP-Link and Asus ones). The main appeal of the 8bitdo receivers is the ease of use and quick pairing. The 8bitdo receivers act as a controller themselves and are a compatibility layer between your paired controller and whatever they are attached to via USB, for easy compatibility. Bluetooth adapters by comparison pair your controller itself directly as a device to the MiSTer. No matter what controller you connect, the 8bitdo receiver will see it as the same controller, the 8bitdo receiver's controller. This means that some features like the DualSense (PS5) controller's added mute button and touchpad will not be available, whereas using bluetooth 5.0 may run a very minor risk of limited compatibility (until device support is added into the framework and linux by the development team), but will come with every feature. The Grey/Orange (brick decorated) USB Adapters are functionally the same, after using the latest firmware. Gamepads may switch to different input modes using hotkeys for different functionality (depends upon the model of controller, some have a switch on the back like the 8bitdo SN30 Pro 2). Note that documentation on 8Bitdo's site doesn't specify this, but the update logs for the firmware updates does. X-Input mode: Hold SELECT+UP for 3 seconds. PSC (Playstation Classic) mode: Hold SELECT+DOWN for 3 seconds. This is useful for gamepads which are limited in buttons (12 total; DPAD counts as 4) and need to access the MiSTer OSD menu. Note that the OSD menu should not be assigned when configuring buttons in the main MiSTer menu core, as the L+R+START combination will bring up the OSD while in the cores. The combination is hard-coded in MiSTer specifically for 8Bitdo adapters. You may also lose auto-fire/mouse functionality in this mode. Alternative 8Bitdo adapters, such as the 8Bitdo Console Retro Receiver (SNES, NES, Genesis) are always in X-Input mode when connected via microUSB. JammaSD support MiSTer supports the use of a JammaSD by detecting if the pressed buttons are from player 1 or 2. You first have to configure player 1 in main menu (as a joypad) (and also remap it in cores if needed). Player 2 inputs will be auto defined, like if it was a second identical joypad. JammaSD support was added with a VID/PID that should be the same across all devices, but if your device has a different VID/PID, you can adjust it in the MiSTer.ini file.","title":"Controllers"},{"location":"basics/input/#joystick-player-assignment","text":"Up to 6 player controllers are supported (depending on core): After a core starts, press a button on any connected controller to make it the Player 1 gamepad/joystick Press a button on a second controller to make it the Player 2 joystick (if supported by the core) Keep going for assigning Player 3, Player 4, etc... If you assigned the players in the wrong order, it's easy to start over, just go to the On-Screen Display's secondary menu (press Right after going into the OSD) and select \"Reset player assignment\" to start all over again. If you reset the core, it also resets the player assignments. Please note; if a controller doesn't seem to work, it's possible you will need to reboot the MiSTer into the Menu core, and define the inputs for that controller if it hasn't been done already. Also, if the controller attached has the same Product ID and Vendor ID as seen by the linux system, you may not be able to use two of them at the same time. It depends upon how the controller is made to work.","title":"Joystick player assignment"},{"location":"basics/input/#auto-fire","text":"Any defined button (except the d-pad) supports the auto fire feature. To activate auto fire, press and hold the desired button and then quickly press and release the button defined as BUTTON OSD (for joystick) or KBD TOGGLE (for keyboard). To deactivate auto fire, repeat the the same procedure for that same button you set before. Auto fire rates can be modified by increments of 32ms all the way up to 1024ms (repeating the button once every second). To change the speed, press and hold a direction on the d-pad and then quickly press the button defined as BUTTON OSD (for joystick) or KBD TOGGLE (for keyboard). Up or right increases the delay of the auto fire while down and left decrease the delay. Some games will not function properly if the auto fire rate is too fast, so this is a useful feature to keep in mind if you run into problems.","title":"Auto Fire"},{"location":"basics/input/#mouse-emulation","text":"Your joystick can emulate mouse if the required button \"Mouse Emu\" has been defined when you defined your inputs in the Menu core. Hold the Mouse Emu button and Alt + M , Mouse Left/Right/Middle Btn will emulate the mouse functions. When Mouse emulation is activated, the left analog stick (if defined earlier) will be switched to pointer functions for the mouse. Press BUTTON OSD while holding Mouse Emu to toggle mouse emulation permanently. In permanent mouse emulation the Mouse Emu button becomes a sniper button with smaller pointer movements. Only the buttons defined for mouse emulation will be switched. Other joystick buttons will continue to act as regular joystick buttons. Thus, if your game pad has many buttons, you can have both mouse and joystick in one game pad at the same time (useful for some games, like Walker on Amiga).","title":"Mouse emulation"},{"location":"basics/input/#what-devices-are-supported","text":"Generally speaking, any normal USB HID compatible input device should work. Keyboards, arcade spinners, usb adapters for original controllers such as the Raphnet and Daemonbite retro adapters, and even modern console controllers like the DualSense PS5 controller. There is even the Serial Native Accessory Connector, if you have one of the Analog or Digital IO add-on boards, which on supported cores allows you to use original hardware controllers, such as lightguns, which would normally only work with the original system and require zero lag to function.","title":"What devices are supported?"},{"location":"basics/input/#serial-native-accessory-convertor-snac","text":"SNAC adaptors allow you to connect original hardware controllers and peripherals to the MiSTer cores. The cores which support SNAC connections have been specially built to have serial connections exposed to specific pins on the DE10-Nano. That means when you pull the trigger on the NES Zapper while aiming at your CRT, the signals travel almost instantly, similar to how they would on original hardware.","title":"Serial Native Accessory Convertor (SNAC)"},{"location":"basics/input/#using-a-mouse","text":"You can also use a mouse for various purposes on the MiSTer. The main purpose for mouse support is for use with some computer cores which had mice. One of the cool things you can do is use the mouse as an emulated lightgun. The same principles behind doing this applies to a wiimote with a powered sensor bar. You can do this by pairing your wiimote to the MiSTer and it will be used as a Mouse when paired. You can also use a mouse for a paddle style controller if you'd like.","title":"Using A Mouse"},{"location":"basics/input/#are-gaming-keyboards-worth-it","text":"High performance and expensive keyboards and mice aren't advantageous to use for MiSTer. They won't give any major or even minor significant benefits. Additionally, these devices often have too many functions and many virtual devices cluttering the input subsystem which may introduce input lag or be complete unresponsive. They may also prevent other devices, such as gamepads, from working. So if you experience problems with your gaming keyboard, try a simpler keyboard instead to see if that resolves the issue. General advice is not to go out and buy a specialty gaming keyboard for MiSTer specifically, it may end up being a waste of money.","title":"Are gaming keyboards worth it?"},{"location":"basics/input/#what-about-rumble-support","text":"Rumble support was just recently added into the framework in preparation for the release of the Playstation core on MiSTer. There are only a handful of systems that need support added and the support will be added at a later time.","title":"What about rumble support?"},{"location":"basics/input/#what-about-ps3ps4ps5-xboxone360-switch-and-8bitdo-receiversgamepads","text":"The ideal solution today for these types gamepads is to use 3rd-party receivers, such as 8bitdo retro receivers, specifically the 8Bitdo Wireless Bluetooth Adapter, or any number of name-brand Bluetooth 4.x/5.0 receivers. The 8bitdo receiver easily supports Xbox One S/X, PS3, PS4, Wii, Switch, and 8Bitdo's own gamepads and it can pair easily without using the bluetooth setup menu. One 8bitdo bluetooth receiver will pair with one controller at one time. If multiple controllers are required for multiplayer games, then multiple receivers will need to be purchased if you are using the 8bitdo receiver, however a regular Bluetooth usb receiver does not suffer from this limitation. The 8bitdo receivers have been reported as having some lag introduced, limited range, and bad line of sight, when compared to Bluetooth 5.0 adapters (like the TP-Link and Asus ones). The main appeal of the 8bitdo receivers is the ease of use and quick pairing. The 8bitdo receivers act as a controller themselves and are a compatibility layer between your paired controller and whatever they are attached to via USB, for easy compatibility. Bluetooth adapters by comparison pair your controller itself directly as a device to the MiSTer. No matter what controller you connect, the 8bitdo receiver will see it as the same controller, the 8bitdo receiver's controller. This means that some features like the DualSense (PS5) controller's added mute button and touchpad will not be available, whereas using bluetooth 5.0 may run a very minor risk of limited compatibility (until device support is added into the framework and linux by the development team), but will come with every feature. The Grey/Orange (brick decorated) USB Adapters are functionally the same, after using the latest firmware. Gamepads may switch to different input modes using hotkeys for different functionality (depends upon the model of controller, some have a switch on the back like the 8bitdo SN30 Pro 2). Note that documentation on 8Bitdo's site doesn't specify this, but the update logs for the firmware updates does. X-Input mode: Hold SELECT+UP for 3 seconds. PSC (Playstation Classic) mode: Hold SELECT+DOWN for 3 seconds. This is useful for gamepads which are limited in buttons (12 total; DPAD counts as 4) and need to access the MiSTer OSD menu. Note that the OSD menu should not be assigned when configuring buttons in the main MiSTer menu core, as the L+R+START combination will bring up the OSD while in the cores. The combination is hard-coded in MiSTer specifically for 8Bitdo adapters. You may also lose auto-fire/mouse functionality in this mode. Alternative 8Bitdo adapters, such as the 8Bitdo Console Retro Receiver (SNES, NES, Genesis) are always in X-Input mode when connected via microUSB.","title":"What about PS3/PS4/PS5, XBoxOne/360, Switch, and 8bitdo receivers/gamepads?"},{"location":"basics/input/#jammasd-support","text":"MiSTer supports the use of a JammaSD by detecting if the pressed buttons are from player 1 or 2. You first have to configure player 1 in main menu (as a joypad) (and also remap it in cores if needed). Player 2 inputs will be auto defined, like if it was a second identical joypad. JammaSD support was added with a VID/PID that should be the same across all devices, but if your device has a different VID/PID, you can adjust it in the MiSTer.ini file.","title":"JammaSD support"},{"location":"basics/keyboard/","text":"MiSTer supports keyboard re-mapping which is useful for reduced size or localized keyboards. Key remapping is system wide, so every core will have same key mapping. Keep in mind there is no macro key functionality, so single keys are remapped to another single key. Some multimedia keys generate several key codes - these keys cannot be remapped. Each keyboard model has its own key map stored in /media/fat/config/kbd_[VID]_[PID].map file. To reset all keys to their default state, simply delete the appropriate map file which has the matching VenderID and ProductID in the filename. Key remapping is available through the Menu core only. Joystick emulation Keyboards can be switched to joystick emulation. You need to define keys used for joystick emulation the same way you did for joysticks. Auto fire is also supported the same way as they are for joysticks (Menu+button). The button defined for \"KBD TOGGLE\" provides a quick switch between keyboard and joystick use for defined keys. Mouse emulation Keyboards can be switched to mouse emulation. You need to define mouse emulation buttons in the Menu core the same way as for joystick, in the Define Gamepad menu option. Emulation switch To switch between emulation modes press Num Lock or Scroll Lock until the desired mode is selected. The switching sequence is Mouse >> Joy1 >> Joy2 >> None The LEDs on your keyboard will display the emulation modes: * Mouse emulation: NumLock LED + ScrLock LED * Joystick 1 emulation: NumLock LED. * Joystick 2 emulation: ScrLock LED. Common functional keys/combos used in cores F12 - open/close OSD menu/submenu Alt + F12 - quick core selection (like in Menu core). Left Ctrl + Left Alt + Right Alt - presses the \"USER\" button which usually is reset in emulated system. Left Shift + Left Ctrl + Left Alt + Right Alt - MiSTer reset (load Menu core). Notes: Some systems provide writing support which requires additional attention to how you reset/shutdown the MiSTer. MiSTer tries not to keep any pending writes and writes physically to the disk as soon as possible. Still, safer way to reset the MiSTer from core which probably was writing to disk recently is using combo Left Shift + Left Ctrl + Left Alt + Right Alt - this will flush all caches to disk before restart. Cores without write can be restarted by hard reset button or powered down without special attention. Left Ctrl + Left Alt + Right Alt sequence can be replaced by some other well known combos through INI file.","title":"Keyboards"},{"location":"basics/keyboard/#joystick-emulation","text":"Keyboards can be switched to joystick emulation. You need to define keys used for joystick emulation the same way you did for joysticks. Auto fire is also supported the same way as they are for joysticks (Menu+button). The button defined for \"KBD TOGGLE\" provides a quick switch between keyboard and joystick use for defined keys.","title":"Joystick emulation"},{"location":"basics/keyboard/#mouse-emulation","text":"Keyboards can be switched to mouse emulation. You need to define mouse emulation buttons in the Menu core the same way as for joystick, in the Define Gamepad menu option.","title":"Mouse emulation"},{"location":"basics/keyboard/#emulation-switch","text":"To switch between emulation modes press Num Lock or Scroll Lock until the desired mode is selected. The switching sequence is Mouse >> Joy1 >> Joy2 >> None The LEDs on your keyboard will display the emulation modes: * Mouse emulation: NumLock LED + ScrLock LED * Joystick 1 emulation: NumLock LED. * Joystick 2 emulation: ScrLock LED.","title":"Emulation switch"},{"location":"basics/keyboard/#common-functional-keyscombos-used-in-cores","text":"F12 - open/close OSD menu/submenu Alt + F12 - quick core selection (like in Menu core). Left Ctrl + Left Alt + Right Alt - presses the \"USER\" button which usually is reset in emulated system. Left Shift + Left Ctrl + Left Alt + Right Alt - MiSTer reset (load Menu core).","title":"Common functional keys/combos used in cores"},{"location":"basics/keyboard/#notes","text":"Some systems provide writing support which requires additional attention to how you reset/shutdown the MiSTer. MiSTer tries not to keep any pending writes and writes physically to the disk as soon as possible. Still, safer way to reset the MiSTer from core which probably was writing to disk recently is using combo Left Shift + Left Ctrl + Left Alt + Right Alt - this will flush all caches to disk before restart. Cores without write can be restarted by hard reset button or powered down without special attention. Left Ctrl + Left Alt + Right Alt sequence can be replaced by some other well known combos through INI file.","title":"Notes:"},{"location":"basics/links/","text":"Here's a collection of links to various information, videos, and articles about the MiSTer. MiSTer is an evolving platform, so these videos can only represent what was available at the time of them being made, some information and representations may be outdated. If you just want a comprehensive full review of almost everything MiSTer has to offer that is up to date, watch the My Life In Gaming video here: MiSTer FPGA in 2022: A Primer Guide to Retro Gaming's Hardware Emulator / MY LIFE IN GAMING - March 31, 2022 Otherwise there are some older videos listed below. MiSTer FPGA Articles Polygon - MiSTer 101: A classic gaming device to rule them all by Christopher Grant - August 8, 2021 Kotaku - And Now, The Ultimate Retro Gaming Device by Mike Fahey - September 02, 2021 Edge Magazine Australia - Hard Core: How MiSTer emulation is redefining the art of resurrecting gaming's past by Alex Wiltshire - April 22, 2021 The Verge - The DIY Issue: Building The Ultimate Retro Computer by Sam Byford - March 11, 2021 Nintendo Life - Hardware Review: MiSTer FPGA - A Tantalizing Glimpse Into The Future of Retro Gaming by Damien McFerran - February 11, 2021 Dream Machine: MiSTer FPGA by F\u00e9lix L\u00e9ger (@felleg) - October 18, 2020 Tutorials/Guides MiSTer Manual by adreeve MiSTer FPGA Videos Jan 2021 - Digital Foundry - DF Retro Hardware: MiSTer FPGA - A Brilliant Mini Emulation System Explored! Jan 2021 - Scarlet Sprites - MiSTer FPGA Review 2021: Arcade & Console Accuracy! Dec 2020 - Retro Bits - MiSTer FPGA - how to build, demo, costs, and pro/cons Mar 2020 - Briar Rabbit - What is a MiSTer FPGA? Nov 2019 - SmokeMonster - MiSTer Cores without add-ons (no SDRAM) Jul 2019 - RetroManCave - Exploring MiSTer May 2019 - GameSack - MiSTer Review Oct 2018 - ETA Prime - FPGA Emulation MisTer Project on the Terasic DE10-Nano Oct 2018 - SmokeMonster - Introducing the MiSTer FPGA Tutorials MiSTer assembly and config (Ownlonymous) Creating a MiSTer SD card (NML32) Mounting a VHD from Windows over the network (NML32) MiSTer FPGA How To Setup Tutorial (MadLittlePixel) MiSTer FPGA Input Mapping (rsn8887) MiSTer FPGA Getting Started and Setting up with Mr. Fusion (Master Hacks) AO486 Core - Setting up DOS Games with pre-built Total DOS Launcher (FlynssBit) FPGA Discussion Oct 2019 - Lon.TV - Lon & RetroRGB discuss FPGA Sep 2019 - SmokeMonster - FPGA Revolution Other / Demonstrations Jul 2020 - RetroManCave - My Ultimate FPGA Desktop","title":"Links"},{"location":"basics/links/#mister-fpga-articles","text":"Polygon - MiSTer 101: A classic gaming device to rule them all by Christopher Grant - August 8, 2021 Kotaku - And Now, The Ultimate Retro Gaming Device by Mike Fahey - September 02, 2021 Edge Magazine Australia - Hard Core: How MiSTer emulation is redefining the art of resurrecting gaming's past by Alex Wiltshire - April 22, 2021 The Verge - The DIY Issue: Building The Ultimate Retro Computer by Sam Byford - March 11, 2021 Nintendo Life - Hardware Review: MiSTer FPGA - A Tantalizing Glimpse Into The Future of Retro Gaming by Damien McFerran - February 11, 2021 Dream Machine: MiSTer FPGA by F\u00e9lix L\u00e9ger (@felleg) - October 18, 2020","title":"MiSTer FPGA Articles"},{"location":"basics/links/#tutorialsguides","text":"MiSTer Manual by adreeve","title":"Tutorials/Guides"},{"location":"basics/links/#mister-fpga-videos","text":"Jan 2021 - Digital Foundry - DF Retro Hardware: MiSTer FPGA - A Brilliant Mini Emulation System Explored! Jan 2021 - Scarlet Sprites - MiSTer FPGA Review 2021: Arcade & Console Accuracy! Dec 2020 - Retro Bits - MiSTer FPGA - how to build, demo, costs, and pro/cons Mar 2020 - Briar Rabbit - What is a MiSTer FPGA? Nov 2019 - SmokeMonster - MiSTer Cores without add-ons (no SDRAM) Jul 2019 - RetroManCave - Exploring MiSTer May 2019 - GameSack - MiSTer Review Oct 2018 - ETA Prime - FPGA Emulation MisTer Project on the Terasic DE10-Nano Oct 2018 - SmokeMonster - Introducing the MiSTer FPGA","title":"MiSTer FPGA Videos"},{"location":"basics/links/#tutorials","text":"MiSTer assembly and config (Ownlonymous) Creating a MiSTer SD card (NML32) Mounting a VHD from Windows over the network (NML32) MiSTer FPGA How To Setup Tutorial (MadLittlePixel) MiSTer FPGA Input Mapping (rsn8887) MiSTer FPGA Getting Started and Setting up with Mr. Fusion (Master Hacks) AO486 Core - Setting up DOS Games with pre-built Total DOS Launcher (FlynssBit)","title":"Tutorials"},{"location":"basics/links/#fpga-discussion","text":"Oct 2019 - Lon.TV - Lon & RetroRGB discuss FPGA Sep 2019 - SmokeMonster - FPGA Revolution","title":"FPGA Discussion"},{"location":"basics/links/#other-demonstrations","text":"Jul 2020 - RetroManCave - My Ultimate FPGA Desktop","title":"Other / Demonstrations"},{"location":"basics/saves/","text":"Many MiSTer cores have the capability to let you save your game, whether it be with traditional simulation of the original save features from the hardware, or with savestates. Most cores don't have savestates but a steadily increasing number do. Here's some basic information regarding how saves work on the MiSTer. Normal game saves MiSTer will only update your normal game saves when you open the On-Screen Display (OSD). You will need to save inside the game, then open the OSD, and select \"Save Backup RAM\". In most cores, after you select this, you will need to open the OSD again and you should see a \"Saving...\" pop up on the screen. If you don't see this, then your game save likely didn't get updated. Opening the OSD to save can be a bit of an adjustment at first, but it is necessary. It is intended behavior as MicroSD cards have a limited number of writes until they begin to fail. Also, since these cores are in FPGA, some cores may write to your MicroSD constantly multiple times a second if there wasn't a signal to tell the core to backup the save to a file. Autosave option It's best to utilize the autosave option in any core. First open the OSD. Next, go to the Autosave option if it is available, and turn it on. Finally, go to the secondary OSD menu by pressing Right on your controller (or keyboard) and go to \"Save Settings\" to save the settings you changed in the OSD for that core. This will only save it for that one core, it won't save it for all the other cores, so keep that in mind. Almost every core does not autosave by default. Autosave being on would generate too many writes to the MicroSD card and could lead to earlier hardware failure, so this decision is deliberate. Save file conversion The save file formats in most MiSTer cores are compatible with many popular emulators. However, some are different, so you may need to convert them. Thankfully Euan Forrester has made a save file converter that you can use to convert your saves into a MiSTer-compatible file. MiSTer Save File Converter Euan's tool also lets you convert many other save file formats from various emulators, and you can convert your MiSTer saves back into ones that are compatible with emulators. Backup your saves Make sure to backup your saves off of the MicroSD regularly if you'd like to keep them safe. When MicroSD storage fails, it's usually swift and catastrophic. There are various tools to accomplish this with. One tool like this is FreeFileSync . With FreeFileSync you can setup a scheduled batch job to backup specific folders from your MiSTer regularly. Read the documentation on FreeFileSync's website for more information.","title":"Game Saves"},{"location":"basics/saves/#normal-game-saves","text":"MiSTer will only update your normal game saves when you open the On-Screen Display (OSD). You will need to save inside the game, then open the OSD, and select \"Save Backup RAM\". In most cores, after you select this, you will need to open the OSD again and you should see a \"Saving...\" pop up on the screen. If you don't see this, then your game save likely didn't get updated. Opening the OSD to save can be a bit of an adjustment at first, but it is necessary. It is intended behavior as MicroSD cards have a limited number of writes until they begin to fail. Also, since these cores are in FPGA, some cores may write to your MicroSD constantly multiple times a second if there wasn't a signal to tell the core to backup the save to a file.","title":"Normal game saves"},{"location":"basics/saves/#autosave-option","text":"It's best to utilize the autosave option in any core. First open the OSD. Next, go to the Autosave option if it is available, and turn it on. Finally, go to the secondary OSD menu by pressing Right on your controller (or keyboard) and go to \"Save Settings\" to save the settings you changed in the OSD for that core. This will only save it for that one core, it won't save it for all the other cores, so keep that in mind. Almost every core does not autosave by default. Autosave being on would generate too many writes to the MicroSD card and could lead to earlier hardware failure, so this decision is deliberate.","title":"Autosave option"},{"location":"basics/saves/#save-file-conversion","text":"The save file formats in most MiSTer cores are compatible with many popular emulators. However, some are different, so you may need to convert them. Thankfully Euan Forrester has made a save file converter that you can use to convert your saves into a MiSTer-compatible file. MiSTer Save File Converter Euan's tool also lets you convert many other save file formats from various emulators, and you can convert your MiSTer saves back into ones that are compatible with emulators.","title":"Save file conversion"},{"location":"basics/saves/#backup-your-saves","text":"Make sure to backup your saves off of the MicroSD regularly if you'd like to keep them safe. When MicroSD storage fails, it's usually swift and catastrophic. There are various tools to accomplish this with. One tool like this is FreeFileSync . With FreeFileSync you can setup a scheduled batch job to backup specific folders from your MiSTer regularly. Read the documentation on FreeFileSync's website for more information.","title":"Backup your saves"},{"location":"basics/video/","text":"Here's a description of some basic video customization features on the MiSTer. You can change your resolution, modify the framebuffer to reduce input latency and video stuttering, add some video filters, use shadowmasks, and even gamma correction. Also, you can use 5x overscan mode to push a 1200p image into 1080p for square pixels and nearly the original overscan of a CRT, depending on the game's resolution. There are lots of options to play with, here's some basic ones. MiSTer Ini Video Settings In the MiSTer.ini file there are many video setttings to try. We'll just focus on a couple here for now and you can dive deeper into things like CRT usage in the Advanced - CRT section. First, you can edit the settings in the MiSTer.ini file with windows Notepad, Visual Studio Code, Notepad++. Pretty much any text editor will be fine. Alternatively you can run the ini-settings.sh script in the scripts folder, this has a simple interface to change options. video_mode A bit of a ways down the .ini file there is a video_mode option. Above it the resolutions are commented: ; 0 - 1280x720@60 ; 1 - 1024x768@60 ; 2 - 720x480@60 ; 3 - 720x576@50 ; 4 - 1280x1024@60 ; 5 - 800x600@60 ; 6 - 640x480@60 ; 7 - 1280x720@50 ; 8 - 1920x1080@60 ; 9 - 1920x1080@50 ;10 - 1366x768@60 ;11 - 1024x600@60 ;12 - 1920x1440@60 ;13 - 2048x1536@60 This tells you that video_mode=0 will set you to 1280x720 resolution at 60hz. For most people they will probably want to use 1920x1080 resolutiono at 60hz, so my advice would be to change this to video_mode=8 . You can also use the ini-settings.sh script, it will tell you what option selects which resolution, so just select the right one for your display. vsync_adjust Another important option is vsync_adjust . Most modern displays work fine at 60hz, but some games run at 60.6 hz (like Donkey Kong for the arcades) which is a \"non-standard refresh rate\". Therefore, MiSTer has what is called a \"framebuffer\". The game is still running at 60.6hz but the frames are sent at 60hz. So occasionally there is a little \"stutter\" on the screen to make up for the frames going too fast and being adjusted. To use a framebuffer adds a minimal amount of lag. Here's a list of the options and what they do. vsync_adjust = 0 This matches the refresh rate of your monitor (e.g. 60hz) and has about 1-2 frames of lag. Video output can be a little jittery as the core is still running at it's native rate, which isn't exactly 60hz. vsync_adjust = 1 This makes the video output at exactly the frame rate of the game (e.g. 60.6hz). It has 1 frame of lag, but it is less compatible with modern televisions. Video output is very smooth. vsync_adjust = 2 This makes the video output draw to the screen as fast as possible, and can result in sub-frame lag consistently (independent of your controller and display's built-in lag). However this is the least compatible mode and it may result in unplayable behavior on some televisions using certain cores. The video output is the very smooth. Additionally, because of the way this special mode works there is a mismatch in the refresh rate of the scaled output and the core's original video output. Generally speaking, the rule of thumb is that if you want the smoothest video output and lowest lag then start at vsync_adjust=2 and if a core doesn't work that you want to play on reduce it to 1 or 0 to see if the compatibility is resolved. Your results may vary depending on the display you are connected to and what core you are using. Core exceptions There are also ways to add exceptions. My monitor doesn't play nice with the low lag setting on the Genesis core. So in my MiSter.ini, I added the following override/exception to the end of the file for just the MiSTer core: [Genesis] vsync_adjust = 0 This makes it so no matter what my vsync_adjust setting is in the upper section, when I use the Genesis core, it will force it to use vsync_adjust=0 (the most compatible mode) every time. You can also add a wildcard to these exceptions so one exception could be applied to multiple cores: [dkong*] vsync_adjust = 1 This will make it so every core that starts with dkong will have the same rule applied to it. You can also make an exception for every single arcade core like so: [arcade] vsync_adjust = 1 Video Processing Options Tutorial Here's a tutorial that you can follow along to get you started using the powerful video processing options on MiSTer FPGA. Filters (and scanlines) MiSTer has the capability to use upscaling filters and scanlines to help enhance the video output or even make it feel similar to a retro CRT television. If you opened the NES core for the first time after setting the MiSter's video output to 1920x1080p and loaded up Duck Tales, then you should see something like this: This can be tweaked a little to make it look a lot nicer to our eyes. First let's go into \"Video Processing\" in the secondary OSD/Menu (press F12 or the menu button you assigned earlier, and then right to see the secondary menu): When you select this it will show you a screen with a bunch of options. Don't get overwhelmed, it's fairly simple when you follow this guide, and you will understand how they work. I'll give you some recommended settings for most of the cores at the end of this tutorial which should be your go-to for now while you get used to things. By default \"Video Filter:\" is set to \"NearNeighbour\". This is a nearest neighbour filter. Basically, to turn 240p video into 1080p video requires these pixels to be made larger. Since 240 doesn't divide evenly into 1080 (1080 / 240 = 4.5), then some of these pixels won't be perfectly square. Nearest neighbour helps fool your eyes into making them seem more square than they actually are. It's filtering the video before it reaches your eyes to make it look better! Select Video filter to change it so you can select a filters file. You will notice the text changes from Video Filter: to Horz filter: . Don't worry about this too much, for any normal rotation games, Horz is for your upscaling filters that soften or sharpen the image. Select the <none> below to browse. It should show you quite a few options. For now select Interpolation (Medium).txt . This is a filter which gives you some softer edges while still maintaining an illusion of square pixels. There we go, those pixels are a bit smoother now: Another added benefit to interpolation is the scrolling looks smoother to the eye when compared to sharper filters like the default Nearest Neighbour setting. Now let's say you want some scanlines, sorta like what CRT's had and some emulators have an option for. Well to do that, we just need to setup the Vert Filter: option like we did the horz filter. You see, we will be filtering horizontal lines from top to bottom (vertically) on the video output. Inside Vert Filter 's From File option, select Scanlines - Brighter.txt . You should see something like this as your options: 5x Vertical Crop (1080p only) Note: this feature only works if your output resolution in your MiSTer.ini is set to a 1080p option!! If you have been following along on your MiSTer, you might notice that the scanlines look darker occasionally. This is because 240p (this game's resolution) doesn't divide equally into 1080p (your resolution on your MiSTer). But 240 does divide into 1200 equally, 5 times 240 equals 1200. So to fix these scanlines looking uneven, we can stretch the image vertically to make all the pixels perfectly square. Go back into the regular core menu and select Video & Audio . There is an option called Vertical Crop . Not all cores have this, but the NES core does happen to, so it's a good example. Go ahead and select the Vertical Crop option to change Disabled to (216p)5X . You will see just a few lines off the top and bottom get cut off. This is okay, original CRT's cut off about the same amount from the top and bottom anyways. Most games don't have information missing at the edge of the top and bottom. Now your vert filter: scanlines - brighter.txt option should have evenly spaced scanlines vertically, and the image will look a lot better. Shadowmasks MiSTer FPGA also has another layer options available to use called Shadowmasks . Shadow Masks are able to modify the red, green, blue color channels to create advanced effects, such as simulating the appearance of the grille or mask on an old CRT screen or the pixel layouts of old LCD handheld consoles. There are lots of options, but we are just going to use personally one of the most versatile color shadowmasks for this tutorial, Squished VGA Bright v2.txt . This shadowmask attempts to resemble consumer computer monitors and some tv's which had red, green, and blue phosphors in a particular pattern. Here is a picture of the options after I've added this Shadowmask to the same game's video processing menu: Gamma Curves Gamma is a bit of a tricky thing to explain. Basically, gamma on an old CRT is the relationship between voltage and brightness. Think of a graph, the x-axis is voltage and the y-axis is the \"brightness\" (more accurately called luminance). Modern televisions are (ideally) a totally straight line. Old CRT's have a curve. At medium voltage and brightness it is a lot less brightness than you'd expect. Sorta like this: Image Source Now given that the MiSTer is outputting the linear example, the Gamma filters can restore a similar Gamma curve as you may have been used to with your old television. This is especially helpful because we have just applied a \"brighter\" scanline and a shadowmask (which added a mask of colors across the screen imitating a CRT's phosphors). If you've been following along with this tutorial so far, we're gonna play with Gamma just to see how it looks to your eyes. This is all personal preference. If it looks good to you, great. If someone else doesn't like it, well... tough! :) I will apply a very mild \"Gamma Curve\" called gamma_113.txt which is located in the Pure_Gamma folder when you select the gamma options. This gamma curve is allegedly supposed to get you close to a typical consumer CRT's gamma curve. Video demonstrations Some people like a good video to see how it's done: 5x mode video gamma controls video","title":"Video Configuration"},{"location":"basics/video/#mister-ini-video-settings","text":"In the MiSTer.ini file there are many video setttings to try. We'll just focus on a couple here for now and you can dive deeper into things like CRT usage in the Advanced - CRT section. First, you can edit the settings in the MiSTer.ini file with windows Notepad, Visual Studio Code, Notepad++. Pretty much any text editor will be fine. Alternatively you can run the ini-settings.sh script in the scripts folder, this has a simple interface to change options.","title":"MiSTer Ini Video Settings"},{"location":"basics/video/#video_mode","text":"A bit of a ways down the .ini file there is a video_mode option. Above it the resolutions are commented: ; 0 - 1280x720@60 ; 1 - 1024x768@60 ; 2 - 720x480@60 ; 3 - 720x576@50 ; 4 - 1280x1024@60 ; 5 - 800x600@60 ; 6 - 640x480@60 ; 7 - 1280x720@50 ; 8 - 1920x1080@60 ; 9 - 1920x1080@50 ;10 - 1366x768@60 ;11 - 1024x600@60 ;12 - 1920x1440@60 ;13 - 2048x1536@60 This tells you that video_mode=0 will set you to 1280x720 resolution at 60hz. For most people they will probably want to use 1920x1080 resolutiono at 60hz, so my advice would be to change this to video_mode=8 . You can also use the ini-settings.sh script, it will tell you what option selects which resolution, so just select the right one for your display.","title":"video_mode"},{"location":"basics/video/#vsync_adjust","text":"Another important option is vsync_adjust . Most modern displays work fine at 60hz, but some games run at 60.6 hz (like Donkey Kong for the arcades) which is a \"non-standard refresh rate\". Therefore, MiSTer has what is called a \"framebuffer\". The game is still running at 60.6hz but the frames are sent at 60hz. So occasionally there is a little \"stutter\" on the screen to make up for the frames going too fast and being adjusted. To use a framebuffer adds a minimal amount of lag. Here's a list of the options and what they do. vsync_adjust = 0 This matches the refresh rate of your monitor (e.g. 60hz) and has about 1-2 frames of lag. Video output can be a little jittery as the core is still running at it's native rate, which isn't exactly 60hz. vsync_adjust = 1 This makes the video output at exactly the frame rate of the game (e.g. 60.6hz). It has 1 frame of lag, but it is less compatible with modern televisions. Video output is very smooth. vsync_adjust = 2 This makes the video output draw to the screen as fast as possible, and can result in sub-frame lag consistently (independent of your controller and display's built-in lag). However this is the least compatible mode and it may result in unplayable behavior on some televisions using certain cores. The video output is the very smooth. Additionally, because of the way this special mode works there is a mismatch in the refresh rate of the scaled output and the core's original video output. Generally speaking, the rule of thumb is that if you want the smoothest video output and lowest lag then start at vsync_adjust=2 and if a core doesn't work that you want to play on reduce it to 1 or 0 to see if the compatibility is resolved. Your results may vary depending on the display you are connected to and what core you are using.","title":"vsync_adjust"},{"location":"basics/video/#core-exceptions","text":"There are also ways to add exceptions. My monitor doesn't play nice with the low lag setting on the Genesis core. So in my MiSter.ini, I added the following override/exception to the end of the file for just the MiSTer core: [Genesis] vsync_adjust = 0 This makes it so no matter what my vsync_adjust setting is in the upper section, when I use the Genesis core, it will force it to use vsync_adjust=0 (the most compatible mode) every time. You can also add a wildcard to these exceptions so one exception could be applied to multiple cores: [dkong*] vsync_adjust = 1 This will make it so every core that starts with dkong will have the same rule applied to it. You can also make an exception for every single arcade core like so: [arcade] vsync_adjust = 1","title":"Core exceptions"},{"location":"basics/video/#video-processing-options-tutorial","text":"Here's a tutorial that you can follow along to get you started using the powerful video processing options on MiSTer FPGA.","title":"Video Processing Options Tutorial"},{"location":"basics/video/#filters-and-scanlines","text":"MiSTer has the capability to use upscaling filters and scanlines to help enhance the video output or even make it feel similar to a retro CRT television. If you opened the NES core for the first time after setting the MiSter's video output to 1920x1080p and loaded up Duck Tales, then you should see something like this: This can be tweaked a little to make it look a lot nicer to our eyes. First let's go into \"Video Processing\" in the secondary OSD/Menu (press F12 or the menu button you assigned earlier, and then right to see the secondary menu): When you select this it will show you a screen with a bunch of options. Don't get overwhelmed, it's fairly simple when you follow this guide, and you will understand how they work. I'll give you some recommended settings for most of the cores at the end of this tutorial which should be your go-to for now while you get used to things. By default \"Video Filter:\" is set to \"NearNeighbour\". This is a nearest neighbour filter. Basically, to turn 240p video into 1080p video requires these pixels to be made larger. Since 240 doesn't divide evenly into 1080 (1080 / 240 = 4.5), then some of these pixels won't be perfectly square. Nearest neighbour helps fool your eyes into making them seem more square than they actually are. It's filtering the video before it reaches your eyes to make it look better! Select Video filter to change it so you can select a filters file. You will notice the text changes from Video Filter: to Horz filter: . Don't worry about this too much, for any normal rotation games, Horz is for your upscaling filters that soften or sharpen the image. Select the <none> below to browse. It should show you quite a few options. For now select Interpolation (Medium).txt . This is a filter which gives you some softer edges while still maintaining an illusion of square pixels. There we go, those pixels are a bit smoother now: Another added benefit to interpolation is the scrolling looks smoother to the eye when compared to sharper filters like the default Nearest Neighbour setting. Now let's say you want some scanlines, sorta like what CRT's had and some emulators have an option for. Well to do that, we just need to setup the Vert Filter: option like we did the horz filter. You see, we will be filtering horizontal lines from top to bottom (vertically) on the video output. Inside Vert Filter 's From File option, select Scanlines - Brighter.txt . You should see something like this as your options:","title":"Filters (and scanlines)"},{"location":"basics/video/#5x-vertical-crop-1080p-only","text":"Note: this feature only works if your output resolution in your MiSTer.ini is set to a 1080p option!! If you have been following along on your MiSTer, you might notice that the scanlines look darker occasionally. This is because 240p (this game's resolution) doesn't divide equally into 1080p (your resolution on your MiSTer). But 240 does divide into 1200 equally, 5 times 240 equals 1200. So to fix these scanlines looking uneven, we can stretch the image vertically to make all the pixels perfectly square. Go back into the regular core menu and select Video & Audio . There is an option called Vertical Crop . Not all cores have this, but the NES core does happen to, so it's a good example. Go ahead and select the Vertical Crop option to change Disabled to (216p)5X . You will see just a few lines off the top and bottom get cut off. This is okay, original CRT's cut off about the same amount from the top and bottom anyways. Most games don't have information missing at the edge of the top and bottom. Now your vert filter: scanlines - brighter.txt option should have evenly spaced scanlines vertically, and the image will look a lot better.","title":"5x Vertical Crop (1080p only)"},{"location":"basics/video/#shadowmasks","text":"MiSTer FPGA also has another layer options available to use called Shadowmasks . Shadow Masks are able to modify the red, green, blue color channels to create advanced effects, such as simulating the appearance of the grille or mask on an old CRT screen or the pixel layouts of old LCD handheld consoles. There are lots of options, but we are just going to use personally one of the most versatile color shadowmasks for this tutorial, Squished VGA Bright v2.txt . This shadowmask attempts to resemble consumer computer monitors and some tv's which had red, green, and blue phosphors in a particular pattern. Here is a picture of the options after I've added this Shadowmask to the same game's video processing menu:","title":"Shadowmasks"},{"location":"basics/video/#gamma-curves","text":"Gamma is a bit of a tricky thing to explain. Basically, gamma on an old CRT is the relationship between voltage and brightness. Think of a graph, the x-axis is voltage and the y-axis is the \"brightness\" (more accurately called luminance). Modern televisions are (ideally) a totally straight line. Old CRT's have a curve. At medium voltage and brightness it is a lot less brightness than you'd expect. Sorta like this: Image Source Now given that the MiSTer is outputting the linear example, the Gamma filters can restore a similar Gamma curve as you may have been used to with your old television. This is especially helpful because we have just applied a \"brighter\" scanline and a shadowmask (which added a mask of colors across the screen imitating a CRT's phosphors). If you've been following along with this tutorial so far, we're gonna play with Gamma just to see how it looks to your eyes. This is all personal preference. If it looks good to you, great. If someone else doesn't like it, well... tough! :) I will apply a very mild \"Gamma Curve\" called gamma_113.txt which is located in the Pure_Gamma folder when you select the gamma options. This gamma curve is allegedly supposed to get you close to a typical consumer CRT's gamma curve.","title":"Gamma Curves"},{"location":"basics/video/#video-demonstrations","text":"Some people like a good video to see how it's done:","title":"Video demonstrations"},{"location":"basics/video/#5x-mode-video","text":"","title":"5x mode video"},{"location":"basics/video/#gamma-controls-video","text":"","title":"gamma controls video"},{"location":"basics/wifi/","text":"Wifi is totally optional and it's setup is fairly simple with the MiSTer. You will need a compatible dongle, the wifi script (which is provided with the Mr. Fusion image), and a keyboard attached to your MiSTer to type in your WiFi password. Suggested WiFi Adapters You will require a compatible USB WiFi Adapter to use this feature as there is no integrated WiFi on the DE10-Nano or the MiSTer Add-on boards. Not all models of wifi adapters are compatible, so try to stick with decent name brands. Many users have found that most small ASUS, TP-Link, CanaKit, and Edimax wifi USB adapters work out of the box. Here's a few that have been reported to work: ASUS USB AC53 nano rev A1 TP-Link AC1300 Archer T3U or Nano AC600 Archer T2U CanaKit Raspberry Pi WiFi dongle Edimax EW-7612UAn v2 or EW-7811UN or EW-7822ULC Netgear A6100 or A6150 Your results may vary as there may be new hardware revisions of these adapters which are not currently supported. There are ways to compile your own drivers for your device but that is for advanced users. INSERT LINK TO NEW DOC FOR THIS Setup wifi with a script It's easy to connect to WiFi using the wifi.sh script provided with the Mr. Fusion image: Navigate to the scripts menu using the on screen display (OSD). Select the \"wifi\" script and run it. Select your WiFi network's SSID (the name of your WiFi). Type your WiFi password in and press enter. It should connect and ask you to press any key to continue. At the top of the main menu you will see a little wifi icon which indicates you have connected. This setting should be saved and it will automatically connect so long as the adapter is plugged in and your MiSTer is within range of your WiFi network. The manual way to setup wifi In case the script isn't working for you, you can try to manually setup Wifi. This is a slightly more advanced user method so feel free to ask for help from the community before attempting this method. To manually setup WiFi without the script: Edit the file /media/fat/linux/_wpa_supplicant.conf with a text editor that supports Unix/Linux line endings. Replace put_your_SSID_here with your Wifi Network's SSID, and replace put_your_password_here with your WiFi password. Change the country code to the one that matches your country . Rename _wpa_supplicant.conf to wpa_supplicant.conf Reboot the MiSTer. After the MiSTer reboots you should see the wifi icon at the top of the Main Menu's OSD. This may take quite awhile so be patient, the MiSTer is not very fast at connecting to your WiFi network, it's a simple device with simple capabilities.","title":"WiFi"},{"location":"basics/wifi/#suggested-wifi-adapters","text":"You will require a compatible USB WiFi Adapter to use this feature as there is no integrated WiFi on the DE10-Nano or the MiSTer Add-on boards. Not all models of wifi adapters are compatible, so try to stick with decent name brands. Many users have found that most small ASUS, TP-Link, CanaKit, and Edimax wifi USB adapters work out of the box. Here's a few that have been reported to work: ASUS USB AC53 nano rev A1 TP-Link AC1300 Archer T3U or Nano AC600 Archer T2U CanaKit Raspberry Pi WiFi dongle Edimax EW-7612UAn v2 or EW-7811UN or EW-7822ULC Netgear A6100 or A6150 Your results may vary as there may be new hardware revisions of these adapters which are not currently supported. There are ways to compile your own drivers for your device but that is for advanced users. INSERT LINK TO NEW DOC FOR THIS","title":"Suggested WiFi Adapters"},{"location":"basics/wifi/#setup-wifi-with-a-script","text":"It's easy to connect to WiFi using the wifi.sh script provided with the Mr. Fusion image: Navigate to the scripts menu using the on screen display (OSD). Select the \"wifi\" script and run it. Select your WiFi network's SSID (the name of your WiFi). Type your WiFi password in and press enter. It should connect and ask you to press any key to continue. At the top of the main menu you will see a little wifi icon which indicates you have connected. This setting should be saved and it will automatically connect so long as the adapter is plugged in and your MiSTer is within range of your WiFi network.","title":"Setup wifi with a script"},{"location":"basics/wifi/#the-manual-way-to-setup-wifi","text":"In case the script isn't working for you, you can try to manually setup Wifi. This is a slightly more advanced user method so feel free to ask for help from the community before attempting this method. To manually setup WiFi without the script: Edit the file /media/fat/linux/_wpa_supplicant.conf with a text editor that supports Unix/Linux line endings. Replace put_your_SSID_here with your Wifi Network's SSID, and replace put_your_password_here with your WiFi password. Change the country code to the one that matches your country . Rename _wpa_supplicant.conf to wpa_supplicant.conf Reboot the MiSTer. After the MiSTer reboots you should see the wifi icon at the top of the Main Menu's OSD. This may take quite awhile so be patient, the MiSTer is not very fast at connecting to your WiFi network, it's a simple device with simple capabilities.","title":"The manual way to setup wifi"},{"location":"cores/arcade/","text":"Here is a list of the arcade cores that are in the MiSTer Github Repository. (SDRAM section is not filled in completely yet, you should assume the cores require SDRAM) Core Name SDRAM Arkanoid AsteroidsDeluxe \u2714\ufe0f Asteroids Astrocade \u2714\ufe0f ATetris Bagman Berzerk BlackWidow BombJack Breakout BurgerTime BurningRubber CanyonBomber Cave \u2714\ufe0f Centipede ComputerSpace Cosmic \u2714\ufe0f CrazyBalloon CrazyClimber CrazyKong Defender DigDug Dominos DonkeyKong3 DonkeyKongJunior DonkeyKong DottoriKun Druaga Finalizer FoodFight Frenzy Galaga Galaxian Gaplus Gauntlet Gyruss IremM62 IronHorse Jackal \u2714\ufe0f Jailbreak Ladybug LunarLander MarioBros MCR1 MCR2 MCR3Mono MCR3Scroll MCR3 MoonPatrol \u2714\ufe0f MrDo NinjaKun Pacman Pengo Phoenix Pleiads PolyPlay Pong Pooyan Popeye QBert Rallyx RiverPatrol Robotron RushnAttack ScooterShooter Scramble \u2714\ufe0f SEGASYS1 SilverLand SkySkipper SolomonsKey SpaceInvaders \u2714\ufe0f SpaceRace Sprint1 Sprint2 Subs SuperBreakout Tecmo \u2714\ufe0f TIAMC1 TimePilot84 TimePilot TraverseUSA Ultratank VBall \u2714\ufe0f Xevious Zaxxon \u2714\ufe0f ZigZag","title":"Arcade Cores"},{"location":"cores/computer/","text":"Here is a list of the computer cores that are in the MiSTer Github Repository. Core Name System /games/ Folder SDRAM AcornAtom Acorn Atom ./AcornAtom AliceMC10 Matra & Hachette Ordinateur Alice (TRS-80 MC-10 Clone) ./AliceMC10 Altair8800 MITS Altair 8800 ./Altair8800 AmstradPCW Amstrad PCW ./AmstradPCW \u2714\ufe0f Amstrad Amstrad CPC 6128 ./Amstrad \u2714\ufe0f ao486 486DX33 (No FPU) compatible ./AO486 Apogee Apogee BK-01 / Radio-86RK ./APOGEE Apple-II Apple IIe ./Apple-II Apple-I Apple I ./Apple-I Aquarius Mattel Aquarius ./AQUARIUS Archie Acorn Archimedes ./ARCHIE \u2714\ufe0f Atari800 Atari 800 / 800XL / 65XE / 130XE ./Atari800 Optional AtariST Atari ST / STe ./AtariST \u2714\ufe0f BBCMicro BBC Micro B / Master 128K ./BBCMicro BK0011M Elektronika BK (BK-0011M CPU) ./BK0011M \u2714\ufe0f C16 Commodore C16 / Plus/4 ./C16 C64 Commodore 64 / Games System / 128 ./C64 \u2714\ufe0f Chip8 CHIP-8 by Joseph Weisbecker ./Chip8 CoCo2 Tandy Color Computer 2 / Dragon 32 ./CoCo2 CoCo3 Tandy Color Computer 3 ./CoCo3 EDSAC EDSAC ./EDSAC Galaksija Galaksija by Voja Antoni\u0107 ./Galaksija Interac Interact Home Computer ./Interac Jupiter Jupiter Ace ./Jupiter Laser310 Vtech Laser 310 ./Laser MacPlus Macintosh Plus ./MacPlus \u2714\ufe0f Minimig-AGA Commodore Amiga 500 / 600 / 1200 / 4000 / CD32 ./Amiga \u2714\ufe0f MSX Microsoft MSX / MSX2 / Plus / MSX3 / TurboR ./MSX \u2714\ufe0f MultiComp Grant Searle's MultiComp ./MultiComp OndraSPO186 Tesla Ondra SPO-186 ./Ondra_SPO186 Orao PEL Vara\u017edin Orao / Eagle ./ORAO Oric Tangerine Oric / Oric-1 ./Oric PC88 NEC PC8801 MKII SR ./PC8801 PDP1 DEC PDP-1 ./PDP1 PET2001 Commodore PET 2001 ./PET2001 PMD85 Tesla PMD 85 ./PMD85 QL Sinclair QL ./QL \u2714\ufe0f RX-78 Bandai RX-78 ./RX78 SAM-Coupe Miles Gordon Technology SAM Coup\u00e9 ./SAMCOUPE \u2714\ufe0f SharpMZ Sharp MZ ./SharpMZ SordM5 Sord M5 ./Sord M5 Specialist Specialist / \u0421\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442 SVI328 Spectravideo SV-328 ./SVI328 TI-99_4A Texas Instruments TI-99/4A ./TI-99_4A TRS-80 Radio Shack / Tandy TRS-80 Micro Computer System / Model I ./TRS-80 TSConf TSConf (ZX-Evolution Improvement) ./TSConf \u2714\ufe0f UK101 Compukit UK101 ./UK101 Vector-06C Vector-06C / \u0412\u0435\u043a\u0442\u043e\u0440-06\u0426 ./VECTOR06 VIC20 Commodore VIC-20 ./VIC20 X68000 Sharp X68000 ./X68000 \u2714\ufe0f ZX-Spectrum Sinclair ZX Spectrum ./Spectrum \u2714\ufe0f ZX81 Sinclair ZX80 / ZX81 ./ZX81 ZXNext ZX Spectrum Next ./ZXNext","title":"Computer Cores"},{"location":"cores/console/","text":"Here is a list of the console cores that are in the MiSTer Github Repository. Core Name Systems /games/ Folder BIOS SDRAM AY-3-8500 \"Pong-on-a-chip\" ./AY-3-8500 Arcadia Emerson Arcadia 2001 ./Arcadia Astrocade Bally Astrocade ./Astrocade boot.rom = Astrocade BIOS Atari2600 Atari 2600 Atari VCS ./Atari2600 Atari5200 Atari 5200 SuperSystem ./Atari5200 Atari7800 Atari 7800 ProSystem Atari 2600 Support ./Atari7800 boot0.rom = BIOS (optional) \u2714\ufe0f AtariLynx Atari Lynx ./AtariLynx boot.rom = bootrom (lynxboot.img) ChannelF Fairchild Channel F ./ChannelF ColecoVision ColecoVision Sega SG-1000 ./Coleco ./SG1000 \u2714\ufe0f GBA Nintendo Game Boy Advance ./GBA boot.rom = BIOS (recommended) Optional GBA2P 2x Game Boy Advance (2-Player) ./GBA2P boot.rom = BIOS (recommended) \u2714\ufe0f GameBoy Nintendo Game Boy ./Gameboy boot1.rom = Gameboy Color BIOS boot2.rom = autoload a game \u2714\ufe0f Gameboy2P 2x Game Boy (2-Player) ./Gameboy2P boot1.rom = Gameboy Color BIOS boot2.rom = autoload a game \u2714\ufe0f Genesis Sega Genesis Sega Mega Drive ./Genesis Optional Intv Mattel Intellivision ./Intv boot0.rom = exec.bin boot1.rom = grom.bin boot2.rom = sp0256-012.bin boot3.rom = ecs.bin MegaCD Sega CD Sega Mega-CD ./MegaCD boot.rom = BIOS cd_bios.rom = separate folder BIOS \u2714\ufe0f NES Nintendo Entertainment System Famicom Disk System NSF Music Player ./NES boot0.rom = FDS BIOS boot1.rom = NES Cart (optional) boot2.rom = blank FDS image (optional) boot3.rom = .PAL Palette File (optional) \u2714\ufe0f NeoGeo SNK Neo Geo AES & MVS ./NeoGeo 000-lo.lo sfix.sfix sp-s2.sp1 (MVS) neo-epo.sp1 (AES) uni-bios.rom \u2714\ufe0f Odyssey2 Magnavox Odyssey 2 Philips Odyssey 2 Philips Videopac G7000 ./Odyssey2 SMS Sega Master System Sega Game Gear Sega SG-1000 ./SMS ./SG1000 \u2714\ufe0f SNES Super Nintendo Entertainment System Nintendo Satellaview SPC Music Player ./SNES bsx_bios.rom = Satellaview ROM \u2714\ufe0f TurboGrafx16 NEC TurboGrafx-16 / PC Engine CD-ROM\u00b2 / Super CD-ROM\u00b2 Duo / TurboDuo SuperGrafx Arcade Card ./TGFX16 ./TGFX16-CD cd_bios.rom = BIOS Place in tgfx16-cd Optional VC4000 Interton VC4000 Acetronic MPU-1000 Occitane OC2000 ./VC4000 Vectrex Vectrex ./Vectrex WonderSwan Bandai WonderSwan WonderSwan Color SwanCrystal ./WonderSwan boot.rom = WonderSwan bootrom boot1.rom = WonderSwan Color bootrom \u2714\ufe0f","title":"Console Cores"},{"location":"cores/paths/","text":"The standard paths are of the form /media/fat/games/<CORE> , where <CORE> is the core name of the given system. Please check the respective README file for each core to determine the appropriate full path. Standard USB Core Paths They are of the form /media/usb<0..5>/games/<CORE> . Where <0..5> indicates the number of USB drives mounted by the operating system. Standard CIFS Core Paths They are of the form /media/fat/cifs/games/<CORE> . Other Paths There are other valid paths, that are available for backwards-compatibility reasons, and also to ease testing. You should use the standard paths instead whenever possible. Path Priority There is a priority order of core paths. When you plug in a USB drive and it has a folder /games/PSX on it (mounted locally as /media/usb<0..5>/games/PSX when plugged in), then the MiSTer PSX core will look to that folder on the USB drive instead of the local one on the MicroSD at /media/fat/games/PSX . Here is the priority list from Main_MiSTer's file_io.cpp in order of highest priority to lowest: /media/fat /media/usb<0..5> /media/usb<0..5>/games /media/fat/cifs /media/fat/cifs/games /media/fat/games If the core's folder isn't found in any of these it should create the folder.","title":"Core Paths"},{"location":"cores/paths/#standard-usb-core-paths","text":"They are of the form /media/usb<0..5>/games/<CORE> . Where <0..5> indicates the number of USB drives mounted by the operating system.","title":"Standard USB Core Paths"},{"location":"cores/paths/#standard-cifs-core-paths","text":"They are of the form /media/fat/cifs/games/<CORE> .","title":"Standard CIFS Core Paths"},{"location":"cores/paths/#other-paths","text":"There are other valid paths, that are available for backwards-compatibility reasons, and also to ease testing. You should use the standard paths instead whenever possible.","title":"Other Paths"},{"location":"cores/paths/#path-priority","text":"There is a priority order of core paths. When you plug in a USB drive and it has a folder /games/PSX on it (mounted locally as /media/usb<0..5>/games/PSX when plugged in), then the MiSTer PSX core will look to that folder on the USB drive instead of the local one on the MicroSD at /media/fat/games/PSX . Here is the priority list from Main_MiSTer's file_io.cpp in order of highest priority to lowest: /media/fat /media/usb<0..5> /media/usb<0..5>/games /media/fat/cifs /media/fat/cifs/games /media/fat/games If the core's folder isn't found in any of these it should create the folder.","title":"Path Priority"},{"location":"cores/what/","text":"In MiSTer terminology, a \"core\" is the current system that the FPGA is configured to simulate. It is configured as the \"Menu\" core when you power on the MiSTer for the first time. Then, if you use the OSD and go to _Console and then select NES , it will configure the FPGA to be the \"NES\" core. The term \"core\" has been used by Hardware Description Language (HDL) developers in a way which refers to the things that are programmed onto the FPGA. So for instance, the MiSTer FPGA framework uses Intel's \"Altera PLL Core\". This is a chunk of logic that is portable which allows developers to hook up to the clock on the chip. There are HDMI cores, ethernet cores, serial data cores, and so on... However, for MiSTer, a core refers to the system being emulated. So you have the PSX (Playstation) core , the Minimig (Amiga) core , the SNES core , and so many more to explore. What happens when I load a core? Imagine every time you load a core you are connecting a different console, computer, or arcade system to your television. You select the Genesis core in the menu and load it, you have now essentially plugged a Genesis into your television without all the hassle of wrestling with cables. That's the concept. What actually is happening is that .rbf file is reprogramming the FPGA chip to take on a different form. It used to contain the digital logic required to be an NES combined with the MiSTer FPGA core components, and it turned into a chip with the digital logic for the Genesis combined with the the MiSTer FPGA core components. Now, you may be worried that all of this rewriting of the FPGA could reduce it's lifespan. This isn't something to worry about, these kinds of FPGA's (SRAM-based) are considered to have an indefinite number of writes. Many millions of rewrites to the same sector are normal and nothing to worry about. Core updates and issues Cores on MiSTer are the result of the collaboration between many people and extensive testing, sometimes over many years and prior open-source projects. Most console and computer cores have now been compared to original hardware to a high level of precision (e.g. audio capture comparison), with the few issues remaining documented on their respective github repository pages. Please refer to these pages, per core, before submitting any issues. For a list of core repositories, head on over to the MiSTer FPGA GitHub Organization Repositories list for more information. The core links there will bring you to the release folder on github, which will also allow you to find the Issues page and the readme files, ideally listing all available features and limitations in detail per core. There are other unofficial MiSTer FPGA cores out there, but these are not listed here as they may or may not work correctly and that list is always changing.","title":"What Is a Core"},{"location":"cores/what/#what-happens-when-i-load-a-core","text":"Imagine every time you load a core you are connecting a different console, computer, or arcade system to your television. You select the Genesis core in the menu and load it, you have now essentially plugged a Genesis into your television without all the hassle of wrestling with cables. That's the concept. What actually is happening is that .rbf file is reprogramming the FPGA chip to take on a different form. It used to contain the digital logic required to be an NES combined with the MiSTer FPGA core components, and it turned into a chip with the digital logic for the Genesis combined with the the MiSTer FPGA core components. Now, you may be worried that all of this rewriting of the FPGA could reduce it's lifespan. This isn't something to worry about, these kinds of FPGA's (SRAM-based) are considered to have an indefinite number of writes. Many millions of rewrites to the same sector are normal and nothing to worry about.","title":"What happens when I load a core?"},{"location":"cores/what/#core-updates-and-issues","text":"Cores on MiSTer are the result of the collaboration between many people and extensive testing, sometimes over many years and prior open-source projects. Most console and computer cores have now been compared to original hardware to a high level of precision (e.g. audio capture comparison), with the few issues remaining documented on their respective github repository pages. Please refer to these pages, per core, before submitting any issues. For a list of core repositories, head on over to the MiSTer FPGA GitHub Organization Repositories list for more information. The core links there will bring you to the release folder on github, which will also allow you to find the Issues page and the readme files, ideally listing all available features and limitations in detail per core. There are other unofficial MiSTer FPGA cores out there, but these are not listed here as they may or may not work correctly and that list is always changing.","title":"Core updates and issues"},{"location":"cores/features/cheats/","text":"Some of MiSTer's cores have the capability to apply cheats in-game. The cheats are in a specific format and are automatically pulled from gamehacking.org's website when you run the downloader script. These cheat files have specific rules that govern how they can be used. Setup Cheats should be stored in: cheats/system/rom_filename.zip where system is name of the core like NES, SNES, Genesis, etc... So, for example: cheats/NES/Taboo (USA).zip for the NES ROM Taboo (USA).nes The filename of the zip must match the ROM name exactly. Cheats will be loaded automatically when you load a ROM, and can be enabled and disabled from the menu in supported cores. If the .zip cheat file does not match the ROM name, the cheat engine will automatically check the ROM CRC32 and select the appropriate .zip cheat file with matching CRC32 accordingly. ROM name matching has priority over CRC32 checking. Individual cheats are in .gg format and should be stored in zip files. How to use Cheats with CD-ROM images Since CD-ROM images are large, the MiSTer purposefully doesn't do CRC32 hash checks for CD images. You will need to place the cheats you want into the same folder as your cue/bin or CHD file, in order to use cheats with it. Typically the cheat-matching with your CD-ROM image is done by matching the filename of your CUE/BIN, CHD, or ISO with the filename of the cheat zip file. The Playstation core uniquely allows for this method and has an additional method to load the cheat based upon the internal Game ID (e.g. SCUS-94163). Please note, if the cheats do not load, then check the following: The cheat zip file is in the same subfolder as the desired CUE/BIN, CHD, or ISO. The filename of the zip file is identical to the filename of the CUE/BIN, CHD, or ISO. (for the PSX core only) The Game ID of the desired game matches the target Game ID of the zip file. If cheats for the CD game do not work when everything else looks correct, it is possible your version of the game is wrong. Making your own codes All types of cheat codes for 16 bit systems and earlier can be decoded into four pieces of information: An address, a compare value, a replace value, and usually a flag to say if the compare value is used or not. The format for a gg file is in binary as 4 32 bit integers in little-endian byte order. For example, if the Address is 0xFF1CA0 and the compare value is 0xB5 and the replace value is 0xFF , the file would look like this: 01 00 00 00 A0 1C FF 00 B5 00 00 00 FF 00 00 00 The first four bytes are little-endian 0x00000001 for \"compare enabled\", the second four are little-endian address, third set are compare value, and fourth is replace value. Note that not all codes use a compare value. For cheats with multiple codes, simply add another 16 bytes at the end of the file in the same format as the first. You can decode game genie codes into these values with tools like this: https://gamehacking.org/system/nes","title":"Cheats"},{"location":"cores/features/cheats/#setup","text":"Cheats should be stored in: cheats/system/rom_filename.zip where system is name of the core like NES, SNES, Genesis, etc... So, for example: cheats/NES/Taboo (USA).zip for the NES ROM Taboo (USA).nes The filename of the zip must match the ROM name exactly. Cheats will be loaded automatically when you load a ROM, and can be enabled and disabled from the menu in supported cores. If the .zip cheat file does not match the ROM name, the cheat engine will automatically check the ROM CRC32 and select the appropriate .zip cheat file with matching CRC32 accordingly. ROM name matching has priority over CRC32 checking. Individual cheats are in .gg format and should be stored in zip files.","title":"Setup"},{"location":"cores/features/cheats/#how-to-use-cheats-with-cd-rom-images","text":"Since CD-ROM images are large, the MiSTer purposefully doesn't do CRC32 hash checks for CD images. You will need to place the cheats you want into the same folder as your cue/bin or CHD file, in order to use cheats with it. Typically the cheat-matching with your CD-ROM image is done by matching the filename of your CUE/BIN, CHD, or ISO with the filename of the cheat zip file. The Playstation core uniquely allows for this method and has an additional method to load the cheat based upon the internal Game ID (e.g. SCUS-94163). Please note, if the cheats do not load, then check the following: The cheat zip file is in the same subfolder as the desired CUE/BIN, CHD, or ISO. The filename of the zip file is identical to the filename of the CUE/BIN, CHD, or ISO. (for the PSX core only) The Game ID of the desired game matches the target Game ID of the zip file. If cheats for the CD game do not work when everything else looks correct, it is possible your version of the game is wrong.","title":"How to use Cheats with CD-ROM images"},{"location":"cores/features/cheats/#making-your-own-codes","text":"All types of cheat codes for 16 bit systems and earlier can be decoded into four pieces of information: An address, a compare value, a replace value, and usually a flag to say if the compare value is used or not. The format for a gg file is in binary as 4 32 bit integers in little-endian byte order. For example, if the Address is 0xFF1CA0 and the compare value is 0xB5 and the replace value is 0xFF , the file would look like this: 01 00 00 00 A0 1C FF 00 B5 00 00 00 FF 00 00 00 The first four bytes are little-endian 0x00000001 for \"compare enabled\", the second four are little-endian address, third set are compare value, and fourth is replace value. Note that not all codes use a compare value. For cheats with multiple codes, simply add another 16 bytes at the end of the file in the same format as the first. You can decode game genie codes into these values with tools like this: https://gamehacking.org/system/nes","title":"Making your own codes"},{"location":"cores/highlights/atari7800/","text":"","title":"Atari7800"},{"location":"cores/highlights/gb2p/","text":"Game Boy 2-Player Demonstration","title":"Game Boy 2 Player"},{"location":"cores/highlights/gb2p/#game-boy-2-player-demonstration","text":"","title":"Game Boy 2-Player Demonstration"},{"location":"cores/highlights/genesis/","text":"The Genesis core is a port of the fpgagen core to MiSTer, with significant enhancements and additions. Features Composite Blending effect (e.g. Sonic Waterfall transparency) CPU Turbo option (e.g. Road Rash gameplay speed) Increase sprite limit. Audio Filtering options for Model 1, Model 2, Minimal, and No Filter Switch between YM2612 (Model 1) or YM3438 (Model 2/3) FM Synth Multitap: 4-way, Team Player, J-Cart SVP Chip (Virtua Racing for Genesis supported) Auto-Region header detection using the new style and the old style combined . Corrected Aspect Ratio option for 320x224 game resolutions (e.g. Castlevania Moon). Region detection There are two methods of region detection. Header: This method detects a character in the header to determine if the game was intended to be played on a Japanese, European, or American version of the console. This method is default and preferred as it is compatible with the entire commercial lineup. This option uses a region priority setting for multi-region games which had \"JUE\" in the header. Whatever the first region is, will be the region set on load of a multi-region game. File Ext: This method changes the region according to the filename extension of the rom. BIN = Japanese GEN = America MD = Europe There is also a region priority list for multi-region games that had multiple region codes in the header. This is useful if you want to specify a certain region to default to in order of first priority to last (e.g. US>JP>EU will try to load multi-region games in US first, then it will load as JP if no US region code is present, then EU if neither is present). Corrected Aspect Ratio Example Video Composite Effect Example Video Turbo CPU Example Video","title":"Genesis"},{"location":"cores/highlights/genesis/#features","text":"Composite Blending effect (e.g. Sonic Waterfall transparency) CPU Turbo option (e.g. Road Rash gameplay speed) Increase sprite limit. Audio Filtering options for Model 1, Model 2, Minimal, and No Filter Switch between YM2612 (Model 1) or YM3438 (Model 2/3) FM Synth Multitap: 4-way, Team Player, J-Cart SVP Chip (Virtua Racing for Genesis supported) Auto-Region header detection using the new style and the old style combined . Corrected Aspect Ratio option for 320x224 game resolutions (e.g. Castlevania Moon).","title":"Features"},{"location":"cores/highlights/genesis/#region-detection","text":"There are two methods of region detection. Header: This method detects a character in the header to determine if the game was intended to be played on a Japanese, European, or American version of the console. This method is default and preferred as it is compatible with the entire commercial lineup. This option uses a region priority setting for multi-region games which had \"JUE\" in the header. Whatever the first region is, will be the region set on load of a multi-region game. File Ext: This method changes the region according to the filename extension of the rom. BIN = Japanese GEN = America MD = Europe There is also a region priority list for multi-region games that had multiple region codes in the header. This is useful if you want to specify a certain region to default to in order of first priority to last (e.g. US>JP>EU will try to load multi-region games in US first, then it will load as JP if no US region code is present, then EU if neither is present).","title":"Region detection"},{"location":"cores/highlights/genesis/#corrected-aspect-ratio-example-video","text":"","title":"Corrected Aspect Ratio Example Video"},{"location":"cores/highlights/genesis/#composite-effect-example-video","text":"","title":"Composite Effect Example Video"},{"location":"cores/highlights/genesis/#turbo-cpu-example-video","text":"","title":"Turbo CPU Example Video"},{"location":"cores/highlights/nes/","text":"The Nintendo Entertainment System (NES) MiSTer core is packed full of many features to be explored. There are options like automatic Famicom Disk System (FDS) disk swapping, custom palette loading, overscan and screen edge masking, extra sprites hack, and SNAC (so you could use an original Zapper lightgun on a CRT with analog video output). Extra Sprites mode Some NES games would allow more sprites on the screen than the system was typically designed to allow at one time and the sprites would flicker to keep them on the screen. There was a limit to how many sprites could be on the screen at one time. The NES MiSTer core lets you somewhat remove this limit, reducing the amount of flicker that occurs when many sprites are on the screen in games like Rygar. This does not work with all games that have flicker, some flicker was added intentionally by the original developers for other reasons. Extra Sprites (deflicker) Example Video Palettes The NES core has both built-in palettes and the ability to load custom palettes. You may be wondering why the NES core needs palettes. It's just colors, right? Without going into it here, if you want to learn about NES Palettes, watch this YouTube video by NesHacker , and read the pinned comment there as a couple details were technically inaccurate. Basically, the NES does not have a native palette of colors to work with as the colors were not output in the typical red, green, and blue values like other game consoles. So emulators need to come up with palettes that most closely approximate the original viewing experience. This viewing experience would sometimes vary depending on the tv you were watching on, so multiple palette options are made available. This also makes it possible to do fun and ridiculous palettes just for the sake of it, like the virtual boy palette made by RetroSho. Palettes Example Video Famicom Disk System BIOS boot. Download Blank FDS boot2.rom and then place this in ./games/NES/ . Then when you start the core (assuming you already have the FDS bios placed there and renamed to boot0.rom ) it will boot to the FDS BIOS as if you had a blank disk inserted. Famicom Disk System Blank Disk Boot Example Video","title":"NES"},{"location":"cores/highlights/nes/#extra-sprites-mode","text":"Some NES games would allow more sprites on the screen than the system was typically designed to allow at one time and the sprites would flicker to keep them on the screen. There was a limit to how many sprites could be on the screen at one time. The NES MiSTer core lets you somewhat remove this limit, reducing the amount of flicker that occurs when many sprites are on the screen in games like Rygar. This does not work with all games that have flicker, some flicker was added intentionally by the original developers for other reasons.","title":"Extra Sprites mode"},{"location":"cores/highlights/nes/#extra-sprites-deflicker-example-video","text":"","title":"Extra Sprites (deflicker) Example Video"},{"location":"cores/highlights/nes/#palettes","text":"The NES core has both built-in palettes and the ability to load custom palettes. You may be wondering why the NES core needs palettes. It's just colors, right? Without going into it here, if you want to learn about NES Palettes, watch this YouTube video by NesHacker , and read the pinned comment there as a couple details were technically inaccurate. Basically, the NES does not have a native palette of colors to work with as the colors were not output in the typical red, green, and blue values like other game consoles. So emulators need to come up with palettes that most closely approximate the original viewing experience. This viewing experience would sometimes vary depending on the tv you were watching on, so multiple palette options are made available. This also makes it possible to do fun and ridiculous palettes just for the sake of it, like the virtual boy palette made by RetroSho.","title":"Palettes"},{"location":"cores/highlights/nes/#palettes-example-video","text":"","title":"Palettes Example Video"},{"location":"cores/highlights/nes/#famicom-disk-system-bios-boot","text":"Download Blank FDS boot2.rom and then place this in ./games/NES/ . Then when you start the core (assuming you already have the FDS bios placed there and renamed to boot0.rom ) it will boot to the FDS BIOS as if you had a blank disk inserted.","title":"Famicom Disk System BIOS boot."},{"location":"cores/highlights/nes/#famicom-disk-system-blank-disk-boot-example-video","text":"","title":"Famicom Disk System Blank Disk Boot Example Video"},{"location":"cores/highlights/snes/","text":"The Super Nintendo Entertainment System (or SNES) MiSTer core has multiple features like CPU and Super FX chip turbo mode, lightgun support, mouse support, and even changing the WRAM initialization value. In addition to this, it also has support for nearly every single enhancement chip released. It is a very powerful core that was primarily developed by srg320 when he didn't even have original hardware. Enhancement Chip Support Here are the SNES enhancement chips currently supported with some example games they were used in: Super FX AKA GSU-1 (Star Fox, Star Fox 2, Stunt Race FX) Super FX 2 AKA GSU-2 (Super Mario World 2: Yoshi's Island, Doom) CX4 (Only in Mega Man X 2 and Mega Man X 3) DSP-1 (Super Mario Kart and Pilotwings) DSP-2 (Only in Dungeon Master) DSP-3 (Only in SD Gundam GX) DSP-4 (Only in Top Gear 3000) OBC-1 (Only used in Metal Combat: Falcon's Revenge) S-DD1 (Only used in Star Ocean and Street Fighter Alpha 2) SA-1 (Kirby Series, Super Mario RPG) SPC7110 (Far East of Eden Zero, Large Shell beast Story 2) ST1010 (F1 Roc 2 - Race of Champions) S-RTC (Daikaiju Monogatari II) Currently the only enhancement chips not supported are GB-Z80 (Super Game Boy), MX15001TFC (Nintendo Power Flash Cartridges), ST011 (Hayazashi Nidan Morita Shougi), and ST018 (Hayazashi Nidan Morita Shougi 2). This is mostly because the core is already near the limit of what the DE10-Nano's Cyclone V is capable of fitting into it's design. SNES Enancement Chip Example Video Satellaview Support This core also supports Satellaview. You just need the BSX/BS-X rom placed into the ./games/SNES/ folder and renamed to bsx_bios.rom . The core used to require patched versions of the rom to run, but every original Satellaview ROM that didn't require an internet connection, extra peripherals, or something like that will run now without patches. BS-X Satellaview Example Video Super FX Turbo The MiSTer SNES core has a Super FX Turbo option which overclocks the Super FX chip so games run a little faster. Combined with the Turbo CPU option games like Star Fox will have a higher framerate. However, the game will run faster than intended so your results may vary. It is also important to note that the use of such hacks may increase the likelihood of bugs occurring, so please do not report bugs when using Turbo options. Super FX Turbo Example Video","title":"SNES"},{"location":"cores/highlights/snes/#enhancement-chip-support","text":"Here are the SNES enhancement chips currently supported with some example games they were used in: Super FX AKA GSU-1 (Star Fox, Star Fox 2, Stunt Race FX) Super FX 2 AKA GSU-2 (Super Mario World 2: Yoshi's Island, Doom) CX4 (Only in Mega Man X 2 and Mega Man X 3) DSP-1 (Super Mario Kart and Pilotwings) DSP-2 (Only in Dungeon Master) DSP-3 (Only in SD Gundam GX) DSP-4 (Only in Top Gear 3000) OBC-1 (Only used in Metal Combat: Falcon's Revenge) S-DD1 (Only used in Star Ocean and Street Fighter Alpha 2) SA-1 (Kirby Series, Super Mario RPG) SPC7110 (Far East of Eden Zero, Large Shell beast Story 2) ST1010 (F1 Roc 2 - Race of Champions) S-RTC (Daikaiju Monogatari II) Currently the only enhancement chips not supported are GB-Z80 (Super Game Boy), MX15001TFC (Nintendo Power Flash Cartridges), ST011 (Hayazashi Nidan Morita Shougi), and ST018 (Hayazashi Nidan Morita Shougi 2). This is mostly because the core is already near the limit of what the DE10-Nano's Cyclone V is capable of fitting into it's design.","title":"Enhancement Chip Support"},{"location":"cores/highlights/snes/#snes-enancement-chip-example-video","text":"","title":"SNES Enancement Chip Example Video"},{"location":"cores/highlights/snes/#satellaview-support","text":"This core also supports Satellaview. You just need the BSX/BS-X rom placed into the ./games/SNES/ folder and renamed to bsx_bios.rom . The core used to require patched versions of the rom to run, but every original Satellaview ROM that didn't require an internet connection, extra peripherals, or something like that will run now without patches.","title":"Satellaview Support"},{"location":"cores/highlights/snes/#bs-x-satellaview-example-video","text":"","title":"BS-X Satellaview Example Video"},{"location":"cores/highlights/snes/#super-fx-turbo","text":"The MiSTer SNES core has a Super FX Turbo option which overclocks the Super FX chip so games run a little faster. Combined with the Turbo CPU option games like Star Fox will have a higher framerate. However, the game will run faster than intended so your results may vary. It is also important to note that the use of such hacks may increase the likelihood of bugs occurring, so please do not report bugs when using Turbo options.","title":"Super FX Turbo"},{"location":"cores/highlights/snes/#super-fx-turbo-example-video","text":"","title":"Super FX Turbo Example Video"},{"location":"cores/highlights/tgfx16/","text":"show off system, use github readme as reference, focus on features","title":"Tgfx16"},{"location":"developer/analogsim/","text":"Article by MiSTer core developer Jegor van Opdorp (SupraDeus/jopdorp) Many old computers have analog parts, for example audio boards that have partly analog synthesis and old desktop computers with tape input. Currently there is no convenient way to directly simulate electronic circuits, for example based in their spice netlists, in real time on the MiSTer. So to implement these type of circuits in fpga, you will have to come up with some kind of simulation of the behavior of the electronic circuit. The Arcade-Battlezone core is an example of a core with analog sound synthesis. A way to approach the problem: Find youtube video's of people playing the actual game, to get some idea of the sounds it has. Play the game in an emulator, paying extra attention to sounds that do not sound the same in the emulator as in the video of the actual machine. Identify the digital and analog parts of the schematic. One thing to keep in mind is that the digital parts run at the system clock speed, or sometimes a separate clock source that is closer to the audible frequency spectrum, in Arcade Battlezone there is a 12khz input to a digital noise circuit, of which the output goes into and analog integrator circuit. This creates an axplosion sound. The implementation of this sound is listed at \"inverting amplifier\" below. The analog parts will be outputting at audio sample rate, i.e. 48khz Implement all the digital parts, common digital components in sound systems are: linear feedback shift register: An implementation of a similar circuit in arcade battlezone can be found here : flipflops, like the jk flipflop, implemented here : Identify analog circuits with isolated behavior, i.e. 1 input, 1 output. These can be individually implemented and tested. Identify common, easily recognisable and implementable parts, such as: low pass filters This can be implemented using an iir low pass filter, you can find the parameters using this spreadsheet Some implementations of iir filters: Blockade Low Pass Filter Blockade Infinite Impulse Response (IIR) 1st Order Filter A simpler type: Blockade Infinite Impulse Response (IIR) Filter high pass filters inverting amplifiers This is essentially a sign inversion of the sample, followed by a (fixed sign) multiplication. non inverting amplifiers This is just a (fixed sign) multiplication of the sample differential amplifiers inverting integrators or This is essentially a sign inversion of the sample, followed by a multiplication, with the result being stored in a reg. The multiplication is run repeatedly, each audio clock cycle, Resulting in a \"release/decay\" type amplifier envelope. An example of an implementation of this can be found here other common opamp circuits additive mixers An additive mixer just adds up/averages two signals. If the resistance is higher for one signal than the other, this will result in a volume difference between them. All the parts that are going to need more attention, make note of what these parts are an try to guess what they are for. Differentiators and integrators combined with 555 timers and noise inputs can be tricky. Implement the mixers Implement the filters Implement the difficult parts of the circuit: Implement the circuit in a simlator. Figure out what input goes into the circuit when the game gets played. Run the simulation with the correct input and save the output as a wav file Analyse the output by looking at it in a wave editor like audacity and listening to it. Is the input always the same? (not noise as input) Does the circuit always response in the same way? (not generating noise) Sample the output of the simulation Convert the sample into an array literal and trigger it as needed, usually the sample will just be triggered by a pulse in this case. If the analog circuit has noise as input or has variable inputs such as a number controlled frequency or speed you will need to: make a mathematical model of the analog circuit. implement the model in an easy to use programming language such as python compare the output of the mathematical model with the output of the circuit simulation using the same inputs. They have to be close, but not identical, but they should be identical to the hearing. rework your mathematical model to not have to use any dividers in real time, this is done in two steps by algebra by precalculating any left-over divisions into division lookup-tables you can also create other kind of lookup tables, for example a sine wave. implement the mathematical model in HDL verify the outputs of the HDL with a tesbench hook up the chip to the rest of our core! Handy links: Developer journeys of analog circuit implementations MiSTer - Head On Informational resources For finding the right values of a filter: https://www.micromodeler.com/dsp/ Common operational amplifier uses, such as differentiators and integrators: https://en.wikipedia.org/wiki/Operational_amplifier_applications Explanation of how 555 timers work: https://www.electronics-tutorials.ws/waveforms/555_oscillator.html Spice programming https://www.allaboutcircuits.com/textbook/reference/chpt-7/fundamentals-spice-programming/ Code examples example of a noise-based sound python implementation in a notebook example of a piece of python code that generates a lookup table example of a common digital noise generator example of a sine-based sound that takes noise as input example of a script that can take the output of a spice simulation and generate a wav file from it example of a spice netlist for a noise based sound Tooling https://www.falstad.com/circuit/ http://ngspice.sourceforge.net/ https://www.audacityteam.org/","title":"Analog Simulation"},{"location":"developer/analogsim/#a-way-to-approach-the-problem","text":"Find youtube video's of people playing the actual game, to get some idea of the sounds it has. Play the game in an emulator, paying extra attention to sounds that do not sound the same in the emulator as in the video of the actual machine. Identify the digital and analog parts of the schematic. One thing to keep in mind is that the digital parts run at the system clock speed, or sometimes a separate clock source that is closer to the audible frequency spectrum, in Arcade Battlezone there is a 12khz input to a digital noise circuit, of which the output goes into and analog integrator circuit. This creates an axplosion sound. The implementation of this sound is listed at \"inverting amplifier\" below. The analog parts will be outputting at audio sample rate, i.e. 48khz Implement all the digital parts, common digital components in sound systems are: linear feedback shift register: An implementation of a similar circuit in arcade battlezone can be found here : flipflops, like the jk flipflop, implemented here : Identify analog circuits with isolated behavior, i.e. 1 input, 1 output. These can be individually implemented and tested. Identify common, easily recognisable and implementable parts, such as: low pass filters This can be implemented using an iir low pass filter, you can find the parameters using this spreadsheet Some implementations of iir filters: Blockade Low Pass Filter Blockade Infinite Impulse Response (IIR) 1st Order Filter A simpler type: Blockade Infinite Impulse Response (IIR) Filter high pass filters inverting amplifiers This is essentially a sign inversion of the sample, followed by a (fixed sign) multiplication. non inverting amplifiers This is just a (fixed sign) multiplication of the sample differential amplifiers inverting integrators or This is essentially a sign inversion of the sample, followed by a multiplication, with the result being stored in a reg. The multiplication is run repeatedly, each audio clock cycle, Resulting in a \"release/decay\" type amplifier envelope. An example of an implementation of this can be found here other common opamp circuits additive mixers An additive mixer just adds up/averages two signals. If the resistance is higher for one signal than the other, this will result in a volume difference between them. All the parts that are going to need more attention, make note of what these parts are an try to guess what they are for. Differentiators and integrators combined with 555 timers and noise inputs can be tricky. Implement the mixers Implement the filters Implement the difficult parts of the circuit: Implement the circuit in a simlator. Figure out what input goes into the circuit when the game gets played. Run the simulation with the correct input and save the output as a wav file Analyse the output by looking at it in a wave editor like audacity and listening to it. Is the input always the same? (not noise as input) Does the circuit always response in the same way? (not generating noise) Sample the output of the simulation Convert the sample into an array literal and trigger it as needed, usually the sample will just be triggered by a pulse in this case. If the analog circuit has noise as input or has variable inputs such as a number controlled frequency or speed you will need to: make a mathematical model of the analog circuit. implement the model in an easy to use programming language such as python compare the output of the mathematical model with the output of the circuit simulation using the same inputs. They have to be close, but not identical, but they should be identical to the hearing. rework your mathematical model to not have to use any dividers in real time, this is done in two steps by algebra by precalculating any left-over divisions into division lookup-tables you can also create other kind of lookup tables, for example a sine wave. implement the mathematical model in HDL verify the outputs of the HDL with a tesbench hook up the chip to the rest of our core!","title":"A way to approach the problem:"},{"location":"developer/analogsim/#handy-links","text":"","title":"Handy links:"},{"location":"developer/analogsim/#developer-journeys-of-analog-circuit-implementations","text":"MiSTer - Head On","title":"Developer journeys of analog circuit implementations"},{"location":"developer/analogsim/#informational-resources","text":"For finding the right values of a filter: https://www.micromodeler.com/dsp/ Common operational amplifier uses, such as differentiators and integrators: https://en.wikipedia.org/wiki/Operational_amplifier_applications Explanation of how 555 timers work: https://www.electronics-tutorials.ws/waveforms/555_oscillator.html Spice programming https://www.allaboutcircuits.com/textbook/reference/chpt-7/fundamentals-spice-programming/","title":"Informational resources"},{"location":"developer/analogsim/#code-examples","text":"example of a noise-based sound python implementation in a notebook example of a piece of python code that generates a lookup table example of a common digital noise generator example of a sine-based sound that takes noise as input example of a script that can take the output of a spice simulation and generate a wav file from it example of a spice netlist for a noise based sound","title":"Code examples"},{"location":"developer/analogsim/#tooling","text":"https://www.falstad.com/circuit/ http://ngspice.sourceforge.net/ https://www.audacityteam.org/","title":"Tooling"},{"location":"developer/conf_str/","text":"MiSTer provides an on-screen display (OSD) that can be toggled on and off by pressing F12 on your keyboard (or OSD button). For each core that is loaded, this menu can be configured to add specific options for that core. The top-level module for the cores is emu . This does NOT mean emu is the top-level module for the project, but rather it is the top-level module for our purposes. The emu module is typically found in the SystemVerilog file ( *.sv extension) with the same name as the project. As an example, the Arcade-Galaga project has it's top-level module at Arcade-Galaga.sv . The configuration string is stored in the variable CONF_STR of the emu module. This variable is passed to the hps_io module that handles sending it to the processor to be read when necessary. Each line of the configuration string is delimited with a semicolon. Most cores have a Status Bit Map placed at the top of the CONF_STR section. When developing a core, please use this as it's a helpful reference which aids in collaboration. This reference is edited by fellow developers to communicate which status bits are occupied. Only one option can occupy status[8] so this is important. Status Bit Map For example with nothing occupied: // Status Bit Map: // Upper Lower // 0 1 2 3 4 5 6 // 01234567890123456789012345678901 23456789012345678901234567890123 // 0123456789ABCDEFGHIJKLMNOPQRSTUV 0123456789ABCDEFGHIJKLMNOPQRSTUV // If you add a status bit option like O89 to the core configuration string, this is going to use the first group of status bits on the left since the \"O\" for option is capitalized (marked Upper). Then it's going to use 8 and 9, this is from the bottom row (which is alphanumeric). So you would update the index after using these like so: // Status Bit Map: // Upper Lower // 0 1 2 3 4 5 6 // 01234567890123456789012345678901 23456789012345678901234567890123 // 0123456789ABCDEFGHIJKLMNOPQRSTUV 0123456789ABCDEFGHIJKLMNOPQRSTUV // XX This will communicate to other developers that status[9:8] are occupied and should not be used. Valid options for the menu [] - means optional parameter C[,{Text}] - Enables a cheat menu entry with the label {Text} . CHEAT - like DIP, for arcades with a cheat system D{Index} - Prefix which disables the option if menumask[Index] is set. d{Index} - Same as 'D', but disables the option if menumask[Index] is NOT set. DIP - in arcade cores, this will display the DIP menu from the MRA F[S][#],{Ext}[,{Text}][,{Address}] - Load file button. {Ext} - a concatenated list of 3 character file extensions. For example, BINGEN would be BIN and GEN extensions. Optional {Text} string is the text that is displayed before the extensions like \"Load RAM\". If {Text} is not specified, then default is \"Load *\". Optional [S] - core supports save files, load a file, and mount a save for reading or writing # is explicit index (or index is generated from line number if index not given). Optional {Address} - load file directly into DDRAM at this address ioctl_index from hps_io will be: ioctl_index[5:0] = index(explicit or auto), ioctl_index[7:6] = extension index FC[#],{Ext}[,{Text}][,{Address}] - Open file and remember it, useful for remembering an alternative rom, config, or other type of file. See F for how the options work. H{Index} - Prefix which hides the option if menumask[Index] is set. h{Index} - Same as H , but hides the option if menumask[Index] is NOT set. O{Index1}[{Index2}],{Name},{Options...} - Option button that allows you to select between various choices. {Index1} and {Index2} are values from 0-9 and A-V (like Hex but it extends from A-V instead of A-F). This represents all 31 bits. First and second index are the range of bits that will be set in the status register. {Name} is what is shown to describe the option. {Options...} - a list of comma separated options. P{#},{Title} - Creates sub-page for options with {Title} . P{#} - Prefix to place the option into specific {#} page. This is added before O# but after something like d# . (e.g. \"d5P1o2,Vertical Crop,Disabled,216p(5x);\", is correct and \"P1d5o2,Vertical Crop,Disabled,216p(5x);\", is incorrect and the menu options will not work.) R{Index},{Name} - Same as T option but closes the OSD after selecting. Convenient for Reset option. S{Slot},{Ext}[,{Text}] - Mount SD card button. {Slot} - a value from 0-3. Up to four images can be mounted at the same time. {Ext} - same as in F option. (Optional) {Text} - The text that is displayed before the extensions like \"Load RAM\". If {Text} is not specified, then default is \"Mount *\". T{Index},{Name} - Trigger button. This is a simple button that will pulse HIGH of specified {Index} bit in status register. A perfect example of this is for a reset button. {Name} is the text that describes the button function. -[,TEXT] - empty (or with TEXT ) line. Lower case options o , t , r equal their upper case variants with adding 32 to status bit indexes. Non-OSD options These must be placed at the bottom of the configuration string: J[1],{Button1}[,{Button2},...] - J1 means lock keyboard to joystick emulation mode. Useful for keyboard-less systems such as consoles. {Button1},{Button2},... is list of joystick buttons used in the core. Up to 12 buttons can be listed. Analog axis are not defined here. The user just needs to map them through the Menu core. jn,{SNES Button Name1},[,{SNES Button2},...] - this sets the default mapping of the buttons. ie: jn,A would map joystick bit 4 to the A button on a SNES style controller automatically jp - same as jn but used when gamepad_defaults=1 in MiSTer.INI . Typically refers to positional mapping relative to a SNES controller V,{Version String} - Version string. {Version String} is the version string. Takes the core name and appends version string for name to display. I,INFO1,INFO2,...,INFO255 - INFO1-INFO255 lines to display as OSD info (top left corner of screen). DEFMRA,{mra name} - default MRA (ie: Puckman.mra) to be used when core is uploaded by USB blaster (debug) jn vs. jp and mapping conventions jn mapping is the default. jp mapping is used when the INI file has gamepad_defaults=1 the only difference in the two mappings is the \"philosophy\" of how they are expected to work The difference is one of convention when mapping buttons: * jn is name-base mapping * jp is position-based mapping What does this mean? Consider how the internal gamepad is defined on MiSTer: Internally, controllers are mapped in the menu core to a SNES-style gamepad The button order on the internal MiSTer gamepad is ABXYLR + Start + Select That is: button 1=A, button 2=B, and so on. With \"jn\" mapping: * the convention is to map button A of the core to the internal \"SNES A\" button. * If the core has no button \"A\", this would be the first button. * Second button would be \"SNES B\", and so forth. * This is because the name or order of the button matches the original definition (ABYXLR etc) With \"jp\" mapping: * the convention is to consider the physical location of each button * For a Genesis 3-button controller that has A, B, C as buttons, mapping would be \"SNES Y, SNES B, SNES A\" * This is because YBA on a SNES gamepad are the lower 3 buttons of the controller","title":"Core Configuration String"},{"location":"developer/conf_str/#status-bit-map","text":"For example with nothing occupied: // Status Bit Map: // Upper Lower // 0 1 2 3 4 5 6 // 01234567890123456789012345678901 23456789012345678901234567890123 // 0123456789ABCDEFGHIJKLMNOPQRSTUV 0123456789ABCDEFGHIJKLMNOPQRSTUV // If you add a status bit option like O89 to the core configuration string, this is going to use the first group of status bits on the left since the \"O\" for option is capitalized (marked Upper). Then it's going to use 8 and 9, this is from the bottom row (which is alphanumeric). So you would update the index after using these like so: // Status Bit Map: // Upper Lower // 0 1 2 3 4 5 6 // 01234567890123456789012345678901 23456789012345678901234567890123 // 0123456789ABCDEFGHIJKLMNOPQRSTUV 0123456789ABCDEFGHIJKLMNOPQRSTUV // XX This will communicate to other developers that status[9:8] are occupied and should not be used.","title":"Status Bit Map"},{"location":"developer/conf_str/#valid-options-for-the-menu","text":"[] - means optional parameter C[,{Text}] - Enables a cheat menu entry with the label {Text} . CHEAT - like DIP, for arcades with a cheat system D{Index} - Prefix which disables the option if menumask[Index] is set. d{Index} - Same as 'D', but disables the option if menumask[Index] is NOT set. DIP - in arcade cores, this will display the DIP menu from the MRA F[S][#],{Ext}[,{Text}][,{Address}] - Load file button. {Ext} - a concatenated list of 3 character file extensions. For example, BINGEN would be BIN and GEN extensions. Optional {Text} string is the text that is displayed before the extensions like \"Load RAM\". If {Text} is not specified, then default is \"Load *\". Optional [S] - core supports save files, load a file, and mount a save for reading or writing # is explicit index (or index is generated from line number if index not given). Optional {Address} - load file directly into DDRAM at this address ioctl_index from hps_io will be: ioctl_index[5:0] = index(explicit or auto), ioctl_index[7:6] = extension index FC[#],{Ext}[,{Text}][,{Address}] - Open file and remember it, useful for remembering an alternative rom, config, or other type of file. See F for how the options work. H{Index} - Prefix which hides the option if menumask[Index] is set. h{Index} - Same as H , but hides the option if menumask[Index] is NOT set. O{Index1}[{Index2}],{Name},{Options...} - Option button that allows you to select between various choices. {Index1} and {Index2} are values from 0-9 and A-V (like Hex but it extends from A-V instead of A-F). This represents all 31 bits. First and second index are the range of bits that will be set in the status register. {Name} is what is shown to describe the option. {Options...} - a list of comma separated options. P{#},{Title} - Creates sub-page for options with {Title} . P{#} - Prefix to place the option into specific {#} page. This is added before O# but after something like d# . (e.g. \"d5P1o2,Vertical Crop,Disabled,216p(5x);\", is correct and \"P1d5o2,Vertical Crop,Disabled,216p(5x);\", is incorrect and the menu options will not work.) R{Index},{Name} - Same as T option but closes the OSD after selecting. Convenient for Reset option. S{Slot},{Ext}[,{Text}] - Mount SD card button. {Slot} - a value from 0-3. Up to four images can be mounted at the same time. {Ext} - same as in F option. (Optional) {Text} - The text that is displayed before the extensions like \"Load RAM\". If {Text} is not specified, then default is \"Mount *\". T{Index},{Name} - Trigger button. This is a simple button that will pulse HIGH of specified {Index} bit in status register. A perfect example of this is for a reset button. {Name} is the text that describes the button function. -[,TEXT] - empty (or with TEXT ) line. Lower case options o , t , r equal their upper case variants with adding 32 to status bit indexes.","title":"Valid options for the menu"},{"location":"developer/conf_str/#non-osd-options","text":"These must be placed at the bottom of the configuration string: J[1],{Button1}[,{Button2},...] - J1 means lock keyboard to joystick emulation mode. Useful for keyboard-less systems such as consoles. {Button1},{Button2},... is list of joystick buttons used in the core. Up to 12 buttons can be listed. Analog axis are not defined here. The user just needs to map them through the Menu core. jn,{SNES Button Name1},[,{SNES Button2},...] - this sets the default mapping of the buttons. ie: jn,A would map joystick bit 4 to the A button on a SNES style controller automatically jp - same as jn but used when gamepad_defaults=1 in MiSTer.INI . Typically refers to positional mapping relative to a SNES controller V,{Version String} - Version string. {Version String} is the version string. Takes the core name and appends version string for name to display. I,INFO1,INFO2,...,INFO255 - INFO1-INFO255 lines to display as OSD info (top left corner of screen). DEFMRA,{mra name} - default MRA (ie: Puckman.mra) to be used when core is uploaded by USB blaster (debug)","title":"Non-OSD options"},{"location":"developer/conf_str/#jn-vs-jp-and-mapping-conventions","text":"jn mapping is the default. jp mapping is used when the INI file has gamepad_defaults=1 the only difference in the two mappings is the \"philosophy\" of how they are expected to work The difference is one of convention when mapping buttons: * jn is name-base mapping * jp is position-based mapping What does this mean? Consider how the internal gamepad is defined on MiSTer: Internally, controllers are mapped in the menu core to a SNES-style gamepad The button order on the internal MiSTer gamepad is ABXYLR + Start + Select That is: button 1=A, button 2=B, and so on. With \"jn\" mapping: * the convention is to map button A of the core to the internal \"SNES A\" button. * If the core has no button \"A\", this would be the first button. * Second button would be \"SNES B\", and so forth. * This is because the name or order of the button matches the original definition (ABYXLR etc) With \"jp\" mapping: * the convention is to consider the physical location of each button * For a Genesis 3-button controller that has A, B, C as buttons, mapping would be \"SNES Y, SNES B, SNES A\" * This is because YBA on a SNES gamepad are the lower 3 buttons of the controller","title":"jn vs. jp and mapping conventions"},{"location":"developer/headonsoundpcb/","text":"Article by MiSTer core developer Jegor van Opdorp (SupraDeus/jopdorp) This article contains a description of how we implemented the sound PCB of the game Head On from SEGA/Gremlin. First steps We analyzed the schematics of the Head On sound PCB board. Identifying circuits for individual sounds, and repeated parts of the circuit. We talked about what we thought is what, and decided to start with the car sound. Finding real footage Searching the web for video's with the sounds, we found a couple, but the quality was bad: https://discord.com/channels/@me/950484205664612402/951108401801338890 https://discord.com/channels/@me/950484205664612402/951139287745851425 JimmyStones contacted the maker of the sound board, to see if he had some tips. He seemed willing to help, but not familiar enough with the fpga domain to join the project. The JimmyStones found someone who own a cabinet and was able to obtain some good sound recordings. This gave us a way to validate our results. Simulating and analyzing Car We started by implementing the car sound in the falstad simulator. It took some tweaking, mostly getting things like the diode type and transistor beta values right. We managed to get a result that sounded pretty much like the real deal. This is the final circuit: car_circuit.txt it can be loaded into the falstad simulator Frow there it is possible to record a wav file, which we used to analyze the sound. It turns out that the car sound consists of a repeating waveform that looks like this: The frequency of this waveform is modulated. It starts inaudibly low. Then when the game starts, it follows an upward curve until a limit. When the \"high speed\" button is pressed it momentarily drops in frequency and follows a quick upward curve, and follows a downward curve when it is released, like so: Based on this information we were able to come up wih an implementation strategy: Turn the waveform into an array Turn the frequency response curve into trhee lookup tables: One for the start of the game One for when the \"high speed\" button is pressed One for when the \"high speed button is not pressed Follow the frequnce curve as needed, according to the current state. Bonus The bonus sound seemed simple at first, but turned out to be more complicated than we thought. When the bonus input goes high shortly, and then low. The sound is quite simple, like so: We came up with a algorithm to describe this sound, and implemented it in a SystemVerilog module. The algorithm: Bonus is a pulse generator, that goes to 100% amplitude immediately when the bonus pin goes high. The pulse is always running, just multiplied by an amplitude. When the bonus pin goes low, the sound decreases in volume following a an exponential curve. When the bonus pin is low, the pulse period is 3/4 of the length, resulting in a perfect fourth The amplitude halves every 28 ms so it's something like: Amplitude = MaxAmplitude-((0.976^time_in_miliseconds)*MaxAmplitude) MaxAmplitude should be set to the highest number that fits, in for example 32 bits, to keep precision. Normally I use fixed point math with 32 of precision for multiplications like this. Later we will convert to 16 bits precision, for the output. The pulse period when the bonus pin is high has length 0.002746s, and it's high 75% of the time so equivalent to a loop of: {1,1,1,0} The final result looks like it goes through a very slight low pass filter. This basically results in a loop of: {97{2}, 1, 33{0}, 1} At 48khz this results in a wavelengths of 0.00275s We implemented this in SystemVerilog like so: module bonus ( input clk , input clk_48KHz_en , input bonus_en , output reg [ 15 : 0 ] audio_out = 0 ); localparam MAX_AMPLITUDE = 1 << 18 << 14 ; reg [ 1 : 0 ] WAVEFORM_SLOW [ 131 : 0 ]; reg [ 1 : 0 ] WAVEFORM_FAST [ 98 : 0 ]; assign WAVEFORM_SLOW [ 97 ] = 1 ; assign WAVEFORM_SLOW [ 131 ] = 1 ; assign WAVEFORM_FAST [ 73 ] = 1 ; assign WAVEFORM_FAST [ 98 ] = 1 ; genvar i ; generate for ( i = 0 ; i <= 96 ; i = i + 1 ) begin assign WAVEFORM_SLOW [ i ] = 2 ; end for ( i = 98 ; i <= 130 ; i = i + 1 ) begin assign WAVEFORM_SLOW [ i ] = 0 ; end endgenerate genvar j ; generate for ( j = 0 ; j <= 72 ; j = j + 1 ) begin assign WAVEFORM_FAST [ j ] = 2 ; end for ( j = 74 ; j <= 97 ; j = j + 1 ) begin assign WAVEFORM_FAST [ j ] = 0 ; end endgenerate localparam AMPLITUDE_RATIO_PER_TIMESTEP_18 = 262008 ; // z^(28ms*48khz) = 0.5, so z = 0.99948, 0.99948 * 2^18 = 262008 reg [ 9 : 0 ] current_sample = 0 ; reg [ 68 : 0 ] amplitude = 0 ; reg last_bonus_en = 0 ; localparam SLOW_TO_FAST_RATIO_16 = 87381 ; // 4/3 * 2^16 = 87381.3333333 reg [ 15 : 0 ] map_slow_to_fast = (( current_sample * SLOW_TO_FAST_RATIO_16 ) >> 16 ); always_ff @( posedge clk ) begin if ( clk_48KHz_en ) begin last_bonus_en <= bonus_en ; if ( bonus_en ) begin amplitude <= MAX_AMPLITUDE ; if ( current_sample == 131 ) begin current_sample <= 0 ; end else begin current_sample <= current_sample + 1 ; end audio_out <= ( amplitude * WAVEFORM_SLOW [ current_sample ]) >> 18 ; end else begin if ( last_bonus_en ) begin current_sample <= map_slow_to_fast ; audio_out <= ( amplitude * WAVEFORM_SLOW [ current_sample ]) >> 18 ; end else begin if ( current_sample >= 98 ) begin current_sample <= 0 ; end else begin current_sample <= current_sample + 1 ; end audio_out <= ( amplitude * WAVEFORM_FAST [ current_sample ]) >> 18 ; end amplitude <= ( AMPLITUDE_RATIO_PER_TIMESTEP_18 * amplitude ) >> 18 ; end end end endmodule But it turned out that this was not the whole story. At the end of the game, the bonus pin goes high for a longer time, which triggers a different effect, where the frequency of the tone gets modulated in a more complex way. We had to go back to simulation, where it turned out that the NOT gated at the bottom had the wrong voltage threshold assigned to them. While this did not change the short bonus sound, which the machine makes when a jewel is picked up, it does change the sound when the bonus pin goes high for a longer period. It turned out that the Falstad simulator was not fast enough to simulate this circuit though. We then turned to LTspice see if that was quick enough.","title":"Head On Sound PCB Implementation"},{"location":"developer/headonsoundpcb/#first-steps","text":"We analyzed the schematics of the Head On sound PCB board. Identifying circuits for individual sounds, and repeated parts of the circuit. We talked about what we thought is what, and decided to start with the car sound.","title":"First steps"},{"location":"developer/headonsoundpcb/#finding-real-footage","text":"Searching the web for video's with the sounds, we found a couple, but the quality was bad: https://discord.com/channels/@me/950484205664612402/951108401801338890 https://discord.com/channels/@me/950484205664612402/951139287745851425 JimmyStones contacted the maker of the sound board, to see if he had some tips. He seemed willing to help, but not familiar enough with the fpga domain to join the project. The JimmyStones found someone who own a cabinet and was able to obtain some good sound recordings. This gave us a way to validate our results.","title":"Finding real footage"},{"location":"developer/headonsoundpcb/#simulating-and-analyzing","text":"","title":"Simulating and analyzing"},{"location":"developer/headonsoundpcb/#car","text":"We started by implementing the car sound in the falstad simulator. It took some tweaking, mostly getting things like the diode type and transistor beta values right. We managed to get a result that sounded pretty much like the real deal. This is the final circuit: car_circuit.txt it can be loaded into the falstad simulator Frow there it is possible to record a wav file, which we used to analyze the sound. It turns out that the car sound consists of a repeating waveform that looks like this: The frequency of this waveform is modulated. It starts inaudibly low. Then when the game starts, it follows an upward curve until a limit. When the \"high speed\" button is pressed it momentarily drops in frequency and follows a quick upward curve, and follows a downward curve when it is released, like so: Based on this information we were able to come up wih an implementation strategy: Turn the waveform into an array Turn the frequency response curve into trhee lookup tables: One for the start of the game One for when the \"high speed\" button is pressed One for when the \"high speed button is not pressed Follow the frequnce curve as needed, according to the current state.","title":"Car"},{"location":"developer/headonsoundpcb/#bonus","text":"The bonus sound seemed simple at first, but turned out to be more complicated than we thought. When the bonus input goes high shortly, and then low. The sound is quite simple, like so: We came up with a algorithm to describe this sound, and implemented it in a SystemVerilog module.","title":"Bonus"},{"location":"developer/headonsoundpcb/#the-algorithm","text":"Bonus is a pulse generator, that goes to 100% amplitude immediately when the bonus pin goes high. The pulse is always running, just multiplied by an amplitude. When the bonus pin goes low, the sound decreases in volume following a an exponential curve. When the bonus pin is low, the pulse period is 3/4 of the length, resulting in a perfect fourth The amplitude halves every 28 ms so it's something like: Amplitude = MaxAmplitude-((0.976^time_in_miliseconds)*MaxAmplitude) MaxAmplitude should be set to the highest number that fits, in for example 32 bits, to keep precision. Normally I use fixed point math with 32 of precision for multiplications like this. Later we will convert to 16 bits precision, for the output. The pulse period when the bonus pin is high has length 0.002746s, and it's high 75% of the time so equivalent to a loop of: {1,1,1,0} The final result looks like it goes through a very slight low pass filter. This basically results in a loop of: {97{2}, 1, 33{0}, 1} At 48khz this results in a wavelengths of 0.00275s We implemented this in SystemVerilog like so: module bonus ( input clk , input clk_48KHz_en , input bonus_en , output reg [ 15 : 0 ] audio_out = 0 ); localparam MAX_AMPLITUDE = 1 << 18 << 14 ; reg [ 1 : 0 ] WAVEFORM_SLOW [ 131 : 0 ]; reg [ 1 : 0 ] WAVEFORM_FAST [ 98 : 0 ]; assign WAVEFORM_SLOW [ 97 ] = 1 ; assign WAVEFORM_SLOW [ 131 ] = 1 ; assign WAVEFORM_FAST [ 73 ] = 1 ; assign WAVEFORM_FAST [ 98 ] = 1 ; genvar i ; generate for ( i = 0 ; i <= 96 ; i = i + 1 ) begin assign WAVEFORM_SLOW [ i ] = 2 ; end for ( i = 98 ; i <= 130 ; i = i + 1 ) begin assign WAVEFORM_SLOW [ i ] = 0 ; end endgenerate genvar j ; generate for ( j = 0 ; j <= 72 ; j = j + 1 ) begin assign WAVEFORM_FAST [ j ] = 2 ; end for ( j = 74 ; j <= 97 ; j = j + 1 ) begin assign WAVEFORM_FAST [ j ] = 0 ; end endgenerate localparam AMPLITUDE_RATIO_PER_TIMESTEP_18 = 262008 ; // z^(28ms*48khz) = 0.5, so z = 0.99948, 0.99948 * 2^18 = 262008 reg [ 9 : 0 ] current_sample = 0 ; reg [ 68 : 0 ] amplitude = 0 ; reg last_bonus_en = 0 ; localparam SLOW_TO_FAST_RATIO_16 = 87381 ; // 4/3 * 2^16 = 87381.3333333 reg [ 15 : 0 ] map_slow_to_fast = (( current_sample * SLOW_TO_FAST_RATIO_16 ) >> 16 ); always_ff @( posedge clk ) begin if ( clk_48KHz_en ) begin last_bonus_en <= bonus_en ; if ( bonus_en ) begin amplitude <= MAX_AMPLITUDE ; if ( current_sample == 131 ) begin current_sample <= 0 ; end else begin current_sample <= current_sample + 1 ; end audio_out <= ( amplitude * WAVEFORM_SLOW [ current_sample ]) >> 18 ; end else begin if ( last_bonus_en ) begin current_sample <= map_slow_to_fast ; audio_out <= ( amplitude * WAVEFORM_SLOW [ current_sample ]) >> 18 ; end else begin if ( current_sample >= 98 ) begin current_sample <= 0 ; end else begin current_sample <= current_sample + 1 ; end audio_out <= ( amplitude * WAVEFORM_FAST [ current_sample ]) >> 18 ; end amplitude <= ( AMPLITUDE_RATIO_PER_TIMESTEP_18 * amplitude ) >> 18 ; end end end endmodule But it turned out that this was not the whole story. At the end of the game, the bonus pin goes high for a longer time, which triggers a different effect, where the frequency of the tone gets modulated in a more complex way. We had to go back to simulation, where it turned out that the NOT gated at the bottom had the wrong voltage threshold assigned to them. While this did not change the short bonus sound, which the machine makes when a jewel is picked up, it does change the sound when the bonus pin goes high for a longer period. It turned out that the Falstad simulator was not fast enough to simulate this circuit though. We then turned to LTspice see if that was quick enough.","title":"The algorithm:"},{"location":"developer/links/","text":"Here's some useful links for experienced and new developers: FPGA Tutorials Alanswx's MiSTer Tutorials series FPGA4Fun My First FPGA MiSTer Development Resources MiSTer FPGA Core Template JimmyStones' Verilator Template JimmyStones' Generic Pause Module JimmyStones' Generic HiScores Module Compiling the Linux Kernel Compiling the bootloader Compiling Main_MiSTer - Arm Cross Compiling USB Blaster for Debugging Quartus Lite 17.0.2 Download Links Quartus Lite 17.0.2 for Windows Quartus Lite 17.0.2 for Linux Quartus 17.0 Help DE10-Nano Resources DE10-Nano Rev. B2/C Manual DE10-Nano Schematic General Development Resources Various Licenses and Comments about Them","title":"Useful Links"},{"location":"developer/links/#fpga-tutorials","text":"Alanswx's MiSTer Tutorials series FPGA4Fun My First FPGA","title":"FPGA Tutorials"},{"location":"developer/links/#mister-development-resources","text":"MiSTer FPGA Core Template JimmyStones' Verilator Template JimmyStones' Generic Pause Module JimmyStones' Generic HiScores Module Compiling the Linux Kernel Compiling the bootloader Compiling Main_MiSTer - Arm Cross Compiling USB Blaster for Debugging","title":"MiSTer Development Resources"},{"location":"developer/links/#quartus-lite-1702-download-links","text":"Quartus Lite 17.0.2 for Windows Quartus Lite 17.0.2 for Linux Quartus 17.0 Help","title":"Quartus Lite 17.0.2 Download Links"},{"location":"developer/links/#de10-nano-resources","text":"DE10-Nano Rev. B2/C Manual DE10-Nano Schematic","title":"DE10-Nano Resources"},{"location":"developer/links/#general-development-resources","text":"Various Licenses and Comments about Them","title":"General Development Resources"},{"location":"developer/mra/","text":"This page explains most of the intricacies of the way MiSTer handles ROMs for Arcade systems. MRA Format Because some arcade boards can change games by just putting in new roms, it made sense to move the RBF files out of sight from the menu list, and browse the MRA files instead. These MRA files specify which RBF file to use, and which mame rom zip files to create on the fly into a rom to pass to the arcade core. They will create the old a.pacman.rom style rom on the fly from mame roms, either merged or non-merged. Here is an example of where the files might go: /_Arcade/<game name>.mra /_Arcade/cores/<game rbf>.rbf /_Arcade/mame/<mame rom>.zip /_Arcade/hbmame/<hbmame rom>.zip There are other locations for these files based on search paths. MRA Format <misterromdescription> <name> Donkey Kong (US set 1) </name> <mratimestamp> 201911270000 </mratimestamp> <mameversion> 0216 </mameversion> <setname> dkong </setname> <year> 1981 </year> <manufacturer> Nintendo of America </manufacturer> <category> Maze / Monkeys </category> <category> Platform </category> <category> Platform / Mario Bros. </category> <rbf> DonkeyKong </rbf> <!-- switches element taken from \"Pac-Man (Midway).mra\"; for demonstration purposes only --> <switches default= \"FF,FF,C9\" > <dip bits= \"15\" name= \"Cabinet\" ids= \"Cocktail,Upright\" /> <dip bits= \"16,17\" name= \"Coinage\" ids= \"2c/1cr,1c/1cr,1c/2cr,Free Play\" values= \"3,1,2,0\" /> <dip bits= \"18,19\" name= \"Lives\" ids= \"1,2,3,5\" /> <dip bits= \"20,21\" name= \"Bonus Life After\" ids= \"10000,15000,20000,None\" /> <dip bits= \"22\" name= \"Difficulty\" ids= \"Hard,Normal\" /> </switches> <buttons names= \"Jump,Start 1P,Start 2P,Coin\" default= \"A,Start,Select,R\" /> <!-- rom index 1 or any other index can pass additional information to a rom. useful to say this rom is game A or game 1. Use it in case of multiple games for the same RBF, ie: Dig Dug 2, Mappy --> <rom index= \"1\" > <part> 0A </part> </rom> <!-- romstruct element taken from \"Two Tigers.mra\"; for demonstration purposes only --> <romstruct> ROM structure 00000 - 0BFFF 48k CPU1 0C000 - 0FFFF 16k CPU2 10000 - 13FFF 16k GFX1 14000 - 1BFFF 32k GFX2 </romstruct> <!-- the nvram node is used to download and upload the nvram memory. When the user hits \"Save Settings\" in the OSD it triggers ioctl_upload. This isn't available in Donkey Kong because it didn't originally have NVRAM --> <nvram index= \"4\" size= \"1024\" /> <!-- rom index 0 is the standard rom. The zip will be added to the name inside the part, unless the part has it's own zip. The md5 will be checked at the end. A file not found error is reported before an md5 error. --> <rom index= \"0\" zip= \"dkong.zip\" md5= \"05fb1dd1ce6a786c538275d5776b1db1\" type= \"merged|nonmerged|split\" > <part crc= \"ba70b88b\" name= \"c_5et_g.bin\" /> <!-- interleave element taken from \"Crater Raider.mra\"; for demonstration purposes only --> <interleave output= \"32\" > <part crc= \"579a8e36\" name= \"crvid.a4\" map= \"0001\" /> <part crc= \"2c2f5b29\" name= \"crvid.a3\" map= \"0001\" /> <part crc= \"5bf954e0\" name= \"crvid.a6\" map= \"0010\" /> <part crc= \"9bdec312\" name= \"crvid.a5\" map= \"0010\" /> <part crc= \"4b913498\" name= \"crvid.a8\" map= \"0100\" /> <part crc= \"9fa307d5\" name= \"crvid.a7\" map= \"0100\" /> <part crc= \"7a22d6bc\" name= \"crvid.a10\" map= \"1000\" /> <part crc= \"811f152d\" name= \"crvid.a9\" map= \"1000\" /> </interleave> <!-- begin kill screen fix --> <patch offset= \"0xf7d\" > FE 04 38 02 3E 04 47 A7 17 A7 17 A7 17 80 80 C6 28 </patch> <!-- end kill screen fix --> <part crc= \"d6412358\" name= \"c-2j.bpr\" /> <part crc= \"b869b8f5\" zip= \"another.zip\" name= \"v-5e.bpr\" /> <part crc= \"b869b8f5\" name= \"v-5e.bpr\" offset= \"1024\" length= \"1024\" /> <part repeat= \"3328\" > 00 </part> <part> 80 80 80 80 80 80 7F 7F 7F 7F 7F 7F 7F 80 80 80 </part> </rom> <!-- If the first rom0 fails the md5 checksum, it will go ahead and try again if another entry is present. Otherwise it will skip the additional entries. --> <rom index= \"0\" zip= \"dkong.zip\" md5= \"05fb1dd1ce6a786c538275d5776b1db1\" > </rom> </misterromdescription> When creating a core you can pass additional data in using ioctl_index > 0. // Retrieve Title No. always @( posedge clk_sys ) begin if ( ioctl_wr & ( ioctl_index == 1 )) tno <= ioctl_dout [ 3 : 0 ]; end Explanation for XML elements and attributes name : As an element this indicates how the rom should be called. The value should be taken from MAME. As an attribute this indicates an external rom file (or part thereof) that should be loaded by MiSTer. mratimestamp : This indicates the date on which the .mra file was created (useful for other users to determine if there is a newer version of the .mra file available to which they should upgrade). The date format is yyyymmdd. mameversion : This indicates on which version of a MAME romset the *.mra file is based (which version was used for testing). The dot in MAME's version numbering is omitted. setname : This indicates the name of the romset used as given by MAME. It is used to overwrite the core ID specified in the *.rbf file so that individual settings can be saved on a per romset basis. year : This indicates the year the game was released. The format is YYYY and the value should be taken from MAME. manufacturer : This indicates the manufacturer of the game. The value should be taken from MAME. rbf : This indicates the filename (sans path and extension) of the core that should be used to run the game. buttons : This indicates the default button mapping for the game. As the name implies, it only implies to buttons, not to directional controls. The names attribute specifies how the buttons are called in the MiSTer OSD while the default attribute specifies how the buttons are mapped to the virtual MiSTer gamepad . switches : This is to define the dip switches present on the arcade board. As this is a bit more complex, there is a specific section for it below. nvram : This tells MiSTer to save the NVRAM data on Save Settings in the OSD. If an NVRAM was saved, it will be sent to the core as well romstruct : This is to give information about the rom structure, how the rom memory is mapped. Information contained herein is intended as a comment for other developers and not actually used by MiSTer. remark : This element is intended for general remarks. Information contained herein is intended as a comment for other developers and not actually used by MiSTer. rom : Part, patch and interleave elements must have a rom element as a parent element. An index attribute with a value of 1 is used to pass information to multigame cores, which machine configuration to use. For passing actual rom data you need an index value of 0. The md5 attribute is used to specify the md5 checksum. The md5 checksum is calculated and checked by MiSTer after the whole rom is created according to the given .mra file. You can use the Linux console to find out the checksum calculated by MiSTer when it starts the core (the command line to do so is '/media/fat/MiSTer rbffilename mrafilename'). Roms whose checksum differ from the one specified in the .mra file won't load. Specifying the md5 checksum as \u201cnone\u201d will disable this check. part : The part element is only allowed inside a rom element. It is used for specifying a part of the rom. The content of a part can either be embedded as a hex value into the .mra file itself (if copyright law allows) or there can be a reference to an external file via the name attribute. If the external file is in a different zip file than the parent rom element, the filename of the zip file must be specified via the zip * attribute. The crc attribute specifies the CRC32 checksum of the respective part (format: eight hex digits). If a crc value is specified, MiSTer will try to select the appropriate file by crc (and only revert to the filename specified by the attribute name, if the crc value does not match). This increases compatibility of the *.mra file with different MAME versions of the romset. As crc values are only relevant for external files, a crc value should only be given to a part element when there is a reference to an external file. The repeat attribute only applies to embedded parts and indicates for how long (not how many times) the sequence should be repeated. By default decimal numbers are assumed. Hex numbers must be preceded with \"0x\". Inside the rom element, the offset and length attributes only apply to external files. To use the offset attribute for internal data, the patch element must be used. Offset indicates the location inside the file from where MiSTer should start reading and length indicates the length of the sequence that MiSTer should be reading. By default decimal numbers are assumed. Hex numbers must be preceded with \"0x\". The map attribute specifies to only read certain parts of the corresponding part element. For example a value of \"0001\" (binary) means to read only every fourth byte while a value of \"1010\" (binary) means to read only every first and third byte. To byteswap a part you need to set a map attribute value of 21 (decimal) and enclose the respective part element in an interleave tag. patch : The patch element is only allowed inside a rom element. It is applied after the whole rom is created from its parts and overwrites the content of the rom with the content of the patch element, starting from the specified offset and for the length of the patch element's content. interleave : The interleave element is only allowed inside a rom element and can only be used as parent element to one or more part elements. Together with the mandatory output attribute the interleave element can be used to specify that the children part elements should be read in a certain way. For example an output-value of \"32\" (decimal) indicates that the children part elements ROM data should be treated as 32 bit. Dip Switches Dip switch support in the latest version of MRA is used instead of the status bits. The DIP config str is listed in the core, and the core is responsible for reading the up to 64bits of dip data that is sent via ioctl_index 254. reg [ 7 : 0 ] sw [ 8 ]; always @( posedge clk_sys ) if ( ioctl_wr && ( ioctl_index == 254 ) && ! ioctl_addr [ 24 : 3 ]) sw [ ioctl_addr [ 2 : 0 ]] <= ioctl_dout ; Switches is the dip switch setting. The default are the default bytes. These are used so you can default the arcade into the proper factory settings. This is useful when the factory settings aren't all OFF/OFF/OFF. Note that in the default hexadecimal string, the leftmost byte refers to DIP bits 7:0, the next byte to 15:8 and so on. The most significant byte thus occupies the rightmost part of the string. <switches default= \"FF,FF,C9\" > The value C9 will apply to DIP bits 23:16. The dip tag let's you put in a dip switch entry. The bit number (starting at 0) is based on the way the core was written. Often MAME source code can be used to understand the bits. The numbering will depend on the rom used, the arcade core, and how things are laid out. bits : bit number to fill out sent to the core in ioctl_data name : title for the OSD ids : title for each option in the OSD values : if you want the values to be different than 0,1,2,3 you can reorder them <dip bits= \"16,17\" name= \"Coinage\" ids= \"2c/1cr,1c/1cr,1c/2cr,Free Play\" values= \"3,1,2,0\" />","title":"Arcade ROMS and MRA Files"},{"location":"developer/mra/#mra-format","text":"Because some arcade boards can change games by just putting in new roms, it made sense to move the RBF files out of sight from the menu list, and browse the MRA files instead. These MRA files specify which RBF file to use, and which mame rom zip files to create on the fly into a rom to pass to the arcade core. They will create the old a.pacman.rom style rom on the fly from mame roms, either merged or non-merged.","title":"MRA Format"},{"location":"developer/mra/#here-is-an-example-of-where-the-files-might-go","text":"/_Arcade/<game name>.mra /_Arcade/cores/<game rbf>.rbf /_Arcade/mame/<mame rom>.zip /_Arcade/hbmame/<hbmame rom>.zip There are other locations for these files based on search paths.","title":"Here is an example of where the files might go:"},{"location":"developer/mra/#mra-format_1","text":"<misterromdescription> <name> Donkey Kong (US set 1) </name> <mratimestamp> 201911270000 </mratimestamp> <mameversion> 0216 </mameversion> <setname> dkong </setname> <year> 1981 </year> <manufacturer> Nintendo of America </manufacturer> <category> Maze / Monkeys </category> <category> Platform </category> <category> Platform / Mario Bros. </category> <rbf> DonkeyKong </rbf> <!-- switches element taken from \"Pac-Man (Midway).mra\"; for demonstration purposes only --> <switches default= \"FF,FF,C9\" > <dip bits= \"15\" name= \"Cabinet\" ids= \"Cocktail,Upright\" /> <dip bits= \"16,17\" name= \"Coinage\" ids= \"2c/1cr,1c/1cr,1c/2cr,Free Play\" values= \"3,1,2,0\" /> <dip bits= \"18,19\" name= \"Lives\" ids= \"1,2,3,5\" /> <dip bits= \"20,21\" name= \"Bonus Life After\" ids= \"10000,15000,20000,None\" /> <dip bits= \"22\" name= \"Difficulty\" ids= \"Hard,Normal\" /> </switches> <buttons names= \"Jump,Start 1P,Start 2P,Coin\" default= \"A,Start,Select,R\" /> <!-- rom index 1 or any other index can pass additional information to a rom. useful to say this rom is game A or game 1. Use it in case of multiple games for the same RBF, ie: Dig Dug 2, Mappy --> <rom index= \"1\" > <part> 0A </part> </rom> <!-- romstruct element taken from \"Two Tigers.mra\"; for demonstration purposes only --> <romstruct> ROM structure 00000 - 0BFFF 48k CPU1 0C000 - 0FFFF 16k CPU2 10000 - 13FFF 16k GFX1 14000 - 1BFFF 32k GFX2 </romstruct> <!-- the nvram node is used to download and upload the nvram memory. When the user hits \"Save Settings\" in the OSD it triggers ioctl_upload. This isn't available in Donkey Kong because it didn't originally have NVRAM --> <nvram index= \"4\" size= \"1024\" /> <!-- rom index 0 is the standard rom. The zip will be added to the name inside the part, unless the part has it's own zip. The md5 will be checked at the end. A file not found error is reported before an md5 error. --> <rom index= \"0\" zip= \"dkong.zip\" md5= \"05fb1dd1ce6a786c538275d5776b1db1\" type= \"merged|nonmerged|split\" > <part crc= \"ba70b88b\" name= \"c_5et_g.bin\" /> <!-- interleave element taken from \"Crater Raider.mra\"; for demonstration purposes only --> <interleave output= \"32\" > <part crc= \"579a8e36\" name= \"crvid.a4\" map= \"0001\" /> <part crc= \"2c2f5b29\" name= \"crvid.a3\" map= \"0001\" /> <part crc= \"5bf954e0\" name= \"crvid.a6\" map= \"0010\" /> <part crc= \"9bdec312\" name= \"crvid.a5\" map= \"0010\" /> <part crc= \"4b913498\" name= \"crvid.a8\" map= \"0100\" /> <part crc= \"9fa307d5\" name= \"crvid.a7\" map= \"0100\" /> <part crc= \"7a22d6bc\" name= \"crvid.a10\" map= \"1000\" /> <part crc= \"811f152d\" name= \"crvid.a9\" map= \"1000\" /> </interleave> <!-- begin kill screen fix --> <patch offset= \"0xf7d\" > FE 04 38 02 3E 04 47 A7 17 A7 17 A7 17 80 80 C6 28 </patch> <!-- end kill screen fix --> <part crc= \"d6412358\" name= \"c-2j.bpr\" /> <part crc= \"b869b8f5\" zip= \"another.zip\" name= \"v-5e.bpr\" /> <part crc= \"b869b8f5\" name= \"v-5e.bpr\" offset= \"1024\" length= \"1024\" /> <part repeat= \"3328\" > 00 </part> <part> 80 80 80 80 80 80 7F 7F 7F 7F 7F 7F 7F 80 80 80 </part> </rom> <!-- If the first rom0 fails the md5 checksum, it will go ahead and try again if another entry is present. Otherwise it will skip the additional entries. --> <rom index= \"0\" zip= \"dkong.zip\" md5= \"05fb1dd1ce6a786c538275d5776b1db1\" > </rom> </misterromdescription> When creating a core you can pass additional data in using ioctl_index > 0. // Retrieve Title No. always @( posedge clk_sys ) begin if ( ioctl_wr & ( ioctl_index == 1 )) tno <= ioctl_dout [ 3 : 0 ]; end","title":"MRA Format"},{"location":"developer/mra/#explanation-for-xml-elements-and-attributes","text":"name : As an element this indicates how the rom should be called. The value should be taken from MAME. As an attribute this indicates an external rom file (or part thereof) that should be loaded by MiSTer. mratimestamp : This indicates the date on which the .mra file was created (useful for other users to determine if there is a newer version of the .mra file available to which they should upgrade). The date format is yyyymmdd. mameversion : This indicates on which version of a MAME romset the *.mra file is based (which version was used for testing). The dot in MAME's version numbering is omitted. setname : This indicates the name of the romset used as given by MAME. It is used to overwrite the core ID specified in the *.rbf file so that individual settings can be saved on a per romset basis. year : This indicates the year the game was released. The format is YYYY and the value should be taken from MAME. manufacturer : This indicates the manufacturer of the game. The value should be taken from MAME. rbf : This indicates the filename (sans path and extension) of the core that should be used to run the game. buttons : This indicates the default button mapping for the game. As the name implies, it only implies to buttons, not to directional controls. The names attribute specifies how the buttons are called in the MiSTer OSD while the default attribute specifies how the buttons are mapped to the virtual MiSTer gamepad . switches : This is to define the dip switches present on the arcade board. As this is a bit more complex, there is a specific section for it below. nvram : This tells MiSTer to save the NVRAM data on Save Settings in the OSD. If an NVRAM was saved, it will be sent to the core as well romstruct : This is to give information about the rom structure, how the rom memory is mapped. Information contained herein is intended as a comment for other developers and not actually used by MiSTer. remark : This element is intended for general remarks. Information contained herein is intended as a comment for other developers and not actually used by MiSTer. rom : Part, patch and interleave elements must have a rom element as a parent element. An index attribute with a value of 1 is used to pass information to multigame cores, which machine configuration to use. For passing actual rom data you need an index value of 0. The md5 attribute is used to specify the md5 checksum. The md5 checksum is calculated and checked by MiSTer after the whole rom is created according to the given .mra file. You can use the Linux console to find out the checksum calculated by MiSTer when it starts the core (the command line to do so is '/media/fat/MiSTer rbffilename mrafilename'). Roms whose checksum differ from the one specified in the .mra file won't load. Specifying the md5 checksum as \u201cnone\u201d will disable this check. part : The part element is only allowed inside a rom element. It is used for specifying a part of the rom. The content of a part can either be embedded as a hex value into the .mra file itself (if copyright law allows) or there can be a reference to an external file via the name attribute. If the external file is in a different zip file than the parent rom element, the filename of the zip file must be specified via the zip * attribute. The crc attribute specifies the CRC32 checksum of the respective part (format: eight hex digits). If a crc value is specified, MiSTer will try to select the appropriate file by crc (and only revert to the filename specified by the attribute name, if the crc value does not match). This increases compatibility of the *.mra file with different MAME versions of the romset. As crc values are only relevant for external files, a crc value should only be given to a part element when there is a reference to an external file. The repeat attribute only applies to embedded parts and indicates for how long (not how many times) the sequence should be repeated. By default decimal numbers are assumed. Hex numbers must be preceded with \"0x\". Inside the rom element, the offset and length attributes only apply to external files. To use the offset attribute for internal data, the patch element must be used. Offset indicates the location inside the file from where MiSTer should start reading and length indicates the length of the sequence that MiSTer should be reading. By default decimal numbers are assumed. Hex numbers must be preceded with \"0x\". The map attribute specifies to only read certain parts of the corresponding part element. For example a value of \"0001\" (binary) means to read only every fourth byte while a value of \"1010\" (binary) means to read only every first and third byte. To byteswap a part you need to set a map attribute value of 21 (decimal) and enclose the respective part element in an interleave tag. patch : The patch element is only allowed inside a rom element. It is applied after the whole rom is created from its parts and overwrites the content of the rom with the content of the patch element, starting from the specified offset and for the length of the patch element's content. interleave : The interleave element is only allowed inside a rom element and can only be used as parent element to one or more part elements. Together with the mandatory output attribute the interleave element can be used to specify that the children part elements should be read in a certain way. For example an output-value of \"32\" (decimal) indicates that the children part elements ROM data should be treated as 32 bit.","title":"Explanation for XML elements and attributes"},{"location":"developer/mra/#dip-switches","text":"Dip switch support in the latest version of MRA is used instead of the status bits. The DIP config str is listed in the core, and the core is responsible for reading the up to 64bits of dip data that is sent via ioctl_index 254. reg [ 7 : 0 ] sw [ 8 ]; always @( posedge clk_sys ) if ( ioctl_wr && ( ioctl_index == 254 ) && ! ioctl_addr [ 24 : 3 ]) sw [ ioctl_addr [ 2 : 0 ]] <= ioctl_dout ; Switches is the dip switch setting. The default are the default bytes. These are used so you can default the arcade into the proper factory settings. This is useful when the factory settings aren't all OFF/OFF/OFF. Note that in the default hexadecimal string, the leftmost byte refers to DIP bits 7:0, the next byte to 15:8 and so on. The most significant byte thus occupies the rightmost part of the string. <switches default= \"FF,FF,C9\" > The value C9 will apply to DIP bits 23:16. The dip tag let's you put in a dip switch entry. The bit number (starting at 0) is based on the way the core was written. Often MAME source code can be used to understand the bits. The numbering will depend on the rom used, the arcade core, and how things are laid out. bits : bit number to fill out sent to the core in ioctl_data name : title for the OSD ids : title for each option in the OSD values : if you want the values to be different than 0,1,2,3 you can reorder them <dip bits= \"16,17\" name= \"Coinage\" ids= \"2c/1cr,1c/1cr,1c/2cr,Free Play\" values= \"3,1,2,0\" />","title":"Dip Switches"},{"location":"developer/principles/","text":"Here's some tips and guidelines when contributing to the MiSTer project. Indent with tabs, not spaces This may be a controversial subject to some, however there is good reason to indent with tabs instead of spaces in this instance. The project is uploaded to github and spaces are not handled that well by github in terms of diff compares, git blame, formatting, etc... Tabs are more compatible and will be easier for everyone to work with. Comment your code when appropriate It may take some extra time, but it saves everyone, including yourself, time in the long run. Make sure to be relatively thorough in commenting your code. For example, a good example of commented code from the Atari7800 core in TIA.sv starting at line 786: module playfield ( input clk , // Master clock input reset , // System reset input logic clkp , // Pixel Clock input clock_t hclk , // Horizontal clock phase 2 input reflect , // Control playfield, 1 makes right half mirror image input cnt , // center signal, high means right half input rhb , // Reset HBlank signal input [ 19 : 0 ] pfc , // Combined playfield registers output logic pf // Playfield graphics ); When instantiating this module, this dev added a comment to the end of all of her Inputs and Outputs. One shouldn't assume everyone else knows that hclk is Horizontal clock phase 2 even if the name makes sense to yourself. Other good examples of good comments are separating sections of assignments or port instantiations by category, or explaining the \"Why\" behind a particularly unintuitive section of code. However there is such a thing as commenting your code too much. This should also be avoided. Here is an example: // The 16-bit Color Look Up Table wire [ 7 : 0 ] color_lut [ 16 ] = '{ 8'd0 , 8'd27 , 8'd49 , 8'd71 , 8'd87 , 8'd103 , 8'd119 , 8'd130 , 8'd146 , 8'd157 , 8'd174 , 8'd190 , 8'd206 , 8'd228 , 8'd255 , 8'd255 wire TRANSP_DETECT ; // Transparency Detection }; It's obvious that this is a color look up table because the wire is named color_lut so that doesn't need to be described. It's obvious that TRANSP_DETECT is for transparency detection. For an extreme and deliberately funny example: ////////////////////////////////// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~ /// /// REGION PRIORITY HANDLING /// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~ /// ////////////////////////////////// case ( status [ 28 : 27 ]) // Status Bits 27 through 28 // Region priority is in CONF_STR section at line 256 of this file // If line 256 is no longer valid then here is a reference to what it says: // \"D2ORS,Priority,US>EU>JP,EU>US>JP,US>JP>EU,JP>US>EU;\", // O = Option, R and S are the status bits. // 2 status bits means there are 4 combinations of options // Case statements for this begin with 0 and end in 3 // Since there were two switches and 4 options as explained above you can treat 0-3 as 1-4 if you'd like // First Case Statement (0 is actually the first one) 0 : if ( hdr_u ) region_req <= 1 ; // NTSC-U Region else if ( hdr_e ) region_req <= 2 ; // PAL Region else if ( hdr_j ) region_req <= 0 ; // NTSC-J Region else region_req <= 1 ; // Set to NTSC-U if there is no region in the header // Second Case Statement (1 is actually the second one) 1 : if ( hdr_e ) region_req <= 2 ; // PAL Region else if ( hdr_u ) region_req <= 1 ; // NTSC-U Region else if ( hdr_j ) region_req <= 0 ; // NTSC-J Region else region_req <= 2 ; // Set to PAL if there is no region in the header // Third Case Statement (2 is actually the third one) 2 : if ( hdr_u ) region_req <= 1 ; // NTSC-U Region else if ( hdr_j ) region_req <= 0 ; // NTSC-J Region else if ( hdr_e ) region_req <= 2 ; // PAL Region else region_req <= 1 ; // Set to NTSC-U if there is region in the header // Fourth Case Statement (3 is actually the fourth one) 3 : if ( hdr_j ) region_req <= 0 ; // NTSC-J Region else if ( hdr_u ) region_req <= 1 ; // NTSC-U Region else if ( hdr_e ) region_req <= 2 ; // PAL Region else region_req <= 0 ; // Set to NTSC-U if there is region in the header endcase // End of the case statement // Okay I can put things that aren't in the case statement down here ////////////////////////////////////////////// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ /// /// END REGION OF REGION PRIORITY HANDLING /// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ /// ////////////////////////////////////////////// Please don't do things like this. Align ends, assignments, and proper indentation Try to keep similar elements in our code aligned for readability purposes, for example, in the EEPROM_24C0x.sv file from NES_MiSTer, this: // savestate assign SS_MAP1_BACK [ 2 : 0 ] = ( state == STATE_STANDBY ) ? 3'd0 : ( state == STATE_TEST ) ? 3'd1 : ( state == STATE_ADDRESS ) ? 3'd2 : ( state == STATE_WRITE ) ? 3'd3 : 3'd4 ; ...is a lot easier to read than this: assign SS_MAP1_BACK [ 2 : 0 ] = ( state == STATE_STANDBY ) ? 3'd0 : ( state == STATE_TEST ) ? 3'd1 : ( state == STATE_ADDRESS ) ? 3'd2 : ( state == STATE_WRITE ) ? 3'd3 : 3'd4 ; Sure, they both do the same thing, but it was much easier to parse what each thing did quickly. SystemVerilog is not a strongly typed language with regards to indentations, so you won't get compilation errors if you fail to indent your ends accurately. But we should indent them appropriately anyways. Another example: always @( posedge clk ) begin if ( rst ) q <= 0 ; else if ( d ) q <= ~ q ; else q <= q ; end is much easier to read than: always @( posedge clk ) begin if ( rst ) q <= 0 ; else if ( d ) q <= ~ q ; else q <= q ; end Both will succesfully compile and be functionally identical, but it takes a little longer for our mind to parse on first glance. Aligning comments at the end of a line is also helpful in improving readability as shown in the playfield module example near the top of this page. Naming things to be easily understood In EEPROM_STM95 in the Genesis core, this module's port instantiation uses _n to signify that the signal is \"active low\": module STM95XXX ( //... input hold_n , // Hold (active low) input cs_n , // Chip Select (active low) input wp_n , // Write Protect (active low) //... ); It's also commented, but now you know after reading this that anytime a signal with _n is used, that is an active low signal, it doesn't need to be described as active low in a comment each time it is used from then on. If you run out of DSP or Logic space accidentally If you run out of space in compilation, you might be accidentally implying your code to be put into DSP, which is very limited. You can specify that the compiler use logic instead by using the multstyle : ( * multstyle = \"logic\" * ) module myModule ( input clk ) This will force this module into logic space instead of it ever using DSP or block ram. Also you can force a module into DSP the same way with (* multstyle = \"dsp\" *) . The multstyle attribute can be used for Module declarations, variable declarations, and binary expressions.","title":"Tips and Guidelines"},{"location":"developer/principles/#indent-with-tabs-not-spaces","text":"This may be a controversial subject to some, however there is good reason to indent with tabs instead of spaces in this instance. The project is uploaded to github and spaces are not handled that well by github in terms of diff compares, git blame, formatting, etc... Tabs are more compatible and will be easier for everyone to work with.","title":"Indent with tabs, not spaces"},{"location":"developer/principles/#comment-your-code-when-appropriate","text":"It may take some extra time, but it saves everyone, including yourself, time in the long run. Make sure to be relatively thorough in commenting your code. For example, a good example of commented code from the Atari7800 core in TIA.sv starting at line 786: module playfield ( input clk , // Master clock input reset , // System reset input logic clkp , // Pixel Clock input clock_t hclk , // Horizontal clock phase 2 input reflect , // Control playfield, 1 makes right half mirror image input cnt , // center signal, high means right half input rhb , // Reset HBlank signal input [ 19 : 0 ] pfc , // Combined playfield registers output logic pf // Playfield graphics ); When instantiating this module, this dev added a comment to the end of all of her Inputs and Outputs. One shouldn't assume everyone else knows that hclk is Horizontal clock phase 2 even if the name makes sense to yourself. Other good examples of good comments are separating sections of assignments or port instantiations by category, or explaining the \"Why\" behind a particularly unintuitive section of code. However there is such a thing as commenting your code too much. This should also be avoided. Here is an example: // The 16-bit Color Look Up Table wire [ 7 : 0 ] color_lut [ 16 ] = '{ 8'd0 , 8'd27 , 8'd49 , 8'd71 , 8'd87 , 8'd103 , 8'd119 , 8'd130 , 8'd146 , 8'd157 , 8'd174 , 8'd190 , 8'd206 , 8'd228 , 8'd255 , 8'd255 wire TRANSP_DETECT ; // Transparency Detection }; It's obvious that this is a color look up table because the wire is named color_lut so that doesn't need to be described. It's obvious that TRANSP_DETECT is for transparency detection. For an extreme and deliberately funny example: ////////////////////////////////// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~ /// /// REGION PRIORITY HANDLING /// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~ /// ////////////////////////////////// case ( status [ 28 : 27 ]) // Status Bits 27 through 28 // Region priority is in CONF_STR section at line 256 of this file // If line 256 is no longer valid then here is a reference to what it says: // \"D2ORS,Priority,US>EU>JP,EU>US>JP,US>JP>EU,JP>US>EU;\", // O = Option, R and S are the status bits. // 2 status bits means there are 4 combinations of options // Case statements for this begin with 0 and end in 3 // Since there were two switches and 4 options as explained above you can treat 0-3 as 1-4 if you'd like // First Case Statement (0 is actually the first one) 0 : if ( hdr_u ) region_req <= 1 ; // NTSC-U Region else if ( hdr_e ) region_req <= 2 ; // PAL Region else if ( hdr_j ) region_req <= 0 ; // NTSC-J Region else region_req <= 1 ; // Set to NTSC-U if there is no region in the header // Second Case Statement (1 is actually the second one) 1 : if ( hdr_e ) region_req <= 2 ; // PAL Region else if ( hdr_u ) region_req <= 1 ; // NTSC-U Region else if ( hdr_j ) region_req <= 0 ; // NTSC-J Region else region_req <= 2 ; // Set to PAL if there is no region in the header // Third Case Statement (2 is actually the third one) 2 : if ( hdr_u ) region_req <= 1 ; // NTSC-U Region else if ( hdr_j ) region_req <= 0 ; // NTSC-J Region else if ( hdr_e ) region_req <= 2 ; // PAL Region else region_req <= 1 ; // Set to NTSC-U if there is region in the header // Fourth Case Statement (3 is actually the fourth one) 3 : if ( hdr_j ) region_req <= 0 ; // NTSC-J Region else if ( hdr_u ) region_req <= 1 ; // NTSC-U Region else if ( hdr_e ) region_req <= 2 ; // PAL Region else region_req <= 0 ; // Set to NTSC-U if there is region in the header endcase // End of the case statement // Okay I can put things that aren't in the case statement down here ////////////////////////////////////////////// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ /// /// END REGION OF REGION PRIORITY HANDLING /// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ /// ////////////////////////////////////////////// Please don't do things like this.","title":"Comment your code when appropriate"},{"location":"developer/principles/#align-ends-assignments-and-proper-indentation","text":"Try to keep similar elements in our code aligned for readability purposes, for example, in the EEPROM_24C0x.sv file from NES_MiSTer, this: // savestate assign SS_MAP1_BACK [ 2 : 0 ] = ( state == STATE_STANDBY ) ? 3'd0 : ( state == STATE_TEST ) ? 3'd1 : ( state == STATE_ADDRESS ) ? 3'd2 : ( state == STATE_WRITE ) ? 3'd3 : 3'd4 ; ...is a lot easier to read than this: assign SS_MAP1_BACK [ 2 : 0 ] = ( state == STATE_STANDBY ) ? 3'd0 : ( state == STATE_TEST ) ? 3'd1 : ( state == STATE_ADDRESS ) ? 3'd2 : ( state == STATE_WRITE ) ? 3'd3 : 3'd4 ; Sure, they both do the same thing, but it was much easier to parse what each thing did quickly. SystemVerilog is not a strongly typed language with regards to indentations, so you won't get compilation errors if you fail to indent your ends accurately. But we should indent them appropriately anyways. Another example: always @( posedge clk ) begin if ( rst ) q <= 0 ; else if ( d ) q <= ~ q ; else q <= q ; end is much easier to read than: always @( posedge clk ) begin if ( rst ) q <= 0 ; else if ( d ) q <= ~ q ; else q <= q ; end Both will succesfully compile and be functionally identical, but it takes a little longer for our mind to parse on first glance. Aligning comments at the end of a line is also helpful in improving readability as shown in the playfield module example near the top of this page.","title":"Align ends, assignments, and proper indentation"},{"location":"developer/principles/#naming-things-to-be-easily-understood","text":"In EEPROM_STM95 in the Genesis core, this module's port instantiation uses _n to signify that the signal is \"active low\": module STM95XXX ( //... input hold_n , // Hold (active low) input cs_n , // Chip Select (active low) input wp_n , // Write Protect (active low) //... ); It's also commented, but now you know after reading this that anytime a signal with _n is used, that is an active low signal, it doesn't need to be described as active low in a comment each time it is used from then on.","title":"Naming things to be easily understood"},{"location":"developer/principles/#if-you-run-out-of-dsp-or-logic-space-accidentally","text":"If you run out of space in compilation, you might be accidentally implying your code to be put into DSP, which is very limited. You can specify that the compiler use logic instead by using the multstyle : ( * multstyle = \"logic\" * ) module myModule ( input clk ) This will force this module into logic space instead of it ever using DSP or block ram. Also you can force a module into DSP the same way with (* multstyle = \"dsp\" *) . The multstyle attribute can be used for Module declarations, variable declarations, and binary expressions.","title":"If you run out of DSP or Logic space accidentally"},{"location":"setup/controller/","text":"Now we should define some gamepad inputs on our MiSTer. This is pretty easy to do. You should use a keyboard and your gamepad/controller for this step. For each different kind of controller you have, you should do this step, and the MiSTer will store a configuration based on that device's unique ID. Defining your Gamepad's buttons Go to the second menu in the On Screen Display where you went to for to run the Downloader or WiFi scripts. There is another option here, \"Define joystick buttons\". Select this option to configure your buttons on your gamepad: It will guide you through the process of detecting your general controller type by asking you to press a few d-pad buttons and maybe the analog sticks. Then it will ask you to assign some buttons: Four face buttons and two shoulder buttons Start and Select OSD button or 2-button combo (to use instead of F12 on the keyboard) A few extra buttons for advanced functions Skip any buttons you don't want to assign (there may be a lot of them) with the Space on the keyboard or the User button on your MiSTer. If you accidentally assign the wrong button, don't worry, just define it all over again from the start. If you press Enter to \"Finish\" too early, you might miss the Analog Joystick configuration step which is important if you have analog joysticks. Here is a picture to give you an idea of what the buttons it is asking you to press may represent: The L on the bottom left is referring to an analog joystick. Your controller may or may not have this. If it does, the step to define the analogy joystick's input is at the end, so your joystick will not work unless you go through the entire list of inputs to define. Another important button is the OSD button. Many modern controllers have a \"Home\" button, it's probably best to assign this to the OSD/Menu. If you do not assign anything to home, the only way to access the menu will be to use the F12 key on a keyboard. Define Gamepad Inputs/Buttons Example Video","title":"Define Your Gamepad"},{"location":"setup/controller/#defining-your-gamepads-buttons","text":"Go to the second menu in the On Screen Display where you went to for to run the Downloader or WiFi scripts. There is another option here, \"Define joystick buttons\". Select this option to configure your buttons on your gamepad: It will guide you through the process of detecting your general controller type by asking you to press a few d-pad buttons and maybe the analog sticks. Then it will ask you to assign some buttons: Four face buttons and two shoulder buttons Start and Select OSD button or 2-button combo (to use instead of F12 on the keyboard) A few extra buttons for advanced functions Skip any buttons you don't want to assign (there may be a lot of them) with the Space on the keyboard or the User button on your MiSTer. If you accidentally assign the wrong button, don't worry, just define it all over again from the start. If you press Enter to \"Finish\" too early, you might miss the Analog Joystick configuration step which is important if you have analog joysticks. Here is a picture to give you an idea of what the buttons it is asking you to press may represent: The L on the bottom left is referring to an analog joystick. Your controller may or may not have this. If it does, the step to define the analogy joystick's input is at the end, so your joystick will not work unless you go through the entire list of inputs to define. Another important button is the OSD button. Many modern controllers have a \"Home\" button, it's probably best to assign this to the OSD/Menu. If you do not assign anything to home, the only way to access the menu will be to use the F12 key on a keyboard.","title":"Defining your Gamepad's buttons"},{"location":"setup/controller/#define-gamepad-inputsbuttons-example-video","text":"","title":"Define Gamepad Inputs/Buttons Example Video"},{"location":"setup/games/","text":"To play games on the MiSTer you will need to transfer them to your MicroSD. There are other ways to load games, like over a NAS or using USB drive, but for now we're going to stick to the most basic easy method. If you'd like more information on these other methods you can head to the Advanced Networking Page of this site, to find out more. Games folder description The /games/ folder is where ROMs are stored. /games/NES is where you would place NES ROMs, for instance. Each MiSTer core looks to a specific folder for these ROMs so it is best to put them in the right place. Transfer ROMs over the Network with Samba/SMB The MiSTer comes setup with a Samba server already, it just needs to be activated. This means you can connect to it like any other shared folder on the network. It's pretty easy. First we need to enable the Samba service: Enter the terminal/command line of the MiSTer by press F9 on your keyboard and type root for the username, press enter, and type 1 for the password and press enter. Rename /media/fat/linux/_samba.sh to /media/fat/linux/samba.sh in the terminal/console on the MiSTer by running the following command: mv /media/fat/linux/_samba.sh /media/fat/linux/samba.sh Reboot the MiSTer If you are using Windows, all you need to do is type \\\\MiSTer\\sdcard\\ in the address bar at the top of the File Explorer and press enter. You can do the same in Linux or on MacOS depending on how you access network shares on those systems the same way. In this case I'm going to transfer some ROMs to the /games/NES/ folder so I can use them with the NES core. Transfer ROMs to the MicroSD directly You can also turn off the MiSTer, remove the MicroSD and plug it into your computer to transfer roms. It will have an exFAT formatted partition named \"MiSTer\" that most operating systems can work with. After this is done you can proceed to the next step since we are going to Play a Game . Notes about File Formats CD images for any cores that use CD's must either be in CUE/BIN or CHD. It is best to place CD images into their own separate folders and it is adviced to place multi-disc games's into the same folder (e.g. Final Fantasy VII Discs 1-3 in the same Final Fantasy VII folder), since you can then change discs without resetting the core, and your save files will load from disc to disc (in the case of the PSX core). CD images can't be placed in zip archives. They are handled differently from other game ROMs. For more CD image information check CD-based ROMs VHD (virtual hard drive) files are the same, they must not be zipped. All other ROMs can be placed in zip folders/archives and accessed. The core will tell you which file extensions are accepted. If you have an issue with a ROM loading, the readme for that core that is available on GitHub or in the /games/$CORE/ folder should tell you what kinds of files work with that core.","title":"Transferring Games"},{"location":"setup/games/#games-folder-description","text":"The /games/ folder is where ROMs are stored. /games/NES is where you would place NES ROMs, for instance. Each MiSTer core looks to a specific folder for these ROMs so it is best to put them in the right place.","title":"Games folder description"},{"location":"setup/games/#transfer-roms-over-the-network-with-sambasmb","text":"The MiSTer comes setup with a Samba server already, it just needs to be activated. This means you can connect to it like any other shared folder on the network. It's pretty easy. First we need to enable the Samba service: Enter the terminal/command line of the MiSTer by press F9 on your keyboard and type root for the username, press enter, and type 1 for the password and press enter. Rename /media/fat/linux/_samba.sh to /media/fat/linux/samba.sh in the terminal/console on the MiSTer by running the following command: mv /media/fat/linux/_samba.sh /media/fat/linux/samba.sh Reboot the MiSTer If you are using Windows, all you need to do is type \\\\MiSTer\\sdcard\\ in the address bar at the top of the File Explorer and press enter. You can do the same in Linux or on MacOS depending on how you access network shares on those systems the same way. In this case I'm going to transfer some ROMs to the /games/NES/ folder so I can use them with the NES core.","title":"Transfer ROMs over the Network with Samba/SMB"},{"location":"setup/games/#transfer-roms-to-the-microsd-directly","text":"You can also turn off the MiSTer, remove the MicroSD and plug it into your computer to transfer roms. It will have an exFAT formatted partition named \"MiSTer\" that most operating systems can work with. After this is done you can proceed to the next step since we are going to Play a Game .","title":"Transfer ROMs to the MicroSD directly"},{"location":"setup/games/#notes-about-file-formats","text":"CD images for any cores that use CD's must either be in CUE/BIN or CHD. It is best to place CD images into their own separate folders and it is adviced to place multi-disc games's into the same folder (e.g. Final Fantasy VII Discs 1-3 in the same Final Fantasy VII folder), since you can then change discs without resetting the core, and your save files will load from disc to disc (in the case of the PSX core). CD images can't be placed in zip archives. They are handled differently from other game ROMs. For more CD image information check CD-based ROMs VHD (virtual hard drive) files are the same, they must not be zipped. All other ROMs can be placed in zip folders/archives and accessed. The core will tell you which file extensions are accepted. If you have an issue with a ROM loading, the readme for that core that is available on GitHub or in the /games/$CORE/ folder should tell you what kinds of files work with that core.","title":"Notes about File Formats"},{"location":"setup/play/","text":"Next all we need to do is load the core for the system we want to play. In our case it is the NES core. Just select Console then NES and hit enter or the button you assigned \"A\" on the controller earlier. The core will load. You may need to press the Menu button you assigned earlier or F12 on the keyboard to bring the menu up. Once your menu is up, select Load ROM and load your game. Once the game loads, you will want to turn on Autosave if your game saves. Basically, the MiSTer has to be told when to save your game. Let's say you save your progress in Final Fantasy for the NES, each time you do this, you need to open the On Screen Display to tell it to save. The autosave setting makes it so all you have to do is open the menu, so it's a good idea to turn it on so you don't forget. Anytime you change a core setting in the menu that you want to keep, you need to save that setting. So since we always want autosave to be on, after turning it on we just switch to the secondary OSD menu (by pressing right on the controller) and select \"Save Settings\". It's that easy. Here's a short video showing you how to load a core, load the game, and turn on autosave. That's it! It wasn't so bad, you made it through the tutorial. Please be sure to check out all the other sections of this documentation, there are some valuable options to configure, tips and tricks to learn, that will make your experience much better.","title":"Play a Game"},{"location":"setup/requirements/","text":"There are a few things you will need in order to setup your MiSTer: Terasic DE10-Nano MiSTer SDRAM Add-On Board (Optional but many cores require it) Cooling for the FPGA (Highly recommended) MicroSD card (minimum 4GB) and MicroSD Card Reader USB OTG Adapter or MiSTer USB Hub Add-On Board (no USB devices will work without this) USB Keyboard Internet connection HDMI Monitor/TV and HDMI Cable Where to buy DE10-Nano: Terasic Digikey Mouser SDRAM: The MiSTer SDRAM add-on board is required by many cores, like the SNES, NES, Playstation, and Game Boy cores. There are multiple sellers out there which sell these, and you can also assemble it yourself if you are skilled at soldering. USB OTG Adapter/Hub: Preferably, the MiSTer USB Hub Add-on board which you can assemble yourself if you are good at soldering, or you can buy from the various shops that sell them. At a minimum, the MakerSpot Micro USB OTG Hub works very well for the MiSTer, if you are looking for a very cheap option. Cooling: The processor on the DE10-Nano is 21.5mm x 21.5mm so a heatsink that is around this size is suitable. If using one larger than these dimensions, please make sure to use care to not let the heatsink touch other electronic components outside the processor. There is no mounting mechanism for the heatsink, you will need to use an \"adhesive thermal pad\". 3M makes some good ones, and the heatsinks you can buy in this size usually come with these kinds of thermal pads already. Do not apply a lot of pressure and do not touch the components directly with your fingers, as static shock can damage them.","title":"Requirements"},{"location":"setup/requirements/#where-to-buy","text":"DE10-Nano: Terasic Digikey Mouser SDRAM: The MiSTer SDRAM add-on board is required by many cores, like the SNES, NES, Playstation, and Game Boy cores. There are multiple sellers out there which sell these, and you can also assemble it yourself if you are skilled at soldering. USB OTG Adapter/Hub: Preferably, the MiSTer USB Hub Add-on board which you can assemble yourself if you are good at soldering, or you can buy from the various shops that sell them. At a minimum, the MakerSpot Micro USB OTG Hub works very well for the MiSTer, if you are looking for a very cheap option. Cooling: The processor on the DE10-Nano is 21.5mm x 21.5mm so a heatsink that is around this size is suitable. If using one larger than these dimensions, please make sure to use care to not let the heatsink touch other electronic components outside the processor. There is no mounting mechanism for the heatsink, you will need to use an \"adhesive thermal pad\". 3M makes some good ones, and the heatsinks you can buy in this size usually come with these kinds of thermal pads already. Do not apply a lot of pressure and do not touch the components directly with your fingers, as static shock can damage them.","title":"Where to buy"},{"location":"setup/software/","text":"First thing to do is to install the software onto your MicroSD card. Flash Mr. Fusion to your MicroSD Mr. Fusion provides a compact image that you can download and flash onto an SD card of any size with a tool like balenaEtcher , Win32 Disk Imager , Apple Pi Baker , or even dd . We're going to use balenaEtcher for this guide. We install balenaEtcher by downloading the latest release for our computer and installing it. Next we're going to download the latest release of Mr. Fusion : Next, we will insert our MicroSD card into our computer and then open balenaEtcher. We will select \"Flash from file\" and navigate to the Mr Fusion file we downloaded a step earlier. Then we need to select our MicroSD card as the target to flash. And click \"Flash!\" Wait for it to complete successfully. If you see \"Flash complete!\" and \"1 Successful target\" then everything worked fine. If the flash fails, try and flash it again or flash a different MicroSD card in case the one you are using is malfunctioning. We can now close balenaEtcher and remove our MicroSD card. Boot the DE10-Nano with Mr. Fusion Next we just need to carefully insert our MicroSD card into the DE10-Nano ( NOT the MicroSD slot on the IO board on top! ). Now turn on your DE10-Nano. We will wait up to a few minutes for the Mr. Fusion installer to complete. Be patient, or else you may have to start all over again. When the MiSTer On Screen Display with fuzzy static behind it appears, that means you have successfully installed the MiSTer software/OS onto your MicroSD. Check out the next tutorials in the side bar!","title":"Setup MicroSD Card"},{"location":"setup/software/#flash-mr-fusion-to-your-microsd","text":"Mr. Fusion provides a compact image that you can download and flash onto an SD card of any size with a tool like balenaEtcher , Win32 Disk Imager , Apple Pi Baker , or even dd . We're going to use balenaEtcher for this guide. We install balenaEtcher by downloading the latest release for our computer and installing it. Next we're going to download the latest release of Mr. Fusion : Next, we will insert our MicroSD card into our computer and then open balenaEtcher. We will select \"Flash from file\" and navigate to the Mr Fusion file we downloaded a step earlier. Then we need to select our MicroSD card as the target to flash. And click \"Flash!\" Wait for it to complete successfully. If you see \"Flash complete!\" and \"1 Successful target\" then everything worked fine. If the flash fails, try and flash it again or flash a different MicroSD card in case the one you are using is malfunctioning. We can now close balenaEtcher and remove our MicroSD card.","title":"Flash Mr. Fusion to your MicroSD"},{"location":"setup/software/#boot-the-de10-nano-with-mr-fusion","text":"Next we just need to carefully insert our MicroSD card into the DE10-Nano ( NOT the MicroSD slot on the IO board on top! ). Now turn on your DE10-Nano. We will wait up to a few minutes for the Mr. Fusion installer to complete. Be patient, or else you may have to start all over again. When the MiSTer On Screen Display with fuzzy static behind it appears, that means you have successfully installed the MiSTer software/OS onto your MicroSD. Check out the next tutorials in the side bar!","title":"Boot the DE10-Nano with Mr. Fusion"},{"location":"setup/updater/","text":"We need to update the MiSTer the first time you get it setup. This is because the MiSTer currently only has a script to update it, no cores, no arcade files, and it's system files may be outdated. If you don't have a wired internet connection to your MiSTer, please remove your microSD and place the WiFi script into the scripts folder, and then follow the instructions in the WiFi tutorial . Running Downloader.sh Now that your MiSTer is connected to either a wired internet connection or a WiFi connection, you should run an update. This may take awhile the first time, but each time you run the updater after that it will take a lot less time. It's important to update your MiSTer regularly as the framework, cores, and software is updated frequently with bug fixes, features, and new cores. It's very easy to run Downloader.sh, just navigate to the scripts selection in the On Screen Display (osd) in the Menu core by pressing F12 , select it, and go to the downloader script and select it. See video below for an example of the downloader script running:","title":"Running the Updater"},{"location":"setup/updater/#running-downloadersh","text":"Now that your MiSTer is connected to either a wired internet connection or a WiFi connection, you should run an update. This may take awhile the first time, but each time you run the updater after that it will take a lot less time. It's important to update your MiSTer regularly as the framework, cores, and software is updated frequently with bug fixes, features, and new cores. It's very easy to run Downloader.sh, just navigate to the scripts selection in the On Screen Display (osd) in the Menu core by pressing F12 , select it, and go to the downloader script and select it. See video below for an example of the downloader script running:","title":"Running Downloader.sh"}]}